/* automatically generated by rust-bindgen 0.72.0 */

#![allow(unused, non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub const mjVERSION_HEADER: u32 = 332;
pub const mjMINVAL: f64 = 0.000000000000001;
pub const mjPI: f64 = 3.141592653589793;
pub const mjMAXVAL: f64 = 10000000000.0;
pub const mjMINMU: f64 = 0.00001;
pub const mjMINIMP: f64 = 0.0001;
pub const mjMAXIMP: f64 = 0.9999;
pub const mjMAXCONPAIR: u32 = 50;
pub const mjMAXTREEDEPTH: u32 = 50;
pub const mjMAXFLEXNODES: u32 = 27;
pub const mjNEQDATA: usize = 11;
pub const mjNDYN: usize = 10;
pub const mjNGAIN: usize = 10;
pub const mjNBIAS: usize = 10;
pub const mjNFLUID: usize = 12;
pub const mjNREF: usize = 2;
pub const mjNIMP: usize = 5;
pub const mjNSOLVER: usize = 200;
pub const mjNISLAND: usize = 20;
pub const mjMAXTHREAD: u32 = 128;
pub const mjNGROUP: usize = 6;
pub const mjMAXLIGHT: u32 = 100;
pub const mjMAXOVERLAY: u32 = 500;
pub const mjMAXLINE: u32 = 100;
pub const mjMAXLINEPNT: u32 = 1000;
pub const mjMAXPLANEGRID: u32 = 200;
pub const mjNAUX: usize = 10;
pub const mjMAXTEXTURE: u32 = 1000;
pub const mjMAXMATERIAL: u32 = 1000;
pub const mjMAXUISECT: u32 = 10;
pub const mjMAXUIITEM: u32 = 200;
pub const mjMAXUITEXT: u32 = 300;
pub const mjMAXUINAME: u32 = 40;
pub const mjMAXUIMULTI: u32 = 35;
pub const mjMAXUIEDIT: u32 = 7;
pub const mjMAXUIRECT: u32 = 25;
pub const mjSEPCLOSED: u32 = 1000;
pub const mjPRESERVE: u32 = 2000;
pub const mjKEY_ESCAPE: u32 = 256;
pub const mjKEY_ENTER: u32 = 257;
pub const mjKEY_TAB: u32 = 258;
pub const mjKEY_BACKSPACE: u32 = 259;
pub const mjKEY_INSERT: u32 = 260;
pub const mjKEY_DELETE: u32 = 261;
pub const mjKEY_RIGHT: u32 = 262;
pub const mjKEY_LEFT: u32 = 263;
pub const mjKEY_DOWN: u32 = 264;
pub const mjKEY_UP: u32 = 265;
pub const mjKEY_PAGE_UP: u32 = 266;
pub const mjKEY_PAGE_DOWN: u32 = 267;
pub const mjKEY_HOME: u32 = 268;
pub const mjKEY_END: u32 = 269;
pub const mjKEY_F1: u32 = 290;
pub const mjKEY_F2: u32 = 291;
pub const mjKEY_F3: u32 = 292;
pub const mjKEY_F4: u32 = 293;
pub const mjKEY_F5: u32 = 294;
pub const mjKEY_F6: u32 = 295;
pub const mjKEY_F7: u32 = 296;
pub const mjKEY_F8: u32 = 297;
pub const mjKEY_F9: u32 = 298;
pub const mjKEY_F10: u32 = 299;
pub const mjKEY_F11: u32 = 300;
pub const mjKEY_F12: u32 = 301;
pub const mjKEY_NUMPAD_0: u32 = 320;
pub const mjKEY_NUMPAD_9: u32 = 329;
pub type mjtNum = f64;
pub type mjtByte = ::core::ffi::c_uchar;
pub const mjNDISABLE: usize = mjtDisableBit::mjNDISABLE.0 as usize;
impl mjtDisableBit {
    pub const CONSTRAINT: mjtDisableBit = mjtDisableBit(1);
    pub const EQUALITY: mjtDisableBit = mjtDisableBit(2);
    pub const FRICTIONLOSS: mjtDisableBit = mjtDisableBit(4);
    pub const LIMIT: mjtDisableBit = mjtDisableBit(8);
    pub const CONTACT: mjtDisableBit = mjtDisableBit(16);
    pub const PASSIVE: mjtDisableBit = mjtDisableBit(32);
    pub const GRAVITY: mjtDisableBit = mjtDisableBit(64);
    pub const CLAMPCTRL: mjtDisableBit = mjtDisableBit(128);
    pub const WARMSTART: mjtDisableBit = mjtDisableBit(256);
    pub const FILTERPARENT: mjtDisableBit = mjtDisableBit(512);
    pub const ACTUATION: mjtDisableBit = mjtDisableBit(1024);
    pub const REFSAFE: mjtDisableBit = mjtDisableBit(2048);
    pub const SENSOR: mjtDisableBit = mjtDisableBit(4096);
    pub const MIDPHASE: mjtDisableBit = mjtDisableBit(8192);
    pub const EULERDAMP: mjtDisableBit = mjtDisableBit(16384);
    pub const AUTORESET: mjtDisableBit = mjtDisableBit(32768);
    pub const NATIVECCD: mjtDisableBit = mjtDisableBit(65536);
    pub(crate) const mjNDISABLE: mjtDisableBit = mjtDisableBit(17);
}
impl ::core::ops::BitOr<mjtDisableBit> for mjtDisableBit {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        mjtDisableBit(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for mjtDisableBit {
    #[inline]
    fn bitor_assign(&mut self, rhs: mjtDisableBit) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<mjtDisableBit> for mjtDisableBit {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        mjtDisableBit(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for mjtDisableBit {
    #[inline]
    fn bitand_assign(&mut self, rhs: mjtDisableBit) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtDisableBit(pub(crate) ::core::ffi::c_uint);
pub const mjNENABLE: usize = mjtEnableBit::mjNENABLE.0 as usize;
impl mjtEnableBit {
    pub const OVERRIDE: mjtEnableBit = mjtEnableBit(1);
    pub const ENERGY: mjtEnableBit = mjtEnableBit(2);
    pub const FWDINV: mjtEnableBit = mjtEnableBit(4);
    pub const INVDISCRETE: mjtEnableBit = mjtEnableBit(8);
    pub const MULTICCD: mjtEnableBit = mjtEnableBit(16);
    pub const ISLAND: mjtEnableBit = mjtEnableBit(32);
    pub(crate) const mjNENABLE: mjtEnableBit = mjtEnableBit(6);
}
impl ::core::ops::BitOr<mjtEnableBit> for mjtEnableBit {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        mjtEnableBit(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for mjtEnableBit {
    #[inline]
    fn bitor_assign(&mut self, rhs: mjtEnableBit) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<mjtEnableBit> for mjtEnableBit {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        mjtEnableBit(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for mjtEnableBit {
    #[inline]
    fn bitand_assign(&mut self, rhs: mjtEnableBit) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtEnableBit(pub(crate) ::core::ffi::c_uint);
impl mjtJoint {
    pub const FREE: mjtJoint = mjtJoint(0);
    pub const BALL: mjtJoint = mjtJoint(1);
    pub const SLIDE: mjtJoint = mjtJoint(2);
    pub const HINGE: mjtJoint = mjtJoint(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtJoint(pub(crate) ::core::ffi::c_uint);
pub const mjNGEOMTYPES: usize = mjtGeom::mjNGEOMTYPES.0 as usize;
impl mjtGeom {
    pub const PLANE: mjtGeom = mjtGeom(0);
    pub const HFIELD: mjtGeom = mjtGeom(1);
    pub const SPHERE: mjtGeom = mjtGeom(2);
    pub const CAPSULE: mjtGeom = mjtGeom(3);
    pub const ELLIPSOID: mjtGeom = mjtGeom(4);
    pub const CYLINDER: mjtGeom = mjtGeom(5);
    pub const BOX: mjtGeom = mjtGeom(6);
    pub const MESH: mjtGeom = mjtGeom(7);
    pub const SDF: mjtGeom = mjtGeom(8);
    pub const ARROW: mjtGeom = mjtGeom(100);
    pub const ARROW1: mjtGeom = mjtGeom(101);
    pub const ARROW2: mjtGeom = mjtGeom(102);
    pub const LINE: mjtGeom = mjtGeom(103);
    pub const LINEBOX: mjtGeom = mjtGeom(104);
    pub const FLEX: mjtGeom = mjtGeom(105);
    pub const SKIN: mjtGeom = mjtGeom(106);
    pub const LABEL: mjtGeom = mjtGeom(107);
    pub const TRIANGLE: mjtGeom = mjtGeom(108);
    pub const NONE: mjtGeom = mjtGeom(1001);
    pub(crate) const mjNGEOMTYPES: mjtGeom = mjtGeom(9);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtGeom(pub(crate) ::core::ffi::c_uint);
impl mjtCamLight {
    pub const FIXED: mjtCamLight = mjtCamLight(0);
    pub const TRACK: mjtCamLight = mjtCamLight(1);
    pub const TRACKCOM: mjtCamLight = mjtCamLight(2);
    pub const TARGETBODY: mjtCamLight = mjtCamLight(3);
    pub const TARGETBODYCOM: mjtCamLight = mjtCamLight(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtCamLight(pub(crate) ::core::ffi::c_uint);
impl mjtTexture {
    pub const _2D: mjtTexture = mjtTexture(0);
    pub const CUBE: mjtTexture = mjtTexture(1);
    pub const SKYBOX: mjtTexture = mjtTexture(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtTexture(pub(crate) ::core::ffi::c_uint);
pub const mjNTEXROLE: usize = mjtTextureRole::mjNTEXROLE.0 as usize;
impl mjtTextureRole {
    pub const USER: mjtTextureRole = mjtTextureRole(0);
    pub const RGB: mjtTextureRole = mjtTextureRole(1);
    pub const OCCLUSION: mjtTextureRole = mjtTextureRole(2);
    pub const ROUGHNESS: mjtTextureRole = mjtTextureRole(3);
    pub const METALLIC: mjtTextureRole = mjtTextureRole(4);
    pub const NORMAL: mjtTextureRole = mjtTextureRole(5);
    pub const OPACITY: mjtTextureRole = mjtTextureRole(6);
    pub const EMISSIVE: mjtTextureRole = mjtTextureRole(7);
    pub const RGBA: mjtTextureRole = mjtTextureRole(8);
    pub const ORM: mjtTextureRole = mjtTextureRole(9);
    pub(crate) const mjNTEXROLE: mjtTextureRole = mjtTextureRole(10);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtTextureRole(pub(crate) ::core::ffi::c_uint);
impl mjtIntegrator {
    pub const EULER: mjtIntegrator = mjtIntegrator(0);
    pub const RK4: mjtIntegrator = mjtIntegrator(1);
    pub const IMPLICIT: mjtIntegrator = mjtIntegrator(2);
    pub const IMPLICITFAST: mjtIntegrator = mjtIntegrator(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtIntegrator(pub(crate) ::core::ffi::c_uint);
impl mjtCone {
    pub const PYRAMIDAL: mjtCone = mjtCone(0);
    pub const ELLIPTIC: mjtCone = mjtCone(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtCone(pub(crate) ::core::ffi::c_uint);
impl mjtJacobian {
    pub const DENSE: mjtJacobian = mjtJacobian(0);
    pub const SPARSE: mjtJacobian = mjtJacobian(1);
    pub const AUTO: mjtJacobian = mjtJacobian(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtJacobian(pub(crate) ::core::ffi::c_uint);
impl mjtSolver {
    pub const PGS: mjtSolver = mjtSolver(0);
    pub const CG: mjtSolver = mjtSolver(1);
    pub const NEWTON: mjtSolver = mjtSolver(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtSolver(pub(crate) ::core::ffi::c_uint);
impl mjtEq {
    pub const CONNECT: mjtEq = mjtEq(0);
    pub const WELD: mjtEq = mjtEq(1);
    pub const JOINT: mjtEq = mjtEq(2);
    pub const TENDON: mjtEq = mjtEq(3);
    pub const FLEX: mjtEq = mjtEq(4);
    pub const DISTANCE: mjtEq = mjtEq(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtEq(pub(crate) ::core::ffi::c_uint);
impl mjtWrap {
    pub const NONE: mjtWrap = mjtWrap(0);
    pub const JOINT: mjtWrap = mjtWrap(1);
    pub const PULLEY: mjtWrap = mjtWrap(2);
    pub const SITE: mjtWrap = mjtWrap(3);
    pub const SPHERE: mjtWrap = mjtWrap(4);
    pub const CYLINDER: mjtWrap = mjtWrap(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtWrap(pub(crate) ::core::ffi::c_uint);
impl mjtTrn {
    pub const JOINT: mjtTrn = mjtTrn(0);
    pub const JOINTINPARENT: mjtTrn = mjtTrn(1);
    pub const SLIDERCRANK: mjtTrn = mjtTrn(2);
    pub const TENDON: mjtTrn = mjtTrn(3);
    pub const SITE: mjtTrn = mjtTrn(4);
    pub const BODY: mjtTrn = mjtTrn(5);
    pub const UNDEFINED: mjtTrn = mjtTrn(1000);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtTrn(pub(crate) ::core::ffi::c_uint);
impl mjtDyn {
    pub const NONE: mjtDyn = mjtDyn(0);
    pub const INTEGRATOR: mjtDyn = mjtDyn(1);
    pub const FILTER: mjtDyn = mjtDyn(2);
    pub const FILTEREXACT: mjtDyn = mjtDyn(3);
    pub const MUSCLE: mjtDyn = mjtDyn(4);
    pub const USER: mjtDyn = mjtDyn(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtDyn(pub(crate) ::core::ffi::c_uint);
impl mjtGain {
    pub const FIXED: mjtGain = mjtGain(0);
    pub const AFFINE: mjtGain = mjtGain(1);
    pub const MUSCLE: mjtGain = mjtGain(2);
    pub const USER: mjtGain = mjtGain(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtGain(pub(crate) ::core::ffi::c_uint);
impl mjtBias {
    pub const NONE: mjtBias = mjtBias(0);
    pub const AFFINE: mjtBias = mjtBias(1);
    pub const MUSCLE: mjtBias = mjtBias(2);
    pub const USER: mjtBias = mjtBias(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtBias(pub(crate) ::core::ffi::c_uint);
pub const mjNOBJECT: usize = mjtObj::mjNOBJECT.0 as usize;
impl mjtObj {
    pub const UNKNOWN: mjtObj = mjtObj(0);
    pub const BODY: mjtObj = mjtObj(1);
    pub const XBODY: mjtObj = mjtObj(2);
    pub const JOINT: mjtObj = mjtObj(3);
    pub const DOF: mjtObj = mjtObj(4);
    pub const GEOM: mjtObj = mjtObj(5);
    pub const SITE: mjtObj = mjtObj(6);
    pub const CAMERA: mjtObj = mjtObj(7);
    pub const LIGHT: mjtObj = mjtObj(8);
    pub const FLEX: mjtObj = mjtObj(9);
    pub const MESH: mjtObj = mjtObj(10);
    pub const SKIN: mjtObj = mjtObj(11);
    pub const HFIELD: mjtObj = mjtObj(12);
    pub const TEXTURE: mjtObj = mjtObj(13);
    pub const MATERIAL: mjtObj = mjtObj(14);
    pub const PAIR: mjtObj = mjtObj(15);
    pub const EXCLUDE: mjtObj = mjtObj(16);
    pub const EQUALITY: mjtObj = mjtObj(17);
    pub const TENDON: mjtObj = mjtObj(18);
    pub const ACTUATOR: mjtObj = mjtObj(19);
    pub const SENSOR: mjtObj = mjtObj(20);
    pub const NUMERIC: mjtObj = mjtObj(21);
    pub const TEXT: mjtObj = mjtObj(22);
    pub const TUPLE: mjtObj = mjtObj(23);
    pub const KEY: mjtObj = mjtObj(24);
    pub const PLUGIN: mjtObj = mjtObj(25);
    pub const FRAME: mjtObj = mjtObj(100);
    pub const DEFAULT: mjtObj = mjtObj(101);
    pub const MODEL: mjtObj = mjtObj(102);
    pub(crate) const mjNOBJECT: mjtObj = mjtObj(26);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtObj(pub(crate) ::core::ffi::c_uint);
impl mjtConstraint {
    pub const EQUALITY: mjtConstraint = mjtConstraint(0);
    pub const FRICTION_DOF: mjtConstraint = mjtConstraint(1);
    pub const FRICTION_TENDON: mjtConstraint = mjtConstraint(2);
    pub const LIMIT_JOINT: mjtConstraint = mjtConstraint(3);
    pub const LIMIT_TENDON: mjtConstraint = mjtConstraint(4);
    pub const CONTACT_FRICTIONLESS: mjtConstraint = mjtConstraint(5);
    pub const CONTACT_PYRAMIDAL: mjtConstraint = mjtConstraint(6);
    pub const CONTACT_ELLIPTIC: mjtConstraint = mjtConstraint(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtConstraint(pub(crate) ::core::ffi::c_uint);
impl mjtConstraintState {
    pub const SATISFIED: mjtConstraintState = mjtConstraintState(0);
    pub const QUADRATIC: mjtConstraintState = mjtConstraintState(1);
    pub const LINEARNEG: mjtConstraintState = mjtConstraintState(2);
    pub const LINEARPOS: mjtConstraintState = mjtConstraintState(3);
    pub const CONE: mjtConstraintState = mjtConstraintState(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtConstraintState(pub(crate) ::core::ffi::c_uint);
impl mjtSensor {
    pub const TOUCH: mjtSensor = mjtSensor(0);
    pub const ACCELEROMETER: mjtSensor = mjtSensor(1);
    pub const VELOCIMETER: mjtSensor = mjtSensor(2);
    pub const GYRO: mjtSensor = mjtSensor(3);
    pub const FORCE: mjtSensor = mjtSensor(4);
    pub const TORQUE: mjtSensor = mjtSensor(5);
    pub const MAGNETOMETER: mjtSensor = mjtSensor(6);
    pub const RANGEFINDER: mjtSensor = mjtSensor(7);
    pub const CAMPROJECTION: mjtSensor = mjtSensor(8);
    pub const JOINTPOS: mjtSensor = mjtSensor(9);
    pub const JOINTVEL: mjtSensor = mjtSensor(10);
    pub const TENDONPOS: mjtSensor = mjtSensor(11);
    pub const TENDONVEL: mjtSensor = mjtSensor(12);
    pub const ACTUATORPOS: mjtSensor = mjtSensor(13);
    pub const ACTUATORVEL: mjtSensor = mjtSensor(14);
    pub const ACTUATORFRC: mjtSensor = mjtSensor(15);
    pub const JOINTACTFRC: mjtSensor = mjtSensor(16);
    pub const TENDONACTFRC: mjtSensor = mjtSensor(17);
    pub const BALLQUAT: mjtSensor = mjtSensor(18);
    pub const BALLANGVEL: mjtSensor = mjtSensor(19);
    pub const JOINTLIMITPOS: mjtSensor = mjtSensor(20);
    pub const JOINTLIMITVEL: mjtSensor = mjtSensor(21);
    pub const JOINTLIMITFRC: mjtSensor = mjtSensor(22);
    pub const TENDONLIMITPOS: mjtSensor = mjtSensor(23);
    pub const TENDONLIMITVEL: mjtSensor = mjtSensor(24);
    pub const TENDONLIMITFRC: mjtSensor = mjtSensor(25);
    pub const FRAMEPOS: mjtSensor = mjtSensor(26);
    pub const FRAMEQUAT: mjtSensor = mjtSensor(27);
    pub const FRAMEXAXIS: mjtSensor = mjtSensor(28);
    pub const FRAMEYAXIS: mjtSensor = mjtSensor(29);
    pub const FRAMEZAXIS: mjtSensor = mjtSensor(30);
    pub const FRAMELINVEL: mjtSensor = mjtSensor(31);
    pub const FRAMEANGVEL: mjtSensor = mjtSensor(32);
    pub const FRAMELINACC: mjtSensor = mjtSensor(33);
    pub const FRAMEANGACC: mjtSensor = mjtSensor(34);
    pub const SUBTREECOM: mjtSensor = mjtSensor(35);
    pub const SUBTREELINVEL: mjtSensor = mjtSensor(36);
    pub const SUBTREEANGMOM: mjtSensor = mjtSensor(37);
    pub const GEOMDIST: mjtSensor = mjtSensor(38);
    pub const GEOMNORMAL: mjtSensor = mjtSensor(39);
    pub const GEOMFROMTO: mjtSensor = mjtSensor(40);
    pub const E_POTENTIAL: mjtSensor = mjtSensor(41);
    pub const E_KINETIC: mjtSensor = mjtSensor(42);
    pub const CLOCK: mjtSensor = mjtSensor(43);
    pub const PLUGIN: mjtSensor = mjtSensor(44);
    pub const USER: mjtSensor = mjtSensor(45);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtSensor(pub(crate) ::core::ffi::c_uint);
impl mjtStage {
    pub const NONE: mjtStage = mjtStage(0);
    pub const POS: mjtStage = mjtStage(1);
    pub const VEL: mjtStage = mjtStage(2);
    pub const ACC: mjtStage = mjtStage(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtStage(pub(crate) ::core::ffi::c_uint);
impl mjtDataType {
    pub const REAL: mjtDataType = mjtDataType(0);
    pub const POSITIVE: mjtDataType = mjtDataType(1);
    pub const AXIS: mjtDataType = mjtDataType(2);
    pub const QUATERNION: mjtDataType = mjtDataType(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtDataType(pub(crate) ::core::ffi::c_uint);
impl mjtSameFrame {
    pub const NONE: mjtSameFrame = mjtSameFrame(0);
    pub const BODY: mjtSameFrame = mjtSameFrame(1);
    pub const INERTIA: mjtSameFrame = mjtSameFrame(2);
    pub const BODYROT: mjtSameFrame = mjtSameFrame(3);
    pub const INERTIAROT: mjtSameFrame = mjtSameFrame(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtSameFrame(pub(crate) ::core::ffi::c_uint);
impl mjtLRMode {
    pub const NONE: mjtLRMode = mjtLRMode(0);
    pub const MUSCLE: mjtLRMode = mjtLRMode(1);
    pub const MUSCLEUSER: mjtLRMode = mjtLRMode(2);
    pub const ALL: mjtLRMode = mjtLRMode(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtLRMode(pub(crate) ::core::ffi::c_uint);
impl mjtFlexSelf {
    pub const NONE: mjtFlexSelf = mjtFlexSelf(0);
    pub const NARROW: mjtFlexSelf = mjtFlexSelf(1);
    pub const BVH: mjtFlexSelf = mjtFlexSelf(2);
    pub const SAP: mjtFlexSelf = mjtFlexSelf(3);
    pub const AUTO: mjtFlexSelf = mjtFlexSelf(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtFlexSelf(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjLROpt {
    pub(crate) mode: ::core::ffi::c_int,
    pub(crate) useexisting: ::core::ffi::c_int,
    pub(crate) uselimit: ::core::ffi::c_int,
    pub(crate) accel: mjtNum,
    pub(crate) maxforce: mjtNum,
    pub(crate) timeconst: mjtNum,
    pub(crate) timestep: mjtNum,
    pub(crate) inttotal: mjtNum,
    pub(crate) interval: mjtNum,
    pub(crate) tolrange: mjtNum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjLROpt"][::core::mem::size_of::<mjLROpt>() - 72usize];
    ["Alignment of mjLROpt"][::core::mem::align_of::<mjLROpt>() - 8usize];
    ["Offset of field: mjLROpt::mode"][::core::mem::offset_of!(mjLROpt, mode) - 0usize];
    ["Offset of field: mjLROpt::useexisting"]
        [::core::mem::offset_of!(mjLROpt, useexisting) - 4usize];
    ["Offset of field: mjLROpt::uselimit"][::core::mem::offset_of!(mjLROpt, uselimit) - 8usize];
    ["Offset of field: mjLROpt::accel"][::core::mem::offset_of!(mjLROpt, accel) - 16usize];
    ["Offset of field: mjLROpt::maxforce"][::core::mem::offset_of!(mjLROpt, maxforce) - 24usize];
    ["Offset of field: mjLROpt::timeconst"][::core::mem::offset_of!(mjLROpt, timeconst) - 32usize];
    ["Offset of field: mjLROpt::timestep"][::core::mem::offset_of!(mjLROpt, timestep) - 40usize];
    ["Offset of field: mjLROpt::inttotal"][::core::mem::offset_of!(mjLROpt, inttotal) - 48usize];
    ["Offset of field: mjLROpt::interval"][::core::mem::offset_of!(mjLROpt, interval) - 56usize];
    ["Offset of field: mjLROpt::tolrange"][::core::mem::offset_of!(mjLROpt, tolrange) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjVFS {
    pub(crate) impl_: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVFS"][::core::mem::size_of::<mjVFS>() - 8usize];
    ["Alignment of mjVFS"][::core::mem::align_of::<mjVFS>() - 8usize];
    ["Offset of field: mjVFS::impl_"][::core::mem::offset_of!(mjVFS, impl_) - 0usize];
};
impl Default for mjVFS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjOption {
    pub(crate) timestep: mjtNum,
    pub(crate) apirate: mjtNum,
    pub(crate) impratio: mjtNum,
    pub(crate) tolerance: mjtNum,
    pub(crate) ls_tolerance: mjtNum,
    pub(crate) noslip_tolerance: mjtNum,
    pub(crate) ccd_tolerance: mjtNum,
    pub(crate) gravity: [mjtNum; 3usize],
    pub(crate) wind: [mjtNum; 3usize],
    pub(crate) magnetic: [mjtNum; 3usize],
    pub(crate) density: mjtNum,
    pub(crate) viscosity: mjtNum,
    pub(crate) o_margin: mjtNum,
    pub(crate) o_solref: [mjtNum; 2usize],
    pub(crate) o_solimp: [mjtNum; 5usize],
    pub(crate) o_friction: [mjtNum; 5usize],
    pub(crate) integrator: ::core::ffi::c_int,
    pub(crate) cone: ::core::ffi::c_int,
    pub(crate) jacobian: ::core::ffi::c_int,
    pub(crate) solver: ::core::ffi::c_int,
    pub(crate) iterations: ::core::ffi::c_int,
    pub(crate) ls_iterations: ::core::ffi::c_int,
    pub(crate) noslip_iterations: ::core::ffi::c_int,
    pub(crate) ccd_iterations: ::core::ffi::c_int,
    pub(crate) disableflags: ::core::ffi::c_int,
    pub(crate) enableflags: ::core::ffi::c_int,
    pub(crate) disableactuator: ::core::ffi::c_int,
    pub(crate) sdf_initpoints: ::core::ffi::c_int,
    pub(crate) sdf_iterations: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjOption"][::core::mem::size_of::<mjOption>() - 304usize];
    ["Alignment of mjOption"][::core::mem::align_of::<mjOption>() - 8usize];
    ["Offset of field: mjOption::timestep"][::core::mem::offset_of!(mjOption, timestep) - 0usize];
    ["Offset of field: mjOption::apirate"][::core::mem::offset_of!(mjOption, apirate) - 8usize];
    ["Offset of field: mjOption::impratio"][::core::mem::offset_of!(mjOption, impratio) - 16usize];
    ["Offset of field: mjOption::tolerance"]
        [::core::mem::offset_of!(mjOption, tolerance) - 24usize];
    ["Offset of field: mjOption::ls_tolerance"]
        [::core::mem::offset_of!(mjOption, ls_tolerance) - 32usize];
    ["Offset of field: mjOption::noslip_tolerance"]
        [::core::mem::offset_of!(mjOption, noslip_tolerance) - 40usize];
    ["Offset of field: mjOption::ccd_tolerance"]
        [::core::mem::offset_of!(mjOption, ccd_tolerance) - 48usize];
    ["Offset of field: mjOption::gravity"][::core::mem::offset_of!(mjOption, gravity) - 56usize];
    ["Offset of field: mjOption::wind"][::core::mem::offset_of!(mjOption, wind) - 80usize];
    ["Offset of field: mjOption::magnetic"][::core::mem::offset_of!(mjOption, magnetic) - 104usize];
    ["Offset of field: mjOption::density"][::core::mem::offset_of!(mjOption, density) - 128usize];
    ["Offset of field: mjOption::viscosity"]
        [::core::mem::offset_of!(mjOption, viscosity) - 136usize];
    ["Offset of field: mjOption::o_margin"][::core::mem::offset_of!(mjOption, o_margin) - 144usize];
    ["Offset of field: mjOption::o_solref"][::core::mem::offset_of!(mjOption, o_solref) - 152usize];
    ["Offset of field: mjOption::o_solimp"][::core::mem::offset_of!(mjOption, o_solimp) - 168usize];
    ["Offset of field: mjOption::o_friction"]
        [::core::mem::offset_of!(mjOption, o_friction) - 208usize];
    ["Offset of field: mjOption::integrator"]
        [::core::mem::offset_of!(mjOption, integrator) - 248usize];
    ["Offset of field: mjOption::cone"][::core::mem::offset_of!(mjOption, cone) - 252usize];
    ["Offset of field: mjOption::jacobian"][::core::mem::offset_of!(mjOption, jacobian) - 256usize];
    ["Offset of field: mjOption::solver"][::core::mem::offset_of!(mjOption, solver) - 260usize];
    ["Offset of field: mjOption::iterations"]
        [::core::mem::offset_of!(mjOption, iterations) - 264usize];
    ["Offset of field: mjOption::ls_iterations"]
        [::core::mem::offset_of!(mjOption, ls_iterations) - 268usize];
    ["Offset of field: mjOption::noslip_iterations"]
        [::core::mem::offset_of!(mjOption, noslip_iterations) - 272usize];
    ["Offset of field: mjOption::ccd_iterations"]
        [::core::mem::offset_of!(mjOption, ccd_iterations) - 276usize];
    ["Offset of field: mjOption::disableflags"]
        [::core::mem::offset_of!(mjOption, disableflags) - 280usize];
    ["Offset of field: mjOption::enableflags"]
        [::core::mem::offset_of!(mjOption, enableflags) - 284usize];
    ["Offset of field: mjOption::disableactuator"]
        [::core::mem::offset_of!(mjOption, disableactuator) - 288usize];
    ["Offset of field: mjOption::sdf_initpoints"]
        [::core::mem::offset_of!(mjOption, sdf_initpoints) - 292usize];
    ["Offset of field: mjOption::sdf_iterations"]
        [::core::mem::offset_of!(mjOption, sdf_iterations) - 296usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual {
    pub(crate) global: mjVisual___bindgen_ty_1,
    pub(crate) quality: mjVisual___bindgen_ty_2,
    pub(crate) headlight: mjVisual___bindgen_ty_3,
    pub(crate) map: mjVisual___bindgen_ty_4,
    pub(crate) scale: mjVisual___bindgen_ty_5,
    pub(crate) rgba: mjVisual___bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_1 {
    pub(crate) orthographic: ::core::ffi::c_int,
    pub(crate) fovy: f32,
    pub(crate) ipd: f32,
    pub(crate) azimuth: f32,
    pub(crate) elevation: f32,
    pub(crate) linewidth: f32,
    pub(crate) glow: f32,
    pub(crate) realtime: f32,
    pub(crate) offwidth: ::core::ffi::c_int,
    pub(crate) offheight: ::core::ffi::c_int,
    pub(crate) ellipsoidinertia: ::core::ffi::c_int,
    pub(crate) bvactive: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_1"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_1>() - 48usize];
    ["Alignment of mjVisual___bindgen_ty_1"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_1>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_1::orthographic"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, orthographic) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_1::fovy"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, fovy) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_1::ipd"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, ipd) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_1::azimuth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, azimuth) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_1::elevation"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, elevation) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_1::linewidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, linewidth) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_1::glow"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, glow) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_1::realtime"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, realtime) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_1::offwidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, offwidth) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_1::offheight"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, offheight) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_1::ellipsoidinertia"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, ellipsoidinertia) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_1::bvactive"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_1, bvactive) - 44usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_2 {
    pub(crate) shadowsize: ::core::ffi::c_int,
    pub(crate) offsamples: ::core::ffi::c_int,
    pub(crate) numslices: ::core::ffi::c_int,
    pub(crate) numstacks: ::core::ffi::c_int,
    pub(crate) numquads: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_2"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_2>() - 20usize];
    ["Alignment of mjVisual___bindgen_ty_2"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_2>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_2::shadowsize"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_2, shadowsize) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_2::offsamples"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_2, offsamples) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numslices"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_2, numslices) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numstacks"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_2, numstacks) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_2::numquads"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_2, numquads) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_3 {
    pub(crate) ambient: [f32; 3usize],
    pub(crate) diffuse: [f32; 3usize],
    pub(crate) specular: [f32; 3usize],
    pub(crate) active: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_3"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_3>() - 40usize];
    ["Alignment of mjVisual___bindgen_ty_3"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_3>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_3::ambient"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_3, ambient) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_3::diffuse"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_3, diffuse) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_3::specular"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_3, specular) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_3::active"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_3, active) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_4 {
    pub(crate) stiffness: f32,
    pub(crate) stiffnessrot: f32,
    pub(crate) force: f32,
    pub(crate) torque: f32,
    pub(crate) alpha: f32,
    pub(crate) fogstart: f32,
    pub(crate) fogend: f32,
    pub(crate) znear: f32,
    pub(crate) zfar: f32,
    pub(crate) haze: f32,
    pub(crate) shadowclip: f32,
    pub(crate) shadowscale: f32,
    pub(crate) actuatortendon: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_4"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_4>() - 52usize];
    ["Alignment of mjVisual___bindgen_ty_4"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_4>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_4::stiffness"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, stiffness) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_4::stiffnessrot"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, stiffnessrot) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_4::force"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, force) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_4::torque"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, torque) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_4::alpha"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, alpha) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_4::fogstart"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, fogstart) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_4::fogend"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, fogend) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_4::znear"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, znear) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_4::zfar"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, zfar) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_4::haze"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, haze) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_4::shadowclip"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, shadowclip) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_4::shadowscale"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, shadowscale) - 44usize];
    ["Offset of field: mjVisual___bindgen_ty_4::actuatortendon"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_4, actuatortendon) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_5 {
    pub(crate) forcewidth: f32,
    pub(crate) contactwidth: f32,
    pub(crate) contactheight: f32,
    pub(crate) connect: f32,
    pub(crate) com: f32,
    pub(crate) camera: f32,
    pub(crate) light: f32,
    pub(crate) selectpoint: f32,
    pub(crate) jointlength: f32,
    pub(crate) jointwidth: f32,
    pub(crate) actuatorlength: f32,
    pub(crate) actuatorwidth: f32,
    pub(crate) framelength: f32,
    pub(crate) framewidth: f32,
    pub(crate) constraint: f32,
    pub(crate) slidercrank: f32,
    pub(crate) frustum: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_5"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_5>() - 68usize];
    ["Alignment of mjVisual___bindgen_ty_5"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_5>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_5::forcewidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, forcewidth) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_5::contactwidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, contactwidth) - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_5::contactheight"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, contactheight) - 8usize];
    ["Offset of field: mjVisual___bindgen_ty_5::connect"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, connect) - 12usize];
    ["Offset of field: mjVisual___bindgen_ty_5::com"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, com) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_5::camera"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, camera) - 20usize];
    ["Offset of field: mjVisual___bindgen_ty_5::light"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, light) - 24usize];
    ["Offset of field: mjVisual___bindgen_ty_5::selectpoint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, selectpoint) - 28usize];
    ["Offset of field: mjVisual___bindgen_ty_5::jointlength"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, jointlength) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_5::jointwidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, jointwidth) - 36usize];
    ["Offset of field: mjVisual___bindgen_ty_5::actuatorlength"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, actuatorlength) - 40usize];
    ["Offset of field: mjVisual___bindgen_ty_5::actuatorwidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, actuatorwidth) - 44usize];
    ["Offset of field: mjVisual___bindgen_ty_5::framelength"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, framelength) - 48usize];
    ["Offset of field: mjVisual___bindgen_ty_5::framewidth"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, framewidth) - 52usize];
    ["Offset of field: mjVisual___bindgen_ty_5::constraint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, constraint) - 56usize];
    ["Offset of field: mjVisual___bindgen_ty_5::slidercrank"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, slidercrank) - 60usize];
    ["Offset of field: mjVisual___bindgen_ty_5::frustum"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_5, frustum) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_6 {
    pub(crate) fog: [f32; 4usize],
    pub(crate) haze: [f32; 4usize],
    pub(crate) force: [f32; 4usize],
    pub(crate) inertia: [f32; 4usize],
    pub(crate) joint: [f32; 4usize],
    pub(crate) actuator: [f32; 4usize],
    pub(crate) actuatornegative: [f32; 4usize],
    pub(crate) actuatorpositive: [f32; 4usize],
    pub(crate) com: [f32; 4usize],
    pub(crate) camera: [f32; 4usize],
    pub(crate) light: [f32; 4usize],
    pub(crate) selectpoint: [f32; 4usize],
    pub(crate) connect: [f32; 4usize],
    pub(crate) contactpoint: [f32; 4usize],
    pub(crate) contactforce: [f32; 4usize],
    pub(crate) contactfriction: [f32; 4usize],
    pub(crate) contacttorque: [f32; 4usize],
    pub(crate) contactgap: [f32; 4usize],
    pub(crate) rangefinder: [f32; 4usize],
    pub(crate) constraint: [f32; 4usize],
    pub(crate) slidercrank: [f32; 4usize],
    pub(crate) crankbroken: [f32; 4usize],
    pub(crate) frustum: [f32; 4usize],
    pub(crate) bv: [f32; 4usize],
    pub(crate) bvactive: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual___bindgen_ty_6"]
        [::core::mem::size_of::<mjVisual___bindgen_ty_6>() - 400usize];
    ["Alignment of mjVisual___bindgen_ty_6"]
        [::core::mem::align_of::<mjVisual___bindgen_ty_6>() - 4usize];
    ["Offset of field: mjVisual___bindgen_ty_6::fog"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, fog) - 0usize];
    ["Offset of field: mjVisual___bindgen_ty_6::haze"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, haze) - 16usize];
    ["Offset of field: mjVisual___bindgen_ty_6::force"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, force) - 32usize];
    ["Offset of field: mjVisual___bindgen_ty_6::inertia"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, inertia) - 48usize];
    ["Offset of field: mjVisual___bindgen_ty_6::joint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, joint) - 64usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuator"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, actuator) - 80usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuatornegative"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, actuatornegative) - 96usize];
    ["Offset of field: mjVisual___bindgen_ty_6::actuatorpositive"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, actuatorpositive) - 112usize];
    ["Offset of field: mjVisual___bindgen_ty_6::com"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, com) - 128usize];
    ["Offset of field: mjVisual___bindgen_ty_6::camera"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, camera) - 144usize];
    ["Offset of field: mjVisual___bindgen_ty_6::light"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, light) - 160usize];
    ["Offset of field: mjVisual___bindgen_ty_6::selectpoint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, selectpoint) - 176usize];
    ["Offset of field: mjVisual___bindgen_ty_6::connect"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, connect) - 192usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactpoint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, contactpoint) - 208usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactforce"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, contactforce) - 224usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactfriction"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, contactfriction) - 240usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contacttorque"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, contacttorque) - 256usize];
    ["Offset of field: mjVisual___bindgen_ty_6::contactgap"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, contactgap) - 272usize];
    ["Offset of field: mjVisual___bindgen_ty_6::rangefinder"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, rangefinder) - 288usize];
    ["Offset of field: mjVisual___bindgen_ty_6::constraint"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, constraint) - 304usize];
    ["Offset of field: mjVisual___bindgen_ty_6::slidercrank"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, slidercrank) - 320usize];
    ["Offset of field: mjVisual___bindgen_ty_6::crankbroken"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, crankbroken) - 336usize];
    ["Offset of field: mjVisual___bindgen_ty_6::frustum"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, frustum) - 352usize];
    ["Offset of field: mjVisual___bindgen_ty_6::bv"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, bv) - 368usize];
    ["Offset of field: mjVisual___bindgen_ty_6::bvactive"]
        [::core::mem::offset_of!(mjVisual___bindgen_ty_6, bvactive) - 384usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjVisual"][::core::mem::size_of::<mjVisual>() - 628usize];
    ["Alignment of mjVisual"][::core::mem::align_of::<mjVisual>() - 4usize];
    ["Offset of field: mjVisual::global"][::core::mem::offset_of!(mjVisual, global) - 0usize];
    ["Offset of field: mjVisual::quality"][::core::mem::offset_of!(mjVisual, quality) - 48usize];
    ["Offset of field: mjVisual::headlight"]
        [::core::mem::offset_of!(mjVisual, headlight) - 68usize];
    ["Offset of field: mjVisual::map"][::core::mem::offset_of!(mjVisual, map) - 108usize];
    ["Offset of field: mjVisual::scale"][::core::mem::offset_of!(mjVisual, scale) - 160usize];
    ["Offset of field: mjVisual::rgba"][::core::mem::offset_of!(mjVisual, rgba) - 228usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjStatistic {
    pub(crate) meaninertia: mjtNum,
    pub(crate) meanmass: mjtNum,
    pub(crate) meansize: mjtNum,
    pub(crate) extent: mjtNum,
    pub(crate) center: [mjtNum; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjStatistic"][::core::mem::size_of::<mjStatistic>() - 56usize];
    ["Alignment of mjStatistic"][::core::mem::align_of::<mjStatistic>() - 8usize];
    ["Offset of field: mjStatistic::meaninertia"]
        [::core::mem::offset_of!(mjStatistic, meaninertia) - 0usize];
    ["Offset of field: mjStatistic::meanmass"]
        [::core::mem::offset_of!(mjStatistic, meanmass) - 8usize];
    ["Offset of field: mjStatistic::meansize"]
        [::core::mem::offset_of!(mjStatistic, meansize) - 16usize];
    ["Offset of field: mjStatistic::extent"]
        [::core::mem::offset_of!(mjStatistic, extent) - 24usize];
    ["Offset of field: mjStatistic::center"]
        [::core::mem::offset_of!(mjStatistic, center) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjModel {
    pub(crate) nq: ::core::ffi::c_int,
    pub(crate) nv: ::core::ffi::c_int,
    pub(crate) nu: ::core::ffi::c_int,
    pub(crate) na: ::core::ffi::c_int,
    pub(crate) nbody: ::core::ffi::c_int,
    pub(crate) nbvh: ::core::ffi::c_int,
    pub(crate) nbvhstatic: ::core::ffi::c_int,
    pub(crate) nbvhdynamic: ::core::ffi::c_int,
    pub(crate) njnt: ::core::ffi::c_int,
    pub(crate) ngeom: ::core::ffi::c_int,
    pub(crate) nsite: ::core::ffi::c_int,
    pub(crate) ncam: ::core::ffi::c_int,
    pub(crate) nlight: ::core::ffi::c_int,
    pub(crate) nflex: ::core::ffi::c_int,
    pub(crate) nflexnode: ::core::ffi::c_int,
    pub(crate) nflexvert: ::core::ffi::c_int,
    pub(crate) nflexedge: ::core::ffi::c_int,
    pub(crate) nflexelem: ::core::ffi::c_int,
    pub(crate) nflexelemdata: ::core::ffi::c_int,
    pub(crate) nflexelemedge: ::core::ffi::c_int,
    pub(crate) nflexshelldata: ::core::ffi::c_int,
    pub(crate) nflexevpair: ::core::ffi::c_int,
    pub(crate) nflextexcoord: ::core::ffi::c_int,
    pub(crate) nmesh: ::core::ffi::c_int,
    pub(crate) nmeshvert: ::core::ffi::c_int,
    pub(crate) nmeshnormal: ::core::ffi::c_int,
    pub(crate) nmeshtexcoord: ::core::ffi::c_int,
    pub(crate) nmeshface: ::core::ffi::c_int,
    pub(crate) nmeshgraph: ::core::ffi::c_int,
    pub(crate) nmeshpoly: ::core::ffi::c_int,
    pub(crate) nmeshpolyvert: ::core::ffi::c_int,
    pub(crate) nmeshpolymap: ::core::ffi::c_int,
    pub(crate) nskin: ::core::ffi::c_int,
    pub(crate) nskinvert: ::core::ffi::c_int,
    pub(crate) nskintexvert: ::core::ffi::c_int,
    pub(crate) nskinface: ::core::ffi::c_int,
    pub(crate) nskinbone: ::core::ffi::c_int,
    pub(crate) nskinbonevert: ::core::ffi::c_int,
    pub(crate) nhfield: ::core::ffi::c_int,
    pub(crate) nhfielddata: ::core::ffi::c_int,
    pub(crate) ntex: ::core::ffi::c_int,
    pub(crate) ntexdata: ::core::ffi::c_int,
    pub(crate) nmat: ::core::ffi::c_int,
    pub(crate) npair: ::core::ffi::c_int,
    pub(crate) nexclude: ::core::ffi::c_int,
    pub(crate) neq: ::core::ffi::c_int,
    pub(crate) ntendon: ::core::ffi::c_int,
    pub(crate) nwrap: ::core::ffi::c_int,
    pub(crate) nsensor: ::core::ffi::c_int,
    pub(crate) nnumeric: ::core::ffi::c_int,
    pub(crate) nnumericdata: ::core::ffi::c_int,
    pub(crate) ntext: ::core::ffi::c_int,
    pub(crate) ntextdata: ::core::ffi::c_int,
    pub(crate) ntuple: ::core::ffi::c_int,
    pub(crate) ntupledata: ::core::ffi::c_int,
    pub(crate) nkey: ::core::ffi::c_int,
    pub(crate) nmocap: ::core::ffi::c_int,
    pub(crate) nplugin: ::core::ffi::c_int,
    pub(crate) npluginattr: ::core::ffi::c_int,
    pub(crate) nuser_body: ::core::ffi::c_int,
    pub(crate) nuser_jnt: ::core::ffi::c_int,
    pub(crate) nuser_geom: ::core::ffi::c_int,
    pub(crate) nuser_site: ::core::ffi::c_int,
    pub(crate) nuser_cam: ::core::ffi::c_int,
    pub(crate) nuser_tendon: ::core::ffi::c_int,
    pub(crate) nuser_actuator: ::core::ffi::c_int,
    pub(crate) nuser_sensor: ::core::ffi::c_int,
    pub(crate) nnames: ::core::ffi::c_int,
    pub(crate) npaths: ::core::ffi::c_int,
    pub(crate) nnames_map: ::core::ffi::c_int,
    pub(crate) nM: ::core::ffi::c_int,
    pub(crate) nB: ::core::ffi::c_int,
    pub(crate) nC: ::core::ffi::c_int,
    pub(crate) nD: ::core::ffi::c_int,
    pub(crate) nJmom: ::core::ffi::c_int,
    pub(crate) ntree: ::core::ffi::c_int,
    pub(crate) ngravcomp: ::core::ffi::c_int,
    pub(crate) nemax: ::core::ffi::c_int,
    pub(crate) njmax: ::core::ffi::c_int,
    pub(crate) nconmax: ::core::ffi::c_int,
    pub(crate) nuserdata: ::core::ffi::c_int,
    pub(crate) nsensordata: ::core::ffi::c_int,
    pub(crate) npluginstate: ::core::ffi::c_int,
    pub(crate) narena: usize,
    pub(crate) nbuffer: usize,
    pub(crate) opt: mjOption,
    pub(crate) vis: mjVisual,
    pub(crate) stat: mjStatistic,
    pub(crate) buffer: *mut ::core::ffi::c_void,
    pub(crate) qpos0: *mut mjtNum,
    pub(crate) qpos_spring: *mut mjtNum,
    pub(crate) body_parentid: *mut ::core::ffi::c_int,
    pub(crate) body_rootid: *mut ::core::ffi::c_int,
    pub(crate) body_weldid: *mut ::core::ffi::c_int,
    pub(crate) body_mocapid: *mut ::core::ffi::c_int,
    pub(crate) body_jntnum: *mut ::core::ffi::c_int,
    pub(crate) body_jntadr: *mut ::core::ffi::c_int,
    pub(crate) body_dofnum: *mut ::core::ffi::c_int,
    pub(crate) body_dofadr: *mut ::core::ffi::c_int,
    pub(crate) body_treeid: *mut ::core::ffi::c_int,
    pub(crate) body_geomnum: *mut ::core::ffi::c_int,
    pub(crate) body_geomadr: *mut ::core::ffi::c_int,
    pub(crate) body_simple: *mut mjtByte,
    pub(crate) body_sameframe: *mut mjtByte,
    pub(crate) body_pos: *mut mjtNum,
    pub(crate) body_quat: *mut mjtNum,
    pub(crate) body_ipos: *mut mjtNum,
    pub(crate) body_iquat: *mut mjtNum,
    pub(crate) body_mass: *mut mjtNum,
    pub(crate) body_subtreemass: *mut mjtNum,
    pub(crate) body_inertia: *mut mjtNum,
    pub(crate) body_invweight0: *mut mjtNum,
    pub(crate) body_gravcomp: *mut mjtNum,
    pub(crate) body_margin: *mut mjtNum,
    pub(crate) body_user: *mut mjtNum,
    pub(crate) body_plugin: *mut ::core::ffi::c_int,
    pub(crate) body_contype: *mut ::core::ffi::c_int,
    pub(crate) body_conaffinity: *mut ::core::ffi::c_int,
    pub(crate) body_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) body_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) bvh_depth: *mut ::core::ffi::c_int,
    pub(crate) bvh_child: *mut ::core::ffi::c_int,
    pub(crate) bvh_nodeid: *mut ::core::ffi::c_int,
    pub(crate) bvh_aabb: *mut mjtNum,
    pub(crate) jnt_type: *mut ::core::ffi::c_int,
    pub(crate) jnt_qposadr: *mut ::core::ffi::c_int,
    pub(crate) jnt_dofadr: *mut ::core::ffi::c_int,
    pub(crate) jnt_bodyid: *mut ::core::ffi::c_int,
    pub(crate) jnt_group: *mut ::core::ffi::c_int,
    pub(crate) jnt_limited: *mut mjtByte,
    pub(crate) jnt_actfrclimited: *mut mjtByte,
    pub(crate) jnt_actgravcomp: *mut mjtByte,
    pub(crate) jnt_solref: *mut mjtNum,
    pub(crate) jnt_solimp: *mut mjtNum,
    pub(crate) jnt_pos: *mut mjtNum,
    pub(crate) jnt_axis: *mut mjtNum,
    pub(crate) jnt_stiffness: *mut mjtNum,
    pub(crate) jnt_range: *mut mjtNum,
    pub(crate) jnt_actfrcrange: *mut mjtNum,
    pub(crate) jnt_margin: *mut mjtNum,
    pub(crate) jnt_user: *mut mjtNum,
    pub(crate) dof_bodyid: *mut ::core::ffi::c_int,
    pub(crate) dof_jntid: *mut ::core::ffi::c_int,
    pub(crate) dof_parentid: *mut ::core::ffi::c_int,
    pub(crate) dof_treeid: *mut ::core::ffi::c_int,
    pub(crate) dof_Madr: *mut ::core::ffi::c_int,
    pub(crate) dof_simplenum: *mut ::core::ffi::c_int,
    pub(crate) dof_solref: *mut mjtNum,
    pub(crate) dof_solimp: *mut mjtNum,
    pub(crate) dof_frictionloss: *mut mjtNum,
    pub(crate) dof_armature: *mut mjtNum,
    pub(crate) dof_damping: *mut mjtNum,
    pub(crate) dof_invweight0: *mut mjtNum,
    pub(crate) dof_M0: *mut mjtNum,
    pub(crate) geom_type: *mut ::core::ffi::c_int,
    pub(crate) geom_contype: *mut ::core::ffi::c_int,
    pub(crate) geom_conaffinity: *mut ::core::ffi::c_int,
    pub(crate) geom_condim: *mut ::core::ffi::c_int,
    pub(crate) geom_bodyid: *mut ::core::ffi::c_int,
    pub(crate) geom_dataid: *mut ::core::ffi::c_int,
    pub(crate) geom_matid: *mut ::core::ffi::c_int,
    pub(crate) geom_group: *mut ::core::ffi::c_int,
    pub(crate) geom_priority: *mut ::core::ffi::c_int,
    pub(crate) geom_plugin: *mut ::core::ffi::c_int,
    pub(crate) geom_sameframe: *mut mjtByte,
    pub(crate) geom_solmix: *mut mjtNum,
    pub(crate) geom_solref: *mut mjtNum,
    pub(crate) geom_solimp: *mut mjtNum,
    pub(crate) geom_size: *mut mjtNum,
    pub(crate) geom_aabb: *mut mjtNum,
    pub(crate) geom_rbound: *mut mjtNum,
    pub(crate) geom_pos: *mut mjtNum,
    pub(crate) geom_quat: *mut mjtNum,
    pub(crate) geom_friction: *mut mjtNum,
    pub(crate) geom_margin: *mut mjtNum,
    pub(crate) geom_gap: *mut mjtNum,
    pub(crate) geom_fluid: *mut mjtNum,
    pub(crate) geom_user: *mut mjtNum,
    pub(crate) geom_rgba: *mut f32,
    pub(crate) site_type: *mut ::core::ffi::c_int,
    pub(crate) site_bodyid: *mut ::core::ffi::c_int,
    pub(crate) site_matid: *mut ::core::ffi::c_int,
    pub(crate) site_group: *mut ::core::ffi::c_int,
    pub(crate) site_sameframe: *mut mjtByte,
    pub(crate) site_size: *mut mjtNum,
    pub(crate) site_pos: *mut mjtNum,
    pub(crate) site_quat: *mut mjtNum,
    pub(crate) site_user: *mut mjtNum,
    pub(crate) site_rgba: *mut f32,
    pub(crate) cam_mode: *mut ::core::ffi::c_int,
    pub(crate) cam_bodyid: *mut ::core::ffi::c_int,
    pub(crate) cam_targetbodyid: *mut ::core::ffi::c_int,
    pub(crate) cam_pos: *mut mjtNum,
    pub(crate) cam_quat: *mut mjtNum,
    pub(crate) cam_poscom0: *mut mjtNum,
    pub(crate) cam_pos0: *mut mjtNum,
    pub(crate) cam_mat0: *mut mjtNum,
    pub(crate) cam_orthographic: *mut ::core::ffi::c_int,
    pub(crate) cam_fovy: *mut mjtNum,
    pub(crate) cam_ipd: *mut mjtNum,
    pub(crate) cam_resolution: *mut ::core::ffi::c_int,
    pub(crate) cam_sensorsize: *mut f32,
    pub(crate) cam_intrinsic: *mut f32,
    pub(crate) cam_user: *mut mjtNum,
    pub(crate) light_mode: *mut ::core::ffi::c_int,
    pub(crate) light_bodyid: *mut ::core::ffi::c_int,
    pub(crate) light_targetbodyid: *mut ::core::ffi::c_int,
    pub(crate) light_directional: *mut mjtByte,
    pub(crate) light_castshadow: *mut mjtByte,
    pub(crate) light_bulbradius: *mut f32,
    pub(crate) light_active: *mut mjtByte,
    pub(crate) light_pos: *mut mjtNum,
    pub(crate) light_dir: *mut mjtNum,
    pub(crate) light_poscom0: *mut mjtNum,
    pub(crate) light_pos0: *mut mjtNum,
    pub(crate) light_dir0: *mut mjtNum,
    pub(crate) light_attenuation: *mut f32,
    pub(crate) light_cutoff: *mut f32,
    pub(crate) light_exponent: *mut f32,
    pub(crate) light_ambient: *mut f32,
    pub(crate) light_diffuse: *mut f32,
    pub(crate) light_specular: *mut f32,
    pub(crate) flex_contype: *mut ::core::ffi::c_int,
    pub(crate) flex_conaffinity: *mut ::core::ffi::c_int,
    pub(crate) flex_condim: *mut ::core::ffi::c_int,
    pub(crate) flex_priority: *mut ::core::ffi::c_int,
    pub(crate) flex_solmix: *mut mjtNum,
    pub(crate) flex_solref: *mut mjtNum,
    pub(crate) flex_solimp: *mut mjtNum,
    pub(crate) flex_friction: *mut mjtNum,
    pub(crate) flex_margin: *mut mjtNum,
    pub(crate) flex_gap: *mut mjtNum,
    pub(crate) flex_internal: *mut mjtByte,
    pub(crate) flex_selfcollide: *mut ::core::ffi::c_int,
    pub(crate) flex_activelayers: *mut ::core::ffi::c_int,
    pub(crate) flex_dim: *mut ::core::ffi::c_int,
    pub(crate) flex_matid: *mut ::core::ffi::c_int,
    pub(crate) flex_group: *mut ::core::ffi::c_int,
    pub(crate) flex_interp: *mut ::core::ffi::c_int,
    pub(crate) flex_nodeadr: *mut ::core::ffi::c_int,
    pub(crate) flex_nodenum: *mut ::core::ffi::c_int,
    pub(crate) flex_vertadr: *mut ::core::ffi::c_int,
    pub(crate) flex_vertnum: *mut ::core::ffi::c_int,
    pub(crate) flex_edgeadr: *mut ::core::ffi::c_int,
    pub(crate) flex_edgenum: *mut ::core::ffi::c_int,
    pub(crate) flex_elemadr: *mut ::core::ffi::c_int,
    pub(crate) flex_elemnum: *mut ::core::ffi::c_int,
    pub(crate) flex_elemdataadr: *mut ::core::ffi::c_int,
    pub(crate) flex_elemedgeadr: *mut ::core::ffi::c_int,
    pub(crate) flex_shellnum: *mut ::core::ffi::c_int,
    pub(crate) flex_shelldataadr: *mut ::core::ffi::c_int,
    pub(crate) flex_evpairadr: *mut ::core::ffi::c_int,
    pub(crate) flex_evpairnum: *mut ::core::ffi::c_int,
    pub(crate) flex_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) flex_nodebodyid: *mut ::core::ffi::c_int,
    pub(crate) flex_vertbodyid: *mut ::core::ffi::c_int,
    pub(crate) flex_edge: *mut ::core::ffi::c_int,
    pub(crate) flex_elem: *mut ::core::ffi::c_int,
    pub(crate) flex_elemtexcoord: *mut ::core::ffi::c_int,
    pub(crate) flex_elemedge: *mut ::core::ffi::c_int,
    pub(crate) flex_elemlayer: *mut ::core::ffi::c_int,
    pub(crate) flex_shell: *mut ::core::ffi::c_int,
    pub(crate) flex_evpair: *mut ::core::ffi::c_int,
    pub(crate) flex_vert: *mut mjtNum,
    pub(crate) flex_vert0: *mut mjtNum,
    pub(crate) flex_node: *mut mjtNum,
    pub(crate) flex_node0: *mut mjtNum,
    pub(crate) flexedge_length0: *mut mjtNum,
    pub(crate) flexedge_invweight0: *mut mjtNum,
    pub(crate) flex_radius: *mut mjtNum,
    pub(crate) flex_stiffness: *mut mjtNum,
    pub(crate) flex_damping: *mut mjtNum,
    pub(crate) flex_edgestiffness: *mut mjtNum,
    pub(crate) flex_edgedamping: *mut mjtNum,
    pub(crate) flex_edgeequality: *mut mjtByte,
    pub(crate) flex_rigid: *mut mjtByte,
    pub(crate) flexedge_rigid: *mut mjtByte,
    pub(crate) flex_centered: *mut mjtByte,
    pub(crate) flex_flatskin: *mut mjtByte,
    pub(crate) flex_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) flex_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) flex_rgba: *mut f32,
    pub(crate) flex_texcoord: *mut f32,
    pub(crate) mesh_vertadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_vertnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_faceadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_facenum: *mut ::core::ffi::c_int,
    pub(crate) mesh_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_normaladr: *mut ::core::ffi::c_int,
    pub(crate) mesh_normalnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_texcoordnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_graphadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_vert: *mut f32,
    pub(crate) mesh_normal: *mut f32,
    pub(crate) mesh_texcoord: *mut f32,
    pub(crate) mesh_face: *mut ::core::ffi::c_int,
    pub(crate) mesh_facenormal: *mut ::core::ffi::c_int,
    pub(crate) mesh_facetexcoord: *mut ::core::ffi::c_int,
    pub(crate) mesh_graph: *mut ::core::ffi::c_int,
    pub(crate) mesh_scale: *mut mjtNum,
    pub(crate) mesh_pos: *mut mjtNum,
    pub(crate) mesh_quat: *mut mjtNum,
    pub(crate) mesh_pathadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_polynum: *mut ::core::ffi::c_int,
    pub(crate) mesh_polyadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_polynormal: *mut mjtNum,
    pub(crate) mesh_polyvertadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_polyvertnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_polyvert: *mut ::core::ffi::c_int,
    pub(crate) mesh_polymapadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_polymapnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_polymap: *mut ::core::ffi::c_int,
    pub(crate) skin_matid: *mut ::core::ffi::c_int,
    pub(crate) skin_group: *mut ::core::ffi::c_int,
    pub(crate) skin_rgba: *mut f32,
    pub(crate) skin_inflate: *mut f32,
    pub(crate) skin_vertadr: *mut ::core::ffi::c_int,
    pub(crate) skin_vertnum: *mut ::core::ffi::c_int,
    pub(crate) skin_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) skin_faceadr: *mut ::core::ffi::c_int,
    pub(crate) skin_facenum: *mut ::core::ffi::c_int,
    pub(crate) skin_boneadr: *mut ::core::ffi::c_int,
    pub(crate) skin_bonenum: *mut ::core::ffi::c_int,
    pub(crate) skin_vert: *mut f32,
    pub(crate) skin_texcoord: *mut f32,
    pub(crate) skin_face: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertadr: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertnum: *mut ::core::ffi::c_int,
    pub(crate) skin_bonebindpos: *mut f32,
    pub(crate) skin_bonebindquat: *mut f32,
    pub(crate) skin_bonebodyid: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertid: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertweight: *mut f32,
    pub(crate) skin_pathadr: *mut ::core::ffi::c_int,
    pub(crate) hfield_size: *mut mjtNum,
    pub(crate) hfield_nrow: *mut ::core::ffi::c_int,
    pub(crate) hfield_ncol: *mut ::core::ffi::c_int,
    pub(crate) hfield_adr: *mut ::core::ffi::c_int,
    pub(crate) hfield_data: *mut f32,
    pub(crate) hfield_pathadr: *mut ::core::ffi::c_int,
    pub(crate) tex_type: *mut ::core::ffi::c_int,
    pub(crate) tex_height: *mut ::core::ffi::c_int,
    pub(crate) tex_width: *mut ::core::ffi::c_int,
    pub(crate) tex_nchannel: *mut ::core::ffi::c_int,
    pub(crate) tex_adr: *mut ::core::ffi::c_int,
    pub(crate) tex_data: *mut mjtByte,
    pub(crate) tex_pathadr: *mut ::core::ffi::c_int,
    pub(crate) mat_texid: *mut ::core::ffi::c_int,
    pub(crate) mat_texuniform: *mut mjtByte,
    pub(crate) mat_texrepeat: *mut f32,
    pub(crate) mat_emission: *mut f32,
    pub(crate) mat_specular: *mut f32,
    pub(crate) mat_shininess: *mut f32,
    pub(crate) mat_reflectance: *mut f32,
    pub(crate) mat_metallic: *mut f32,
    pub(crate) mat_roughness: *mut f32,
    pub(crate) mat_rgba: *mut f32,
    pub(crate) pair_dim: *mut ::core::ffi::c_int,
    pub(crate) pair_geom1: *mut ::core::ffi::c_int,
    pub(crate) pair_geom2: *mut ::core::ffi::c_int,
    pub(crate) pair_signature: *mut ::core::ffi::c_int,
    pub(crate) pair_solref: *mut mjtNum,
    pub(crate) pair_solreffriction: *mut mjtNum,
    pub(crate) pair_solimp: *mut mjtNum,
    pub(crate) pair_margin: *mut mjtNum,
    pub(crate) pair_gap: *mut mjtNum,
    pub(crate) pair_friction: *mut mjtNum,
    pub(crate) exclude_signature: *mut ::core::ffi::c_int,
    pub(crate) eq_type: *mut ::core::ffi::c_int,
    pub(crate) eq_obj1id: *mut ::core::ffi::c_int,
    pub(crate) eq_obj2id: *mut ::core::ffi::c_int,
    pub(crate) eq_objtype: *mut ::core::ffi::c_int,
    pub(crate) eq_active0: *mut mjtByte,
    pub(crate) eq_solref: *mut mjtNum,
    pub(crate) eq_solimp: *mut mjtNum,
    pub(crate) eq_data: *mut mjtNum,
    pub(crate) tendon_adr: *mut ::core::ffi::c_int,
    pub(crate) tendon_num: *mut ::core::ffi::c_int,
    pub(crate) tendon_matid: *mut ::core::ffi::c_int,
    pub(crate) tendon_group: *mut ::core::ffi::c_int,
    pub(crate) tendon_limited: *mut mjtByte,
    pub(crate) tendon_actfrclimited: *mut mjtByte,
    pub(crate) tendon_width: *mut mjtNum,
    pub(crate) tendon_solref_lim: *mut mjtNum,
    pub(crate) tendon_solimp_lim: *mut mjtNum,
    pub(crate) tendon_solref_fri: *mut mjtNum,
    pub(crate) tendon_solimp_fri: *mut mjtNum,
    pub(crate) tendon_range: *mut mjtNum,
    pub(crate) tendon_actfrcrange: *mut mjtNum,
    pub(crate) tendon_margin: *mut mjtNum,
    pub(crate) tendon_stiffness: *mut mjtNum,
    pub(crate) tendon_damping: *mut mjtNum,
    pub(crate) tendon_armature: *mut mjtNum,
    pub(crate) tendon_frictionloss: *mut mjtNum,
    pub(crate) tendon_lengthspring: *mut mjtNum,
    pub(crate) tendon_length0: *mut mjtNum,
    pub(crate) tendon_invweight0: *mut mjtNum,
    pub(crate) tendon_user: *mut mjtNum,
    pub(crate) tendon_rgba: *mut f32,
    pub(crate) wrap_type: *mut ::core::ffi::c_int,
    pub(crate) wrap_objid: *mut ::core::ffi::c_int,
    pub(crate) wrap_prm: *mut mjtNum,
    pub(crate) actuator_trntype: *mut ::core::ffi::c_int,
    pub(crate) actuator_dyntype: *mut ::core::ffi::c_int,
    pub(crate) actuator_gaintype: *mut ::core::ffi::c_int,
    pub(crate) actuator_biastype: *mut ::core::ffi::c_int,
    pub(crate) actuator_trnid: *mut ::core::ffi::c_int,
    pub(crate) actuator_actadr: *mut ::core::ffi::c_int,
    pub(crate) actuator_actnum: *mut ::core::ffi::c_int,
    pub(crate) actuator_group: *mut ::core::ffi::c_int,
    pub(crate) actuator_ctrllimited: *mut mjtByte,
    pub(crate) actuator_forcelimited: *mut mjtByte,
    pub(crate) actuator_actlimited: *mut mjtByte,
    pub(crate) actuator_dynprm: *mut mjtNum,
    pub(crate) actuator_gainprm: *mut mjtNum,
    pub(crate) actuator_biasprm: *mut mjtNum,
    pub(crate) actuator_actearly: *mut mjtByte,
    pub(crate) actuator_ctrlrange: *mut mjtNum,
    pub(crate) actuator_forcerange: *mut mjtNum,
    pub(crate) actuator_actrange: *mut mjtNum,
    pub(crate) actuator_gear: *mut mjtNum,
    pub(crate) actuator_cranklength: *mut mjtNum,
    pub(crate) actuator_acc0: *mut mjtNum,
    pub(crate) actuator_length0: *mut mjtNum,
    pub(crate) actuator_lengthrange: *mut mjtNum,
    pub(crate) actuator_user: *mut mjtNum,
    pub(crate) actuator_plugin: *mut ::core::ffi::c_int,
    pub(crate) sensor_type: *mut ::core::ffi::c_int,
    pub(crate) sensor_datatype: *mut ::core::ffi::c_int,
    pub(crate) sensor_needstage: *mut ::core::ffi::c_int,
    pub(crate) sensor_objtype: *mut ::core::ffi::c_int,
    pub(crate) sensor_objid: *mut ::core::ffi::c_int,
    pub(crate) sensor_reftype: *mut ::core::ffi::c_int,
    pub(crate) sensor_refid: *mut ::core::ffi::c_int,
    pub(crate) sensor_dim: *mut ::core::ffi::c_int,
    pub(crate) sensor_adr: *mut ::core::ffi::c_int,
    pub(crate) sensor_cutoff: *mut mjtNum,
    pub(crate) sensor_noise: *mut mjtNum,
    pub(crate) sensor_user: *mut mjtNum,
    pub(crate) sensor_plugin: *mut ::core::ffi::c_int,
    pub(crate) plugin: *mut ::core::ffi::c_int,
    pub(crate) plugin_stateadr: *mut ::core::ffi::c_int,
    pub(crate) plugin_statenum: *mut ::core::ffi::c_int,
    pub(crate) plugin_attr: *mut ::core::ffi::c_char,
    pub(crate) plugin_attradr: *mut ::core::ffi::c_int,
    pub(crate) numeric_adr: *mut ::core::ffi::c_int,
    pub(crate) numeric_size: *mut ::core::ffi::c_int,
    pub(crate) numeric_data: *mut mjtNum,
    pub(crate) text_adr: *mut ::core::ffi::c_int,
    pub(crate) text_size: *mut ::core::ffi::c_int,
    pub(crate) text_data: *mut ::core::ffi::c_char,
    pub(crate) tuple_adr: *mut ::core::ffi::c_int,
    pub(crate) tuple_size: *mut ::core::ffi::c_int,
    pub(crate) tuple_objtype: *mut ::core::ffi::c_int,
    pub(crate) tuple_objid: *mut ::core::ffi::c_int,
    pub(crate) tuple_objprm: *mut mjtNum,
    pub(crate) key_time: *mut mjtNum,
    pub(crate) key_qpos: *mut mjtNum,
    pub(crate) key_qvel: *mut mjtNum,
    pub(crate) key_act: *mut mjtNum,
    pub(crate) key_mpos: *mut mjtNum,
    pub(crate) key_mquat: *mut mjtNum,
    pub(crate) key_ctrl: *mut mjtNum,
    pub(crate) name_bodyadr: *mut ::core::ffi::c_int,
    pub(crate) name_jntadr: *mut ::core::ffi::c_int,
    pub(crate) name_geomadr: *mut ::core::ffi::c_int,
    pub(crate) name_siteadr: *mut ::core::ffi::c_int,
    pub(crate) name_camadr: *mut ::core::ffi::c_int,
    pub(crate) name_lightadr: *mut ::core::ffi::c_int,
    pub(crate) name_flexadr: *mut ::core::ffi::c_int,
    pub(crate) name_meshadr: *mut ::core::ffi::c_int,
    pub(crate) name_skinadr: *mut ::core::ffi::c_int,
    pub(crate) name_hfieldadr: *mut ::core::ffi::c_int,
    pub(crate) name_texadr: *mut ::core::ffi::c_int,
    pub(crate) name_matadr: *mut ::core::ffi::c_int,
    pub(crate) name_pairadr: *mut ::core::ffi::c_int,
    pub(crate) name_excludeadr: *mut ::core::ffi::c_int,
    pub(crate) name_eqadr: *mut ::core::ffi::c_int,
    pub(crate) name_tendonadr: *mut ::core::ffi::c_int,
    pub(crate) name_actuatoradr: *mut ::core::ffi::c_int,
    pub(crate) name_sensoradr: *mut ::core::ffi::c_int,
    pub(crate) name_numericadr: *mut ::core::ffi::c_int,
    pub(crate) name_textadr: *mut ::core::ffi::c_int,
    pub(crate) name_tupleadr: *mut ::core::ffi::c_int,
    pub(crate) name_keyadr: *mut ::core::ffi::c_int,
    pub(crate) name_pluginadr: *mut ::core::ffi::c_int,
    pub(crate) names: *mut ::core::ffi::c_char,
    pub(crate) names_map: *mut ::core::ffi::c_int,
    pub(crate) paths: *mut ::core::ffi::c_char,
    pub(crate) signature: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjModel"][::core::mem::size_of::<mjModel>() - 4576usize];
    ["Alignment of mjModel"][::core::mem::align_of::<mjModel>() - 8usize];
    ["Offset of field: mjModel::nq"][::core::mem::offset_of!(mjModel, nq) - 0usize];
    ["Offset of field: mjModel::nv"][::core::mem::offset_of!(mjModel, nv) - 4usize];
    ["Offset of field: mjModel::nu"][::core::mem::offset_of!(mjModel, nu) - 8usize];
    ["Offset of field: mjModel::na"][::core::mem::offset_of!(mjModel, na) - 12usize];
    ["Offset of field: mjModel::nbody"][::core::mem::offset_of!(mjModel, nbody) - 16usize];
    ["Offset of field: mjModel::nbvh"][::core::mem::offset_of!(mjModel, nbvh) - 20usize];
    ["Offset of field: mjModel::nbvhstatic"]
        [::core::mem::offset_of!(mjModel, nbvhstatic) - 24usize];
    ["Offset of field: mjModel::nbvhdynamic"]
        [::core::mem::offset_of!(mjModel, nbvhdynamic) - 28usize];
    ["Offset of field: mjModel::njnt"][::core::mem::offset_of!(mjModel, njnt) - 32usize];
    ["Offset of field: mjModel::ngeom"][::core::mem::offset_of!(mjModel, ngeom) - 36usize];
    ["Offset of field: mjModel::nsite"][::core::mem::offset_of!(mjModel, nsite) - 40usize];
    ["Offset of field: mjModel::ncam"][::core::mem::offset_of!(mjModel, ncam) - 44usize];
    ["Offset of field: mjModel::nlight"][::core::mem::offset_of!(mjModel, nlight) - 48usize];
    ["Offset of field: mjModel::nflex"][::core::mem::offset_of!(mjModel, nflex) - 52usize];
    ["Offset of field: mjModel::nflexnode"][::core::mem::offset_of!(mjModel, nflexnode) - 56usize];
    ["Offset of field: mjModel::nflexvert"][::core::mem::offset_of!(mjModel, nflexvert) - 60usize];
    ["Offset of field: mjModel::nflexedge"][::core::mem::offset_of!(mjModel, nflexedge) - 64usize];
    ["Offset of field: mjModel::nflexelem"][::core::mem::offset_of!(mjModel, nflexelem) - 68usize];
    ["Offset of field: mjModel::nflexelemdata"]
        [::core::mem::offset_of!(mjModel, nflexelemdata) - 72usize];
    ["Offset of field: mjModel::nflexelemedge"]
        [::core::mem::offset_of!(mjModel, nflexelemedge) - 76usize];
    ["Offset of field: mjModel::nflexshelldata"]
        [::core::mem::offset_of!(mjModel, nflexshelldata) - 80usize];
    ["Offset of field: mjModel::nflexevpair"]
        [::core::mem::offset_of!(mjModel, nflexevpair) - 84usize];
    ["Offset of field: mjModel::nflextexcoord"]
        [::core::mem::offset_of!(mjModel, nflextexcoord) - 88usize];
    ["Offset of field: mjModel::nmesh"][::core::mem::offset_of!(mjModel, nmesh) - 92usize];
    ["Offset of field: mjModel::nmeshvert"][::core::mem::offset_of!(mjModel, nmeshvert) - 96usize];
    ["Offset of field: mjModel::nmeshnormal"]
        [::core::mem::offset_of!(mjModel, nmeshnormal) - 100usize];
    ["Offset of field: mjModel::nmeshtexcoord"]
        [::core::mem::offset_of!(mjModel, nmeshtexcoord) - 104usize];
    ["Offset of field: mjModel::nmeshface"][::core::mem::offset_of!(mjModel, nmeshface) - 108usize];
    ["Offset of field: mjModel::nmeshgraph"]
        [::core::mem::offset_of!(mjModel, nmeshgraph) - 112usize];
    ["Offset of field: mjModel::nmeshpoly"][::core::mem::offset_of!(mjModel, nmeshpoly) - 116usize];
    ["Offset of field: mjModel::nmeshpolyvert"]
        [::core::mem::offset_of!(mjModel, nmeshpolyvert) - 120usize];
    ["Offset of field: mjModel::nmeshpolymap"]
        [::core::mem::offset_of!(mjModel, nmeshpolymap) - 124usize];
    ["Offset of field: mjModel::nskin"][::core::mem::offset_of!(mjModel, nskin) - 128usize];
    ["Offset of field: mjModel::nskinvert"][::core::mem::offset_of!(mjModel, nskinvert) - 132usize];
    ["Offset of field: mjModel::nskintexvert"]
        [::core::mem::offset_of!(mjModel, nskintexvert) - 136usize];
    ["Offset of field: mjModel::nskinface"][::core::mem::offset_of!(mjModel, nskinface) - 140usize];
    ["Offset of field: mjModel::nskinbone"][::core::mem::offset_of!(mjModel, nskinbone) - 144usize];
    ["Offset of field: mjModel::nskinbonevert"]
        [::core::mem::offset_of!(mjModel, nskinbonevert) - 148usize];
    ["Offset of field: mjModel::nhfield"][::core::mem::offset_of!(mjModel, nhfield) - 152usize];
    ["Offset of field: mjModel::nhfielddata"]
        [::core::mem::offset_of!(mjModel, nhfielddata) - 156usize];
    ["Offset of field: mjModel::ntex"][::core::mem::offset_of!(mjModel, ntex) - 160usize];
    ["Offset of field: mjModel::ntexdata"][::core::mem::offset_of!(mjModel, ntexdata) - 164usize];
    ["Offset of field: mjModel::nmat"][::core::mem::offset_of!(mjModel, nmat) - 168usize];
    ["Offset of field: mjModel::npair"][::core::mem::offset_of!(mjModel, npair) - 172usize];
    ["Offset of field: mjModel::nexclude"][::core::mem::offset_of!(mjModel, nexclude) - 176usize];
    ["Offset of field: mjModel::neq"][::core::mem::offset_of!(mjModel, neq) - 180usize];
    ["Offset of field: mjModel::ntendon"][::core::mem::offset_of!(mjModel, ntendon) - 184usize];
    ["Offset of field: mjModel::nwrap"][::core::mem::offset_of!(mjModel, nwrap) - 188usize];
    ["Offset of field: mjModel::nsensor"][::core::mem::offset_of!(mjModel, nsensor) - 192usize];
    ["Offset of field: mjModel::nnumeric"][::core::mem::offset_of!(mjModel, nnumeric) - 196usize];
    ["Offset of field: mjModel::nnumericdata"]
        [::core::mem::offset_of!(mjModel, nnumericdata) - 200usize];
    ["Offset of field: mjModel::ntext"][::core::mem::offset_of!(mjModel, ntext) - 204usize];
    ["Offset of field: mjModel::ntextdata"][::core::mem::offset_of!(mjModel, ntextdata) - 208usize];
    ["Offset of field: mjModel::ntuple"][::core::mem::offset_of!(mjModel, ntuple) - 212usize];
    ["Offset of field: mjModel::ntupledata"]
        [::core::mem::offset_of!(mjModel, ntupledata) - 216usize];
    ["Offset of field: mjModel::nkey"][::core::mem::offset_of!(mjModel, nkey) - 220usize];
    ["Offset of field: mjModel::nmocap"][::core::mem::offset_of!(mjModel, nmocap) - 224usize];
    ["Offset of field: mjModel::nplugin"][::core::mem::offset_of!(mjModel, nplugin) - 228usize];
    ["Offset of field: mjModel::npluginattr"]
        [::core::mem::offset_of!(mjModel, npluginattr) - 232usize];
    ["Offset of field: mjModel::nuser_body"]
        [::core::mem::offset_of!(mjModel, nuser_body) - 236usize];
    ["Offset of field: mjModel::nuser_jnt"][::core::mem::offset_of!(mjModel, nuser_jnt) - 240usize];
    ["Offset of field: mjModel::nuser_geom"]
        [::core::mem::offset_of!(mjModel, nuser_geom) - 244usize];
    ["Offset of field: mjModel::nuser_site"]
        [::core::mem::offset_of!(mjModel, nuser_site) - 248usize];
    ["Offset of field: mjModel::nuser_cam"][::core::mem::offset_of!(mjModel, nuser_cam) - 252usize];
    ["Offset of field: mjModel::nuser_tendon"]
        [::core::mem::offset_of!(mjModel, nuser_tendon) - 256usize];
    ["Offset of field: mjModel::nuser_actuator"]
        [::core::mem::offset_of!(mjModel, nuser_actuator) - 260usize];
    ["Offset of field: mjModel::nuser_sensor"]
        [::core::mem::offset_of!(mjModel, nuser_sensor) - 264usize];
    ["Offset of field: mjModel::nnames"][::core::mem::offset_of!(mjModel, nnames) - 268usize];
    ["Offset of field: mjModel::npaths"][::core::mem::offset_of!(mjModel, npaths) - 272usize];
    ["Offset of field: mjModel::nnames_map"]
        [::core::mem::offset_of!(mjModel, nnames_map) - 276usize];
    ["Offset of field: mjModel::nM"][::core::mem::offset_of!(mjModel, nM) - 280usize];
    ["Offset of field: mjModel::nB"][::core::mem::offset_of!(mjModel, nB) - 284usize];
    ["Offset of field: mjModel::nC"][::core::mem::offset_of!(mjModel, nC) - 288usize];
    ["Offset of field: mjModel::nD"][::core::mem::offset_of!(mjModel, nD) - 292usize];
    ["Offset of field: mjModel::nJmom"][::core::mem::offset_of!(mjModel, nJmom) - 296usize];
    ["Offset of field: mjModel::ntree"][::core::mem::offset_of!(mjModel, ntree) - 300usize];
    ["Offset of field: mjModel::ngravcomp"][::core::mem::offset_of!(mjModel, ngravcomp) - 304usize];
    ["Offset of field: mjModel::nemax"][::core::mem::offset_of!(mjModel, nemax) - 308usize];
    ["Offset of field: mjModel::njmax"][::core::mem::offset_of!(mjModel, njmax) - 312usize];
    ["Offset of field: mjModel::nconmax"][::core::mem::offset_of!(mjModel, nconmax) - 316usize];
    ["Offset of field: mjModel::nuserdata"][::core::mem::offset_of!(mjModel, nuserdata) - 320usize];
    ["Offset of field: mjModel::nsensordata"]
        [::core::mem::offset_of!(mjModel, nsensordata) - 324usize];
    ["Offset of field: mjModel::npluginstate"]
        [::core::mem::offset_of!(mjModel, npluginstate) - 328usize];
    ["Offset of field: mjModel::narena"][::core::mem::offset_of!(mjModel, narena) - 336usize];
    ["Offset of field: mjModel::nbuffer"][::core::mem::offset_of!(mjModel, nbuffer) - 344usize];
    ["Offset of field: mjModel::opt"][::core::mem::offset_of!(mjModel, opt) - 352usize];
    ["Offset of field: mjModel::vis"][::core::mem::offset_of!(mjModel, vis) - 656usize];
    ["Offset of field: mjModel::stat"][::core::mem::offset_of!(mjModel, stat) - 1288usize];
    ["Offset of field: mjModel::buffer"][::core::mem::offset_of!(mjModel, buffer) - 1344usize];
    ["Offset of field: mjModel::qpos0"][::core::mem::offset_of!(mjModel, qpos0) - 1352usize];
    ["Offset of field: mjModel::qpos_spring"]
        [::core::mem::offset_of!(mjModel, qpos_spring) - 1360usize];
    ["Offset of field: mjModel::body_parentid"]
        [::core::mem::offset_of!(mjModel, body_parentid) - 1368usize];
    ["Offset of field: mjModel::body_rootid"]
        [::core::mem::offset_of!(mjModel, body_rootid) - 1376usize];
    ["Offset of field: mjModel::body_weldid"]
        [::core::mem::offset_of!(mjModel, body_weldid) - 1384usize];
    ["Offset of field: mjModel::body_mocapid"]
        [::core::mem::offset_of!(mjModel, body_mocapid) - 1392usize];
    ["Offset of field: mjModel::body_jntnum"]
        [::core::mem::offset_of!(mjModel, body_jntnum) - 1400usize];
    ["Offset of field: mjModel::body_jntadr"]
        [::core::mem::offset_of!(mjModel, body_jntadr) - 1408usize];
    ["Offset of field: mjModel::body_dofnum"]
        [::core::mem::offset_of!(mjModel, body_dofnum) - 1416usize];
    ["Offset of field: mjModel::body_dofadr"]
        [::core::mem::offset_of!(mjModel, body_dofadr) - 1424usize];
    ["Offset of field: mjModel::body_treeid"]
        [::core::mem::offset_of!(mjModel, body_treeid) - 1432usize];
    ["Offset of field: mjModel::body_geomnum"]
        [::core::mem::offset_of!(mjModel, body_geomnum) - 1440usize];
    ["Offset of field: mjModel::body_geomadr"]
        [::core::mem::offset_of!(mjModel, body_geomadr) - 1448usize];
    ["Offset of field: mjModel::body_simple"]
        [::core::mem::offset_of!(mjModel, body_simple) - 1456usize];
    ["Offset of field: mjModel::body_sameframe"]
        [::core::mem::offset_of!(mjModel, body_sameframe) - 1464usize];
    ["Offset of field: mjModel::body_pos"][::core::mem::offset_of!(mjModel, body_pos) - 1472usize];
    ["Offset of field: mjModel::body_quat"]
        [::core::mem::offset_of!(mjModel, body_quat) - 1480usize];
    ["Offset of field: mjModel::body_ipos"]
        [::core::mem::offset_of!(mjModel, body_ipos) - 1488usize];
    ["Offset of field: mjModel::body_iquat"]
        [::core::mem::offset_of!(mjModel, body_iquat) - 1496usize];
    ["Offset of field: mjModel::body_mass"]
        [::core::mem::offset_of!(mjModel, body_mass) - 1504usize];
    ["Offset of field: mjModel::body_subtreemass"]
        [::core::mem::offset_of!(mjModel, body_subtreemass) - 1512usize];
    ["Offset of field: mjModel::body_inertia"]
        [::core::mem::offset_of!(mjModel, body_inertia) - 1520usize];
    ["Offset of field: mjModel::body_invweight0"]
        [::core::mem::offset_of!(mjModel, body_invweight0) - 1528usize];
    ["Offset of field: mjModel::body_gravcomp"]
        [::core::mem::offset_of!(mjModel, body_gravcomp) - 1536usize];
    ["Offset of field: mjModel::body_margin"]
        [::core::mem::offset_of!(mjModel, body_margin) - 1544usize];
    ["Offset of field: mjModel::body_user"]
        [::core::mem::offset_of!(mjModel, body_user) - 1552usize];
    ["Offset of field: mjModel::body_plugin"]
        [::core::mem::offset_of!(mjModel, body_plugin) - 1560usize];
    ["Offset of field: mjModel::body_contype"]
        [::core::mem::offset_of!(mjModel, body_contype) - 1568usize];
    ["Offset of field: mjModel::body_conaffinity"]
        [::core::mem::offset_of!(mjModel, body_conaffinity) - 1576usize];
    ["Offset of field: mjModel::body_bvhadr"]
        [::core::mem::offset_of!(mjModel, body_bvhadr) - 1584usize];
    ["Offset of field: mjModel::body_bvhnum"]
        [::core::mem::offset_of!(mjModel, body_bvhnum) - 1592usize];
    ["Offset of field: mjModel::bvh_depth"]
        [::core::mem::offset_of!(mjModel, bvh_depth) - 1600usize];
    ["Offset of field: mjModel::bvh_child"]
        [::core::mem::offset_of!(mjModel, bvh_child) - 1608usize];
    ["Offset of field: mjModel::bvh_nodeid"]
        [::core::mem::offset_of!(mjModel, bvh_nodeid) - 1616usize];
    ["Offset of field: mjModel::bvh_aabb"][::core::mem::offset_of!(mjModel, bvh_aabb) - 1624usize];
    ["Offset of field: mjModel::jnt_type"][::core::mem::offset_of!(mjModel, jnt_type) - 1632usize];
    ["Offset of field: mjModel::jnt_qposadr"]
        [::core::mem::offset_of!(mjModel, jnt_qposadr) - 1640usize];
    ["Offset of field: mjModel::jnt_dofadr"]
        [::core::mem::offset_of!(mjModel, jnt_dofadr) - 1648usize];
    ["Offset of field: mjModel::jnt_bodyid"]
        [::core::mem::offset_of!(mjModel, jnt_bodyid) - 1656usize];
    ["Offset of field: mjModel::jnt_group"]
        [::core::mem::offset_of!(mjModel, jnt_group) - 1664usize];
    ["Offset of field: mjModel::jnt_limited"]
        [::core::mem::offset_of!(mjModel, jnt_limited) - 1672usize];
    ["Offset of field: mjModel::jnt_actfrclimited"]
        [::core::mem::offset_of!(mjModel, jnt_actfrclimited) - 1680usize];
    ["Offset of field: mjModel::jnt_actgravcomp"]
        [::core::mem::offset_of!(mjModel, jnt_actgravcomp) - 1688usize];
    ["Offset of field: mjModel::jnt_solref"]
        [::core::mem::offset_of!(mjModel, jnt_solref) - 1696usize];
    ["Offset of field: mjModel::jnt_solimp"]
        [::core::mem::offset_of!(mjModel, jnt_solimp) - 1704usize];
    ["Offset of field: mjModel::jnt_pos"][::core::mem::offset_of!(mjModel, jnt_pos) - 1712usize];
    ["Offset of field: mjModel::jnt_axis"][::core::mem::offset_of!(mjModel, jnt_axis) - 1720usize];
    ["Offset of field: mjModel::jnt_stiffness"]
        [::core::mem::offset_of!(mjModel, jnt_stiffness) - 1728usize];
    ["Offset of field: mjModel::jnt_range"]
        [::core::mem::offset_of!(mjModel, jnt_range) - 1736usize];
    ["Offset of field: mjModel::jnt_actfrcrange"]
        [::core::mem::offset_of!(mjModel, jnt_actfrcrange) - 1744usize];
    ["Offset of field: mjModel::jnt_margin"]
        [::core::mem::offset_of!(mjModel, jnt_margin) - 1752usize];
    ["Offset of field: mjModel::jnt_user"][::core::mem::offset_of!(mjModel, jnt_user) - 1760usize];
    ["Offset of field: mjModel::dof_bodyid"]
        [::core::mem::offset_of!(mjModel, dof_bodyid) - 1768usize];
    ["Offset of field: mjModel::dof_jntid"]
        [::core::mem::offset_of!(mjModel, dof_jntid) - 1776usize];
    ["Offset of field: mjModel::dof_parentid"]
        [::core::mem::offset_of!(mjModel, dof_parentid) - 1784usize];
    ["Offset of field: mjModel::dof_treeid"]
        [::core::mem::offset_of!(mjModel, dof_treeid) - 1792usize];
    ["Offset of field: mjModel::dof_Madr"][::core::mem::offset_of!(mjModel, dof_Madr) - 1800usize];
    ["Offset of field: mjModel::dof_simplenum"]
        [::core::mem::offset_of!(mjModel, dof_simplenum) - 1808usize];
    ["Offset of field: mjModel::dof_solref"]
        [::core::mem::offset_of!(mjModel, dof_solref) - 1816usize];
    ["Offset of field: mjModel::dof_solimp"]
        [::core::mem::offset_of!(mjModel, dof_solimp) - 1824usize];
    ["Offset of field: mjModel::dof_frictionloss"]
        [::core::mem::offset_of!(mjModel, dof_frictionloss) - 1832usize];
    ["Offset of field: mjModel::dof_armature"]
        [::core::mem::offset_of!(mjModel, dof_armature) - 1840usize];
    ["Offset of field: mjModel::dof_damping"]
        [::core::mem::offset_of!(mjModel, dof_damping) - 1848usize];
    ["Offset of field: mjModel::dof_invweight0"]
        [::core::mem::offset_of!(mjModel, dof_invweight0) - 1856usize];
    ["Offset of field: mjModel::dof_M0"][::core::mem::offset_of!(mjModel, dof_M0) - 1864usize];
    ["Offset of field: mjModel::geom_type"]
        [::core::mem::offset_of!(mjModel, geom_type) - 1872usize];
    ["Offset of field: mjModel::geom_contype"]
        [::core::mem::offset_of!(mjModel, geom_contype) - 1880usize];
    ["Offset of field: mjModel::geom_conaffinity"]
        [::core::mem::offset_of!(mjModel, geom_conaffinity) - 1888usize];
    ["Offset of field: mjModel::geom_condim"]
        [::core::mem::offset_of!(mjModel, geom_condim) - 1896usize];
    ["Offset of field: mjModel::geom_bodyid"]
        [::core::mem::offset_of!(mjModel, geom_bodyid) - 1904usize];
    ["Offset of field: mjModel::geom_dataid"]
        [::core::mem::offset_of!(mjModel, geom_dataid) - 1912usize];
    ["Offset of field: mjModel::geom_matid"]
        [::core::mem::offset_of!(mjModel, geom_matid) - 1920usize];
    ["Offset of field: mjModel::geom_group"]
        [::core::mem::offset_of!(mjModel, geom_group) - 1928usize];
    ["Offset of field: mjModel::geom_priority"]
        [::core::mem::offset_of!(mjModel, geom_priority) - 1936usize];
    ["Offset of field: mjModel::geom_plugin"]
        [::core::mem::offset_of!(mjModel, geom_plugin) - 1944usize];
    ["Offset of field: mjModel::geom_sameframe"]
        [::core::mem::offset_of!(mjModel, geom_sameframe) - 1952usize];
    ["Offset of field: mjModel::geom_solmix"]
        [::core::mem::offset_of!(mjModel, geom_solmix) - 1960usize];
    ["Offset of field: mjModel::geom_solref"]
        [::core::mem::offset_of!(mjModel, geom_solref) - 1968usize];
    ["Offset of field: mjModel::geom_solimp"]
        [::core::mem::offset_of!(mjModel, geom_solimp) - 1976usize];
    ["Offset of field: mjModel::geom_size"]
        [::core::mem::offset_of!(mjModel, geom_size) - 1984usize];
    ["Offset of field: mjModel::geom_aabb"]
        [::core::mem::offset_of!(mjModel, geom_aabb) - 1992usize];
    ["Offset of field: mjModel::geom_rbound"]
        [::core::mem::offset_of!(mjModel, geom_rbound) - 2000usize];
    ["Offset of field: mjModel::geom_pos"][::core::mem::offset_of!(mjModel, geom_pos) - 2008usize];
    ["Offset of field: mjModel::geom_quat"]
        [::core::mem::offset_of!(mjModel, geom_quat) - 2016usize];
    ["Offset of field: mjModel::geom_friction"]
        [::core::mem::offset_of!(mjModel, geom_friction) - 2024usize];
    ["Offset of field: mjModel::geom_margin"]
        [::core::mem::offset_of!(mjModel, geom_margin) - 2032usize];
    ["Offset of field: mjModel::geom_gap"][::core::mem::offset_of!(mjModel, geom_gap) - 2040usize];
    ["Offset of field: mjModel::geom_fluid"]
        [::core::mem::offset_of!(mjModel, geom_fluid) - 2048usize];
    ["Offset of field: mjModel::geom_user"]
        [::core::mem::offset_of!(mjModel, geom_user) - 2056usize];
    ["Offset of field: mjModel::geom_rgba"]
        [::core::mem::offset_of!(mjModel, geom_rgba) - 2064usize];
    ["Offset of field: mjModel::site_type"]
        [::core::mem::offset_of!(mjModel, site_type) - 2072usize];
    ["Offset of field: mjModel::site_bodyid"]
        [::core::mem::offset_of!(mjModel, site_bodyid) - 2080usize];
    ["Offset of field: mjModel::site_matid"]
        [::core::mem::offset_of!(mjModel, site_matid) - 2088usize];
    ["Offset of field: mjModel::site_group"]
        [::core::mem::offset_of!(mjModel, site_group) - 2096usize];
    ["Offset of field: mjModel::site_sameframe"]
        [::core::mem::offset_of!(mjModel, site_sameframe) - 2104usize];
    ["Offset of field: mjModel::site_size"]
        [::core::mem::offset_of!(mjModel, site_size) - 2112usize];
    ["Offset of field: mjModel::site_pos"][::core::mem::offset_of!(mjModel, site_pos) - 2120usize];
    ["Offset of field: mjModel::site_quat"]
        [::core::mem::offset_of!(mjModel, site_quat) - 2128usize];
    ["Offset of field: mjModel::site_user"]
        [::core::mem::offset_of!(mjModel, site_user) - 2136usize];
    ["Offset of field: mjModel::site_rgba"]
        [::core::mem::offset_of!(mjModel, site_rgba) - 2144usize];
    ["Offset of field: mjModel::cam_mode"][::core::mem::offset_of!(mjModel, cam_mode) - 2152usize];
    ["Offset of field: mjModel::cam_bodyid"]
        [::core::mem::offset_of!(mjModel, cam_bodyid) - 2160usize];
    ["Offset of field: mjModel::cam_targetbodyid"]
        [::core::mem::offset_of!(mjModel, cam_targetbodyid) - 2168usize];
    ["Offset of field: mjModel::cam_pos"][::core::mem::offset_of!(mjModel, cam_pos) - 2176usize];
    ["Offset of field: mjModel::cam_quat"][::core::mem::offset_of!(mjModel, cam_quat) - 2184usize];
    ["Offset of field: mjModel::cam_poscom0"]
        [::core::mem::offset_of!(mjModel, cam_poscom0) - 2192usize];
    ["Offset of field: mjModel::cam_pos0"][::core::mem::offset_of!(mjModel, cam_pos0) - 2200usize];
    ["Offset of field: mjModel::cam_mat0"][::core::mem::offset_of!(mjModel, cam_mat0) - 2208usize];
    ["Offset of field: mjModel::cam_orthographic"]
        [::core::mem::offset_of!(mjModel, cam_orthographic) - 2216usize];
    ["Offset of field: mjModel::cam_fovy"][::core::mem::offset_of!(mjModel, cam_fovy) - 2224usize];
    ["Offset of field: mjModel::cam_ipd"][::core::mem::offset_of!(mjModel, cam_ipd) - 2232usize];
    ["Offset of field: mjModel::cam_resolution"]
        [::core::mem::offset_of!(mjModel, cam_resolution) - 2240usize];
    ["Offset of field: mjModel::cam_sensorsize"]
        [::core::mem::offset_of!(mjModel, cam_sensorsize) - 2248usize];
    ["Offset of field: mjModel::cam_intrinsic"]
        [::core::mem::offset_of!(mjModel, cam_intrinsic) - 2256usize];
    ["Offset of field: mjModel::cam_user"][::core::mem::offset_of!(mjModel, cam_user) - 2264usize];
    ["Offset of field: mjModel::light_mode"]
        [::core::mem::offset_of!(mjModel, light_mode) - 2272usize];
    ["Offset of field: mjModel::light_bodyid"]
        [::core::mem::offset_of!(mjModel, light_bodyid) - 2280usize];
    ["Offset of field: mjModel::light_targetbodyid"]
        [::core::mem::offset_of!(mjModel, light_targetbodyid) - 2288usize];
    ["Offset of field: mjModel::light_directional"]
        [::core::mem::offset_of!(mjModel, light_directional) - 2296usize];
    ["Offset of field: mjModel::light_castshadow"]
        [::core::mem::offset_of!(mjModel, light_castshadow) - 2304usize];
    ["Offset of field: mjModel::light_bulbradius"]
        [::core::mem::offset_of!(mjModel, light_bulbradius) - 2312usize];
    ["Offset of field: mjModel::light_active"]
        [::core::mem::offset_of!(mjModel, light_active) - 2320usize];
    ["Offset of field: mjModel::light_pos"]
        [::core::mem::offset_of!(mjModel, light_pos) - 2328usize];
    ["Offset of field: mjModel::light_dir"]
        [::core::mem::offset_of!(mjModel, light_dir) - 2336usize];
    ["Offset of field: mjModel::light_poscom0"]
        [::core::mem::offset_of!(mjModel, light_poscom0) - 2344usize];
    ["Offset of field: mjModel::light_pos0"]
        [::core::mem::offset_of!(mjModel, light_pos0) - 2352usize];
    ["Offset of field: mjModel::light_dir0"]
        [::core::mem::offset_of!(mjModel, light_dir0) - 2360usize];
    ["Offset of field: mjModel::light_attenuation"]
        [::core::mem::offset_of!(mjModel, light_attenuation) - 2368usize];
    ["Offset of field: mjModel::light_cutoff"]
        [::core::mem::offset_of!(mjModel, light_cutoff) - 2376usize];
    ["Offset of field: mjModel::light_exponent"]
        [::core::mem::offset_of!(mjModel, light_exponent) - 2384usize];
    ["Offset of field: mjModel::light_ambient"]
        [::core::mem::offset_of!(mjModel, light_ambient) - 2392usize];
    ["Offset of field: mjModel::light_diffuse"]
        [::core::mem::offset_of!(mjModel, light_diffuse) - 2400usize];
    ["Offset of field: mjModel::light_specular"]
        [::core::mem::offset_of!(mjModel, light_specular) - 2408usize];
    ["Offset of field: mjModel::flex_contype"]
        [::core::mem::offset_of!(mjModel, flex_contype) - 2416usize];
    ["Offset of field: mjModel::flex_conaffinity"]
        [::core::mem::offset_of!(mjModel, flex_conaffinity) - 2424usize];
    ["Offset of field: mjModel::flex_condim"]
        [::core::mem::offset_of!(mjModel, flex_condim) - 2432usize];
    ["Offset of field: mjModel::flex_priority"]
        [::core::mem::offset_of!(mjModel, flex_priority) - 2440usize];
    ["Offset of field: mjModel::flex_solmix"]
        [::core::mem::offset_of!(mjModel, flex_solmix) - 2448usize];
    ["Offset of field: mjModel::flex_solref"]
        [::core::mem::offset_of!(mjModel, flex_solref) - 2456usize];
    ["Offset of field: mjModel::flex_solimp"]
        [::core::mem::offset_of!(mjModel, flex_solimp) - 2464usize];
    ["Offset of field: mjModel::flex_friction"]
        [::core::mem::offset_of!(mjModel, flex_friction) - 2472usize];
    ["Offset of field: mjModel::flex_margin"]
        [::core::mem::offset_of!(mjModel, flex_margin) - 2480usize];
    ["Offset of field: mjModel::flex_gap"][::core::mem::offset_of!(mjModel, flex_gap) - 2488usize];
    ["Offset of field: mjModel::flex_internal"]
        [::core::mem::offset_of!(mjModel, flex_internal) - 2496usize];
    ["Offset of field: mjModel::flex_selfcollide"]
        [::core::mem::offset_of!(mjModel, flex_selfcollide) - 2504usize];
    ["Offset of field: mjModel::flex_activelayers"]
        [::core::mem::offset_of!(mjModel, flex_activelayers) - 2512usize];
    ["Offset of field: mjModel::flex_dim"][::core::mem::offset_of!(mjModel, flex_dim) - 2520usize];
    ["Offset of field: mjModel::flex_matid"]
        [::core::mem::offset_of!(mjModel, flex_matid) - 2528usize];
    ["Offset of field: mjModel::flex_group"]
        [::core::mem::offset_of!(mjModel, flex_group) - 2536usize];
    ["Offset of field: mjModel::flex_interp"]
        [::core::mem::offset_of!(mjModel, flex_interp) - 2544usize];
    ["Offset of field: mjModel::flex_nodeadr"]
        [::core::mem::offset_of!(mjModel, flex_nodeadr) - 2552usize];
    ["Offset of field: mjModel::flex_nodenum"]
        [::core::mem::offset_of!(mjModel, flex_nodenum) - 2560usize];
    ["Offset of field: mjModel::flex_vertadr"]
        [::core::mem::offset_of!(mjModel, flex_vertadr) - 2568usize];
    ["Offset of field: mjModel::flex_vertnum"]
        [::core::mem::offset_of!(mjModel, flex_vertnum) - 2576usize];
    ["Offset of field: mjModel::flex_edgeadr"]
        [::core::mem::offset_of!(mjModel, flex_edgeadr) - 2584usize];
    ["Offset of field: mjModel::flex_edgenum"]
        [::core::mem::offset_of!(mjModel, flex_edgenum) - 2592usize];
    ["Offset of field: mjModel::flex_elemadr"]
        [::core::mem::offset_of!(mjModel, flex_elemadr) - 2600usize];
    ["Offset of field: mjModel::flex_elemnum"]
        [::core::mem::offset_of!(mjModel, flex_elemnum) - 2608usize];
    ["Offset of field: mjModel::flex_elemdataadr"]
        [::core::mem::offset_of!(mjModel, flex_elemdataadr) - 2616usize];
    ["Offset of field: mjModel::flex_elemedgeadr"]
        [::core::mem::offset_of!(mjModel, flex_elemedgeadr) - 2624usize];
    ["Offset of field: mjModel::flex_shellnum"]
        [::core::mem::offset_of!(mjModel, flex_shellnum) - 2632usize];
    ["Offset of field: mjModel::flex_shelldataadr"]
        [::core::mem::offset_of!(mjModel, flex_shelldataadr) - 2640usize];
    ["Offset of field: mjModel::flex_evpairadr"]
        [::core::mem::offset_of!(mjModel, flex_evpairadr) - 2648usize];
    ["Offset of field: mjModel::flex_evpairnum"]
        [::core::mem::offset_of!(mjModel, flex_evpairnum) - 2656usize];
    ["Offset of field: mjModel::flex_texcoordadr"]
        [::core::mem::offset_of!(mjModel, flex_texcoordadr) - 2664usize];
    ["Offset of field: mjModel::flex_nodebodyid"]
        [::core::mem::offset_of!(mjModel, flex_nodebodyid) - 2672usize];
    ["Offset of field: mjModel::flex_vertbodyid"]
        [::core::mem::offset_of!(mjModel, flex_vertbodyid) - 2680usize];
    ["Offset of field: mjModel::flex_edge"]
        [::core::mem::offset_of!(mjModel, flex_edge) - 2688usize];
    ["Offset of field: mjModel::flex_elem"]
        [::core::mem::offset_of!(mjModel, flex_elem) - 2696usize];
    ["Offset of field: mjModel::flex_elemtexcoord"]
        [::core::mem::offset_of!(mjModel, flex_elemtexcoord) - 2704usize];
    ["Offset of field: mjModel::flex_elemedge"]
        [::core::mem::offset_of!(mjModel, flex_elemedge) - 2712usize];
    ["Offset of field: mjModel::flex_elemlayer"]
        [::core::mem::offset_of!(mjModel, flex_elemlayer) - 2720usize];
    ["Offset of field: mjModel::flex_shell"]
        [::core::mem::offset_of!(mjModel, flex_shell) - 2728usize];
    ["Offset of field: mjModel::flex_evpair"]
        [::core::mem::offset_of!(mjModel, flex_evpair) - 2736usize];
    ["Offset of field: mjModel::flex_vert"]
        [::core::mem::offset_of!(mjModel, flex_vert) - 2744usize];
    ["Offset of field: mjModel::flex_vert0"]
        [::core::mem::offset_of!(mjModel, flex_vert0) - 2752usize];
    ["Offset of field: mjModel::flex_node"]
        [::core::mem::offset_of!(mjModel, flex_node) - 2760usize];
    ["Offset of field: mjModel::flex_node0"]
        [::core::mem::offset_of!(mjModel, flex_node0) - 2768usize];
    ["Offset of field: mjModel::flexedge_length0"]
        [::core::mem::offset_of!(mjModel, flexedge_length0) - 2776usize];
    ["Offset of field: mjModel::flexedge_invweight0"]
        [::core::mem::offset_of!(mjModel, flexedge_invweight0) - 2784usize];
    ["Offset of field: mjModel::flex_radius"]
        [::core::mem::offset_of!(mjModel, flex_radius) - 2792usize];
    ["Offset of field: mjModel::flex_stiffness"]
        [::core::mem::offset_of!(mjModel, flex_stiffness) - 2800usize];
    ["Offset of field: mjModel::flex_damping"]
        [::core::mem::offset_of!(mjModel, flex_damping) - 2808usize];
    ["Offset of field: mjModel::flex_edgestiffness"]
        [::core::mem::offset_of!(mjModel, flex_edgestiffness) - 2816usize];
    ["Offset of field: mjModel::flex_edgedamping"]
        [::core::mem::offset_of!(mjModel, flex_edgedamping) - 2824usize];
    ["Offset of field: mjModel::flex_edgeequality"]
        [::core::mem::offset_of!(mjModel, flex_edgeequality) - 2832usize];
    ["Offset of field: mjModel::flex_rigid"]
        [::core::mem::offset_of!(mjModel, flex_rigid) - 2840usize];
    ["Offset of field: mjModel::flexedge_rigid"]
        [::core::mem::offset_of!(mjModel, flexedge_rigid) - 2848usize];
    ["Offset of field: mjModel::flex_centered"]
        [::core::mem::offset_of!(mjModel, flex_centered) - 2856usize];
    ["Offset of field: mjModel::flex_flatskin"]
        [::core::mem::offset_of!(mjModel, flex_flatskin) - 2864usize];
    ["Offset of field: mjModel::flex_bvhadr"]
        [::core::mem::offset_of!(mjModel, flex_bvhadr) - 2872usize];
    ["Offset of field: mjModel::flex_bvhnum"]
        [::core::mem::offset_of!(mjModel, flex_bvhnum) - 2880usize];
    ["Offset of field: mjModel::flex_rgba"]
        [::core::mem::offset_of!(mjModel, flex_rgba) - 2888usize];
    ["Offset of field: mjModel::flex_texcoord"]
        [::core::mem::offset_of!(mjModel, flex_texcoord) - 2896usize];
    ["Offset of field: mjModel::mesh_vertadr"]
        [::core::mem::offset_of!(mjModel, mesh_vertadr) - 2904usize];
    ["Offset of field: mjModel::mesh_vertnum"]
        [::core::mem::offset_of!(mjModel, mesh_vertnum) - 2912usize];
    ["Offset of field: mjModel::mesh_faceadr"]
        [::core::mem::offset_of!(mjModel, mesh_faceadr) - 2920usize];
    ["Offset of field: mjModel::mesh_facenum"]
        [::core::mem::offset_of!(mjModel, mesh_facenum) - 2928usize];
    ["Offset of field: mjModel::mesh_bvhadr"]
        [::core::mem::offset_of!(mjModel, mesh_bvhadr) - 2936usize];
    ["Offset of field: mjModel::mesh_bvhnum"]
        [::core::mem::offset_of!(mjModel, mesh_bvhnum) - 2944usize];
    ["Offset of field: mjModel::mesh_normaladr"]
        [::core::mem::offset_of!(mjModel, mesh_normaladr) - 2952usize];
    ["Offset of field: mjModel::mesh_normalnum"]
        [::core::mem::offset_of!(mjModel, mesh_normalnum) - 2960usize];
    ["Offset of field: mjModel::mesh_texcoordadr"]
        [::core::mem::offset_of!(mjModel, mesh_texcoordadr) - 2968usize];
    ["Offset of field: mjModel::mesh_texcoordnum"]
        [::core::mem::offset_of!(mjModel, mesh_texcoordnum) - 2976usize];
    ["Offset of field: mjModel::mesh_graphadr"]
        [::core::mem::offset_of!(mjModel, mesh_graphadr) - 2984usize];
    ["Offset of field: mjModel::mesh_vert"]
        [::core::mem::offset_of!(mjModel, mesh_vert) - 2992usize];
    ["Offset of field: mjModel::mesh_normal"]
        [::core::mem::offset_of!(mjModel, mesh_normal) - 3000usize];
    ["Offset of field: mjModel::mesh_texcoord"]
        [::core::mem::offset_of!(mjModel, mesh_texcoord) - 3008usize];
    ["Offset of field: mjModel::mesh_face"]
        [::core::mem::offset_of!(mjModel, mesh_face) - 3016usize];
    ["Offset of field: mjModel::mesh_facenormal"]
        [::core::mem::offset_of!(mjModel, mesh_facenormal) - 3024usize];
    ["Offset of field: mjModel::mesh_facetexcoord"]
        [::core::mem::offset_of!(mjModel, mesh_facetexcoord) - 3032usize];
    ["Offset of field: mjModel::mesh_graph"]
        [::core::mem::offset_of!(mjModel, mesh_graph) - 3040usize];
    ["Offset of field: mjModel::mesh_scale"]
        [::core::mem::offset_of!(mjModel, mesh_scale) - 3048usize];
    ["Offset of field: mjModel::mesh_pos"][::core::mem::offset_of!(mjModel, mesh_pos) - 3056usize];
    ["Offset of field: mjModel::mesh_quat"]
        [::core::mem::offset_of!(mjModel, mesh_quat) - 3064usize];
    ["Offset of field: mjModel::mesh_pathadr"]
        [::core::mem::offset_of!(mjModel, mesh_pathadr) - 3072usize];
    ["Offset of field: mjModel::mesh_polynum"]
        [::core::mem::offset_of!(mjModel, mesh_polynum) - 3080usize];
    ["Offset of field: mjModel::mesh_polyadr"]
        [::core::mem::offset_of!(mjModel, mesh_polyadr) - 3088usize];
    ["Offset of field: mjModel::mesh_polynormal"]
        [::core::mem::offset_of!(mjModel, mesh_polynormal) - 3096usize];
    ["Offset of field: mjModel::mesh_polyvertadr"]
        [::core::mem::offset_of!(mjModel, mesh_polyvertadr) - 3104usize];
    ["Offset of field: mjModel::mesh_polyvertnum"]
        [::core::mem::offset_of!(mjModel, mesh_polyvertnum) - 3112usize];
    ["Offset of field: mjModel::mesh_polyvert"]
        [::core::mem::offset_of!(mjModel, mesh_polyvert) - 3120usize];
    ["Offset of field: mjModel::mesh_polymapadr"]
        [::core::mem::offset_of!(mjModel, mesh_polymapadr) - 3128usize];
    ["Offset of field: mjModel::mesh_polymapnum"]
        [::core::mem::offset_of!(mjModel, mesh_polymapnum) - 3136usize];
    ["Offset of field: mjModel::mesh_polymap"]
        [::core::mem::offset_of!(mjModel, mesh_polymap) - 3144usize];
    ["Offset of field: mjModel::skin_matid"]
        [::core::mem::offset_of!(mjModel, skin_matid) - 3152usize];
    ["Offset of field: mjModel::skin_group"]
        [::core::mem::offset_of!(mjModel, skin_group) - 3160usize];
    ["Offset of field: mjModel::skin_rgba"]
        [::core::mem::offset_of!(mjModel, skin_rgba) - 3168usize];
    ["Offset of field: mjModel::skin_inflate"]
        [::core::mem::offset_of!(mjModel, skin_inflate) - 3176usize];
    ["Offset of field: mjModel::skin_vertadr"]
        [::core::mem::offset_of!(mjModel, skin_vertadr) - 3184usize];
    ["Offset of field: mjModel::skin_vertnum"]
        [::core::mem::offset_of!(mjModel, skin_vertnum) - 3192usize];
    ["Offset of field: mjModel::skin_texcoordadr"]
        [::core::mem::offset_of!(mjModel, skin_texcoordadr) - 3200usize];
    ["Offset of field: mjModel::skin_faceadr"]
        [::core::mem::offset_of!(mjModel, skin_faceadr) - 3208usize];
    ["Offset of field: mjModel::skin_facenum"]
        [::core::mem::offset_of!(mjModel, skin_facenum) - 3216usize];
    ["Offset of field: mjModel::skin_boneadr"]
        [::core::mem::offset_of!(mjModel, skin_boneadr) - 3224usize];
    ["Offset of field: mjModel::skin_bonenum"]
        [::core::mem::offset_of!(mjModel, skin_bonenum) - 3232usize];
    ["Offset of field: mjModel::skin_vert"]
        [::core::mem::offset_of!(mjModel, skin_vert) - 3240usize];
    ["Offset of field: mjModel::skin_texcoord"]
        [::core::mem::offset_of!(mjModel, skin_texcoord) - 3248usize];
    ["Offset of field: mjModel::skin_face"]
        [::core::mem::offset_of!(mjModel, skin_face) - 3256usize];
    ["Offset of field: mjModel::skin_bonevertadr"]
        [::core::mem::offset_of!(mjModel, skin_bonevertadr) - 3264usize];
    ["Offset of field: mjModel::skin_bonevertnum"]
        [::core::mem::offset_of!(mjModel, skin_bonevertnum) - 3272usize];
    ["Offset of field: mjModel::skin_bonebindpos"]
        [::core::mem::offset_of!(mjModel, skin_bonebindpos) - 3280usize];
    ["Offset of field: mjModel::skin_bonebindquat"]
        [::core::mem::offset_of!(mjModel, skin_bonebindquat) - 3288usize];
    ["Offset of field: mjModel::skin_bonebodyid"]
        [::core::mem::offset_of!(mjModel, skin_bonebodyid) - 3296usize];
    ["Offset of field: mjModel::skin_bonevertid"]
        [::core::mem::offset_of!(mjModel, skin_bonevertid) - 3304usize];
    ["Offset of field: mjModel::skin_bonevertweight"]
        [::core::mem::offset_of!(mjModel, skin_bonevertweight) - 3312usize];
    ["Offset of field: mjModel::skin_pathadr"]
        [::core::mem::offset_of!(mjModel, skin_pathadr) - 3320usize];
    ["Offset of field: mjModel::hfield_size"]
        [::core::mem::offset_of!(mjModel, hfield_size) - 3328usize];
    ["Offset of field: mjModel::hfield_nrow"]
        [::core::mem::offset_of!(mjModel, hfield_nrow) - 3336usize];
    ["Offset of field: mjModel::hfield_ncol"]
        [::core::mem::offset_of!(mjModel, hfield_ncol) - 3344usize];
    ["Offset of field: mjModel::hfield_adr"]
        [::core::mem::offset_of!(mjModel, hfield_adr) - 3352usize];
    ["Offset of field: mjModel::hfield_data"]
        [::core::mem::offset_of!(mjModel, hfield_data) - 3360usize];
    ["Offset of field: mjModel::hfield_pathadr"]
        [::core::mem::offset_of!(mjModel, hfield_pathadr) - 3368usize];
    ["Offset of field: mjModel::tex_type"][::core::mem::offset_of!(mjModel, tex_type) - 3376usize];
    ["Offset of field: mjModel::tex_height"]
        [::core::mem::offset_of!(mjModel, tex_height) - 3384usize];
    ["Offset of field: mjModel::tex_width"]
        [::core::mem::offset_of!(mjModel, tex_width) - 3392usize];
    ["Offset of field: mjModel::tex_nchannel"]
        [::core::mem::offset_of!(mjModel, tex_nchannel) - 3400usize];
    ["Offset of field: mjModel::tex_adr"][::core::mem::offset_of!(mjModel, tex_adr) - 3408usize];
    ["Offset of field: mjModel::tex_data"][::core::mem::offset_of!(mjModel, tex_data) - 3416usize];
    ["Offset of field: mjModel::tex_pathadr"]
        [::core::mem::offset_of!(mjModel, tex_pathadr) - 3424usize];
    ["Offset of field: mjModel::mat_texid"]
        [::core::mem::offset_of!(mjModel, mat_texid) - 3432usize];
    ["Offset of field: mjModel::mat_texuniform"]
        [::core::mem::offset_of!(mjModel, mat_texuniform) - 3440usize];
    ["Offset of field: mjModel::mat_texrepeat"]
        [::core::mem::offset_of!(mjModel, mat_texrepeat) - 3448usize];
    ["Offset of field: mjModel::mat_emission"]
        [::core::mem::offset_of!(mjModel, mat_emission) - 3456usize];
    ["Offset of field: mjModel::mat_specular"]
        [::core::mem::offset_of!(mjModel, mat_specular) - 3464usize];
    ["Offset of field: mjModel::mat_shininess"]
        [::core::mem::offset_of!(mjModel, mat_shininess) - 3472usize];
    ["Offset of field: mjModel::mat_reflectance"]
        [::core::mem::offset_of!(mjModel, mat_reflectance) - 3480usize];
    ["Offset of field: mjModel::mat_metallic"]
        [::core::mem::offset_of!(mjModel, mat_metallic) - 3488usize];
    ["Offset of field: mjModel::mat_roughness"]
        [::core::mem::offset_of!(mjModel, mat_roughness) - 3496usize];
    ["Offset of field: mjModel::mat_rgba"][::core::mem::offset_of!(mjModel, mat_rgba) - 3504usize];
    ["Offset of field: mjModel::pair_dim"][::core::mem::offset_of!(mjModel, pair_dim) - 3512usize];
    ["Offset of field: mjModel::pair_geom1"]
        [::core::mem::offset_of!(mjModel, pair_geom1) - 3520usize];
    ["Offset of field: mjModel::pair_geom2"]
        [::core::mem::offset_of!(mjModel, pair_geom2) - 3528usize];
    ["Offset of field: mjModel::pair_signature"]
        [::core::mem::offset_of!(mjModel, pair_signature) - 3536usize];
    ["Offset of field: mjModel::pair_solref"]
        [::core::mem::offset_of!(mjModel, pair_solref) - 3544usize];
    ["Offset of field: mjModel::pair_solreffriction"]
        [::core::mem::offset_of!(mjModel, pair_solreffriction) - 3552usize];
    ["Offset of field: mjModel::pair_solimp"]
        [::core::mem::offset_of!(mjModel, pair_solimp) - 3560usize];
    ["Offset of field: mjModel::pair_margin"]
        [::core::mem::offset_of!(mjModel, pair_margin) - 3568usize];
    ["Offset of field: mjModel::pair_gap"][::core::mem::offset_of!(mjModel, pair_gap) - 3576usize];
    ["Offset of field: mjModel::pair_friction"]
        [::core::mem::offset_of!(mjModel, pair_friction) - 3584usize];
    ["Offset of field: mjModel::exclude_signature"]
        [::core::mem::offset_of!(mjModel, exclude_signature) - 3592usize];
    ["Offset of field: mjModel::eq_type"][::core::mem::offset_of!(mjModel, eq_type) - 3600usize];
    ["Offset of field: mjModel::eq_obj1id"]
        [::core::mem::offset_of!(mjModel, eq_obj1id) - 3608usize];
    ["Offset of field: mjModel::eq_obj2id"]
        [::core::mem::offset_of!(mjModel, eq_obj2id) - 3616usize];
    ["Offset of field: mjModel::eq_objtype"]
        [::core::mem::offset_of!(mjModel, eq_objtype) - 3624usize];
    ["Offset of field: mjModel::eq_active0"]
        [::core::mem::offset_of!(mjModel, eq_active0) - 3632usize];
    ["Offset of field: mjModel::eq_solref"]
        [::core::mem::offset_of!(mjModel, eq_solref) - 3640usize];
    ["Offset of field: mjModel::eq_solimp"]
        [::core::mem::offset_of!(mjModel, eq_solimp) - 3648usize];
    ["Offset of field: mjModel::eq_data"][::core::mem::offset_of!(mjModel, eq_data) - 3656usize];
    ["Offset of field: mjModel::tendon_adr"]
        [::core::mem::offset_of!(mjModel, tendon_adr) - 3664usize];
    ["Offset of field: mjModel::tendon_num"]
        [::core::mem::offset_of!(mjModel, tendon_num) - 3672usize];
    ["Offset of field: mjModel::tendon_matid"]
        [::core::mem::offset_of!(mjModel, tendon_matid) - 3680usize];
    ["Offset of field: mjModel::tendon_group"]
        [::core::mem::offset_of!(mjModel, tendon_group) - 3688usize];
    ["Offset of field: mjModel::tendon_limited"]
        [::core::mem::offset_of!(mjModel, tendon_limited) - 3696usize];
    ["Offset of field: mjModel::tendon_actfrclimited"]
        [::core::mem::offset_of!(mjModel, tendon_actfrclimited) - 3704usize];
    ["Offset of field: mjModel::tendon_width"]
        [::core::mem::offset_of!(mjModel, tendon_width) - 3712usize];
    ["Offset of field: mjModel::tendon_solref_lim"]
        [::core::mem::offset_of!(mjModel, tendon_solref_lim) - 3720usize];
    ["Offset of field: mjModel::tendon_solimp_lim"]
        [::core::mem::offset_of!(mjModel, tendon_solimp_lim) - 3728usize];
    ["Offset of field: mjModel::tendon_solref_fri"]
        [::core::mem::offset_of!(mjModel, tendon_solref_fri) - 3736usize];
    ["Offset of field: mjModel::tendon_solimp_fri"]
        [::core::mem::offset_of!(mjModel, tendon_solimp_fri) - 3744usize];
    ["Offset of field: mjModel::tendon_range"]
        [::core::mem::offset_of!(mjModel, tendon_range) - 3752usize];
    ["Offset of field: mjModel::tendon_actfrcrange"]
        [::core::mem::offset_of!(mjModel, tendon_actfrcrange) - 3760usize];
    ["Offset of field: mjModel::tendon_margin"]
        [::core::mem::offset_of!(mjModel, tendon_margin) - 3768usize];
    ["Offset of field: mjModel::tendon_stiffness"]
        [::core::mem::offset_of!(mjModel, tendon_stiffness) - 3776usize];
    ["Offset of field: mjModel::tendon_damping"]
        [::core::mem::offset_of!(mjModel, tendon_damping) - 3784usize];
    ["Offset of field: mjModel::tendon_armature"]
        [::core::mem::offset_of!(mjModel, tendon_armature) - 3792usize];
    ["Offset of field: mjModel::tendon_frictionloss"]
        [::core::mem::offset_of!(mjModel, tendon_frictionloss) - 3800usize];
    ["Offset of field: mjModel::tendon_lengthspring"]
        [::core::mem::offset_of!(mjModel, tendon_lengthspring) - 3808usize];
    ["Offset of field: mjModel::tendon_length0"]
        [::core::mem::offset_of!(mjModel, tendon_length0) - 3816usize];
    ["Offset of field: mjModel::tendon_invweight0"]
        [::core::mem::offset_of!(mjModel, tendon_invweight0) - 3824usize];
    ["Offset of field: mjModel::tendon_user"]
        [::core::mem::offset_of!(mjModel, tendon_user) - 3832usize];
    ["Offset of field: mjModel::tendon_rgba"]
        [::core::mem::offset_of!(mjModel, tendon_rgba) - 3840usize];
    ["Offset of field: mjModel::wrap_type"]
        [::core::mem::offset_of!(mjModel, wrap_type) - 3848usize];
    ["Offset of field: mjModel::wrap_objid"]
        [::core::mem::offset_of!(mjModel, wrap_objid) - 3856usize];
    ["Offset of field: mjModel::wrap_prm"][::core::mem::offset_of!(mjModel, wrap_prm) - 3864usize];
    ["Offset of field: mjModel::actuator_trntype"]
        [::core::mem::offset_of!(mjModel, actuator_trntype) - 3872usize];
    ["Offset of field: mjModel::actuator_dyntype"]
        [::core::mem::offset_of!(mjModel, actuator_dyntype) - 3880usize];
    ["Offset of field: mjModel::actuator_gaintype"]
        [::core::mem::offset_of!(mjModel, actuator_gaintype) - 3888usize];
    ["Offset of field: mjModel::actuator_biastype"]
        [::core::mem::offset_of!(mjModel, actuator_biastype) - 3896usize];
    ["Offset of field: mjModel::actuator_trnid"]
        [::core::mem::offset_of!(mjModel, actuator_trnid) - 3904usize];
    ["Offset of field: mjModel::actuator_actadr"]
        [::core::mem::offset_of!(mjModel, actuator_actadr) - 3912usize];
    ["Offset of field: mjModel::actuator_actnum"]
        [::core::mem::offset_of!(mjModel, actuator_actnum) - 3920usize];
    ["Offset of field: mjModel::actuator_group"]
        [::core::mem::offset_of!(mjModel, actuator_group) - 3928usize];
    ["Offset of field: mjModel::actuator_ctrllimited"]
        [::core::mem::offset_of!(mjModel, actuator_ctrllimited) - 3936usize];
    ["Offset of field: mjModel::actuator_forcelimited"]
        [::core::mem::offset_of!(mjModel, actuator_forcelimited) - 3944usize];
    ["Offset of field: mjModel::actuator_actlimited"]
        [::core::mem::offset_of!(mjModel, actuator_actlimited) - 3952usize];
    ["Offset of field: mjModel::actuator_dynprm"]
        [::core::mem::offset_of!(mjModel, actuator_dynprm) - 3960usize];
    ["Offset of field: mjModel::actuator_gainprm"]
        [::core::mem::offset_of!(mjModel, actuator_gainprm) - 3968usize];
    ["Offset of field: mjModel::actuator_biasprm"]
        [::core::mem::offset_of!(mjModel, actuator_biasprm) - 3976usize];
    ["Offset of field: mjModel::actuator_actearly"]
        [::core::mem::offset_of!(mjModel, actuator_actearly) - 3984usize];
    ["Offset of field: mjModel::actuator_ctrlrange"]
        [::core::mem::offset_of!(mjModel, actuator_ctrlrange) - 3992usize];
    ["Offset of field: mjModel::actuator_forcerange"]
        [::core::mem::offset_of!(mjModel, actuator_forcerange) - 4000usize];
    ["Offset of field: mjModel::actuator_actrange"]
        [::core::mem::offset_of!(mjModel, actuator_actrange) - 4008usize];
    ["Offset of field: mjModel::actuator_gear"]
        [::core::mem::offset_of!(mjModel, actuator_gear) - 4016usize];
    ["Offset of field: mjModel::actuator_cranklength"]
        [::core::mem::offset_of!(mjModel, actuator_cranklength) - 4024usize];
    ["Offset of field: mjModel::actuator_acc0"]
        [::core::mem::offset_of!(mjModel, actuator_acc0) - 4032usize];
    ["Offset of field: mjModel::actuator_length0"]
        [::core::mem::offset_of!(mjModel, actuator_length0) - 4040usize];
    ["Offset of field: mjModel::actuator_lengthrange"]
        [::core::mem::offset_of!(mjModel, actuator_lengthrange) - 4048usize];
    ["Offset of field: mjModel::actuator_user"]
        [::core::mem::offset_of!(mjModel, actuator_user) - 4056usize];
    ["Offset of field: mjModel::actuator_plugin"]
        [::core::mem::offset_of!(mjModel, actuator_plugin) - 4064usize];
    ["Offset of field: mjModel::sensor_type"]
        [::core::mem::offset_of!(mjModel, sensor_type) - 4072usize];
    ["Offset of field: mjModel::sensor_datatype"]
        [::core::mem::offset_of!(mjModel, sensor_datatype) - 4080usize];
    ["Offset of field: mjModel::sensor_needstage"]
        [::core::mem::offset_of!(mjModel, sensor_needstage) - 4088usize];
    ["Offset of field: mjModel::sensor_objtype"]
        [::core::mem::offset_of!(mjModel, sensor_objtype) - 4096usize];
    ["Offset of field: mjModel::sensor_objid"]
        [::core::mem::offset_of!(mjModel, sensor_objid) - 4104usize];
    ["Offset of field: mjModel::sensor_reftype"]
        [::core::mem::offset_of!(mjModel, sensor_reftype) - 4112usize];
    ["Offset of field: mjModel::sensor_refid"]
        [::core::mem::offset_of!(mjModel, sensor_refid) - 4120usize];
    ["Offset of field: mjModel::sensor_dim"]
        [::core::mem::offset_of!(mjModel, sensor_dim) - 4128usize];
    ["Offset of field: mjModel::sensor_adr"]
        [::core::mem::offset_of!(mjModel, sensor_adr) - 4136usize];
    ["Offset of field: mjModel::sensor_cutoff"]
        [::core::mem::offset_of!(mjModel, sensor_cutoff) - 4144usize];
    ["Offset of field: mjModel::sensor_noise"]
        [::core::mem::offset_of!(mjModel, sensor_noise) - 4152usize];
    ["Offset of field: mjModel::sensor_user"]
        [::core::mem::offset_of!(mjModel, sensor_user) - 4160usize];
    ["Offset of field: mjModel::sensor_plugin"]
        [::core::mem::offset_of!(mjModel, sensor_plugin) - 4168usize];
    ["Offset of field: mjModel::plugin"][::core::mem::offset_of!(mjModel, plugin) - 4176usize];
    ["Offset of field: mjModel::plugin_stateadr"]
        [::core::mem::offset_of!(mjModel, plugin_stateadr) - 4184usize];
    ["Offset of field: mjModel::plugin_statenum"]
        [::core::mem::offset_of!(mjModel, plugin_statenum) - 4192usize];
    ["Offset of field: mjModel::plugin_attr"]
        [::core::mem::offset_of!(mjModel, plugin_attr) - 4200usize];
    ["Offset of field: mjModel::plugin_attradr"]
        [::core::mem::offset_of!(mjModel, plugin_attradr) - 4208usize];
    ["Offset of field: mjModel::numeric_adr"]
        [::core::mem::offset_of!(mjModel, numeric_adr) - 4216usize];
    ["Offset of field: mjModel::numeric_size"]
        [::core::mem::offset_of!(mjModel, numeric_size) - 4224usize];
    ["Offset of field: mjModel::numeric_data"]
        [::core::mem::offset_of!(mjModel, numeric_data) - 4232usize];
    ["Offset of field: mjModel::text_adr"][::core::mem::offset_of!(mjModel, text_adr) - 4240usize];
    ["Offset of field: mjModel::text_size"]
        [::core::mem::offset_of!(mjModel, text_size) - 4248usize];
    ["Offset of field: mjModel::text_data"]
        [::core::mem::offset_of!(mjModel, text_data) - 4256usize];
    ["Offset of field: mjModel::tuple_adr"]
        [::core::mem::offset_of!(mjModel, tuple_adr) - 4264usize];
    ["Offset of field: mjModel::tuple_size"]
        [::core::mem::offset_of!(mjModel, tuple_size) - 4272usize];
    ["Offset of field: mjModel::tuple_objtype"]
        [::core::mem::offset_of!(mjModel, tuple_objtype) - 4280usize];
    ["Offset of field: mjModel::tuple_objid"]
        [::core::mem::offset_of!(mjModel, tuple_objid) - 4288usize];
    ["Offset of field: mjModel::tuple_objprm"]
        [::core::mem::offset_of!(mjModel, tuple_objprm) - 4296usize];
    ["Offset of field: mjModel::key_time"][::core::mem::offset_of!(mjModel, key_time) - 4304usize];
    ["Offset of field: mjModel::key_qpos"][::core::mem::offset_of!(mjModel, key_qpos) - 4312usize];
    ["Offset of field: mjModel::key_qvel"][::core::mem::offset_of!(mjModel, key_qvel) - 4320usize];
    ["Offset of field: mjModel::key_act"][::core::mem::offset_of!(mjModel, key_act) - 4328usize];
    ["Offset of field: mjModel::key_mpos"][::core::mem::offset_of!(mjModel, key_mpos) - 4336usize];
    ["Offset of field: mjModel::key_mquat"]
        [::core::mem::offset_of!(mjModel, key_mquat) - 4344usize];
    ["Offset of field: mjModel::key_ctrl"][::core::mem::offset_of!(mjModel, key_ctrl) - 4352usize];
    ["Offset of field: mjModel::name_bodyadr"]
        [::core::mem::offset_of!(mjModel, name_bodyadr) - 4360usize];
    ["Offset of field: mjModel::name_jntadr"]
        [::core::mem::offset_of!(mjModel, name_jntadr) - 4368usize];
    ["Offset of field: mjModel::name_geomadr"]
        [::core::mem::offset_of!(mjModel, name_geomadr) - 4376usize];
    ["Offset of field: mjModel::name_siteadr"]
        [::core::mem::offset_of!(mjModel, name_siteadr) - 4384usize];
    ["Offset of field: mjModel::name_camadr"]
        [::core::mem::offset_of!(mjModel, name_camadr) - 4392usize];
    ["Offset of field: mjModel::name_lightadr"]
        [::core::mem::offset_of!(mjModel, name_lightadr) - 4400usize];
    ["Offset of field: mjModel::name_flexadr"]
        [::core::mem::offset_of!(mjModel, name_flexadr) - 4408usize];
    ["Offset of field: mjModel::name_meshadr"]
        [::core::mem::offset_of!(mjModel, name_meshadr) - 4416usize];
    ["Offset of field: mjModel::name_skinadr"]
        [::core::mem::offset_of!(mjModel, name_skinadr) - 4424usize];
    ["Offset of field: mjModel::name_hfieldadr"]
        [::core::mem::offset_of!(mjModel, name_hfieldadr) - 4432usize];
    ["Offset of field: mjModel::name_texadr"]
        [::core::mem::offset_of!(mjModel, name_texadr) - 4440usize];
    ["Offset of field: mjModel::name_matadr"]
        [::core::mem::offset_of!(mjModel, name_matadr) - 4448usize];
    ["Offset of field: mjModel::name_pairadr"]
        [::core::mem::offset_of!(mjModel, name_pairadr) - 4456usize];
    ["Offset of field: mjModel::name_excludeadr"]
        [::core::mem::offset_of!(mjModel, name_excludeadr) - 4464usize];
    ["Offset of field: mjModel::name_eqadr"]
        [::core::mem::offset_of!(mjModel, name_eqadr) - 4472usize];
    ["Offset of field: mjModel::name_tendonadr"]
        [::core::mem::offset_of!(mjModel, name_tendonadr) - 4480usize];
    ["Offset of field: mjModel::name_actuatoradr"]
        [::core::mem::offset_of!(mjModel, name_actuatoradr) - 4488usize];
    ["Offset of field: mjModel::name_sensoradr"]
        [::core::mem::offset_of!(mjModel, name_sensoradr) - 4496usize];
    ["Offset of field: mjModel::name_numericadr"]
        [::core::mem::offset_of!(mjModel, name_numericadr) - 4504usize];
    ["Offset of field: mjModel::name_textadr"]
        [::core::mem::offset_of!(mjModel, name_textadr) - 4512usize];
    ["Offset of field: mjModel::name_tupleadr"]
        [::core::mem::offset_of!(mjModel, name_tupleadr) - 4520usize];
    ["Offset of field: mjModel::name_keyadr"]
        [::core::mem::offset_of!(mjModel, name_keyadr) - 4528usize];
    ["Offset of field: mjModel::name_pluginadr"]
        [::core::mem::offset_of!(mjModel, name_pluginadr) - 4536usize];
    ["Offset of field: mjModel::names"][::core::mem::offset_of!(mjModel, names) - 4544usize];
    ["Offset of field: mjModel::names_map"]
        [::core::mem::offset_of!(mjModel, names_map) - 4552usize];
    ["Offset of field: mjModel::paths"][::core::mem::offset_of!(mjModel, paths) - 4560usize];
    ["Offset of field: mjModel::signature"]
        [::core::mem::offset_of!(mjModel, signature) - 4568usize];
};
impl Default for mjModel {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl mjtTaskStatus {
    pub const NEW: mjtTaskStatus = mjtTaskStatus(0);
    pub const QUEUED: mjtTaskStatus = mjtTaskStatus(1);
    pub const COMPLETED: mjtTaskStatus = mjtTaskStatus(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtTaskStatus(pub(crate) ::core::ffi::c_uint);
pub type mjfTask = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjThreadPool {
    pub(crate) nworker: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjThreadPool"][::core::mem::size_of::<mjThreadPool>() - 4usize];
    ["Alignment of mjThreadPool"][::core::mem::align_of::<mjThreadPool>() - 4usize];
    ["Offset of field: mjThreadPool::nworker"]
        [::core::mem::offset_of!(mjThreadPool, nworker) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjTask {
    pub(crate) func: mjfTask,
    pub(crate) args: *mut ::core::ffi::c_void,
    pub(crate) status: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjTask"][::core::mem::size_of::<mjTask>() - 24usize];
    ["Alignment of mjTask"][::core::mem::align_of::<mjTask>() - 8usize];
    ["Offset of field: mjTask::func"][::core::mem::offset_of!(mjTask, func) - 0usize];
    ["Offset of field: mjTask::args"][::core::mem::offset_of!(mjTask, args) - 8usize];
    ["Offset of field: mjTask::status"][::core::mem::offset_of!(mjTask, status) - 16usize];
};
impl Default for mjTask {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mjNSTATE: usize = mjtState::mjNSTATE.0 as usize;
impl mjtState {
    pub const TIME: mjtState = mjtState(1);
    pub const QPOS: mjtState = mjtState(2);
    pub const QVEL: mjtState = mjtState(4);
    pub const ACT: mjtState = mjtState(8);
    pub const WARMSTART: mjtState = mjtState(16);
    pub const CTRL: mjtState = mjtState(32);
    pub const QFRC_APPLIED: mjtState = mjtState(64);
    pub const XFRC_APPLIED: mjtState = mjtState(128);
    pub const EQ_ACTIVE: mjtState = mjtState(256);
    pub const MOCAP_POS: mjtState = mjtState(512);
    pub const MOCAP_QUAT: mjtState = mjtState(1024);
    pub const USERDATA: mjtState = mjtState(2048);
    pub const PLUGIN: mjtState = mjtState(4096);
    pub const PHYSICS: mjtState = mjtState(14);
    pub const FULLPHYSICS: mjtState = mjtState(4111);
    pub const USER: mjtState = mjtState(4064);
    pub const INTEGRATION: mjtState = mjtState(8191);
    pub(crate) const mjNSTATE: mjtState = mjtState(13);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtState(pub(crate) ::core::ffi::c_uint);
pub const mjNWARNING: usize = mjtWarning::mjNWARNING.0 as usize;
impl mjtWarning {
    pub const INERTIA: mjtWarning = mjtWarning(0);
    pub const CONTACTFULL: mjtWarning = mjtWarning(1);
    pub const CNSTRFULL: mjtWarning = mjtWarning(2);
    pub const VGEOMFULL: mjtWarning = mjtWarning(3);
    pub const BADQPOS: mjtWarning = mjtWarning(4);
    pub const BADQVEL: mjtWarning = mjtWarning(5);
    pub const BADQACC: mjtWarning = mjtWarning(6);
    pub const BADCTRL: mjtWarning = mjtWarning(7);
    pub(crate) const mjNWARNING: mjtWarning = mjtWarning(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtWarning(pub(crate) ::core::ffi::c_uint);
pub const mjNTIMER: usize = mjtTimer::mjNTIMER.0 as usize;
impl mjtTimer {
    pub const STEP: mjtTimer = mjtTimer(0);
    pub const FORWARD: mjtTimer = mjtTimer(1);
    pub const INVERSE: mjtTimer = mjtTimer(2);
    pub const POSITION: mjtTimer = mjtTimer(3);
    pub const VELOCITY: mjtTimer = mjtTimer(4);
    pub const ACTUATION: mjtTimer = mjtTimer(5);
    pub const CONSTRAINT: mjtTimer = mjtTimer(6);
    pub const ADVANCE: mjtTimer = mjtTimer(7);
    pub const POS_KINEMATICS: mjtTimer = mjtTimer(8);
    pub const POS_INERTIA: mjtTimer = mjtTimer(9);
    pub const POS_COLLISION: mjtTimer = mjtTimer(10);
    pub const POS_MAKE: mjtTimer = mjtTimer(11);
    pub const POS_PROJECT: mjtTimer = mjtTimer(12);
    pub const COL_BROAD: mjtTimer = mjtTimer(13);
    pub const COL_NARROW: mjtTimer = mjtTimer(14);
    pub(crate) const mjNTIMER: mjtTimer = mjtTimer(15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtTimer(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjContact {
    pub(crate) dist: mjtNum,
    pub(crate) pos: [mjtNum; 3usize],
    pub(crate) frame: [mjtNum; 9usize],
    pub(crate) includemargin: mjtNum,
    pub(crate) friction: [mjtNum; 5usize],
    pub(crate) solref: [mjtNum; 2usize],
    pub(crate) solreffriction: [mjtNum; 2usize],
    pub(crate) solimp: [mjtNum; 5usize],
    pub(crate) mu: mjtNum,
    pub(crate) H: [mjtNum; 36usize],
    pub(crate) dim: ::core::ffi::c_int,
    pub(crate) geom1: ::core::ffi::c_int,
    pub(crate) geom2: ::core::ffi::c_int,
    pub(crate) geom: [::core::ffi::c_int; 2usize],
    pub(crate) flex: [::core::ffi::c_int; 2usize],
    pub(crate) elem: [::core::ffi::c_int; 2usize],
    pub(crate) vert: [::core::ffi::c_int; 2usize],
    pub(crate) exclude: ::core::ffi::c_int,
    pub(crate) efc_address: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjContact"][::core::mem::size_of::<mjContact>() - 576usize];
    ["Alignment of mjContact"][::core::mem::align_of::<mjContact>() - 8usize];
    ["Offset of field: mjContact::dist"][::core::mem::offset_of!(mjContact, dist) - 0usize];
    ["Offset of field: mjContact::pos"][::core::mem::offset_of!(mjContact, pos) - 8usize];
    ["Offset of field: mjContact::frame"][::core::mem::offset_of!(mjContact, frame) - 32usize];
    ["Offset of field: mjContact::includemargin"]
        [::core::mem::offset_of!(mjContact, includemargin) - 104usize];
    ["Offset of field: mjContact::friction"]
        [::core::mem::offset_of!(mjContact, friction) - 112usize];
    ["Offset of field: mjContact::solref"][::core::mem::offset_of!(mjContact, solref) - 152usize];
    ["Offset of field: mjContact::solreffriction"]
        [::core::mem::offset_of!(mjContact, solreffriction) - 168usize];
    ["Offset of field: mjContact::solimp"][::core::mem::offset_of!(mjContact, solimp) - 184usize];
    ["Offset of field: mjContact::mu"][::core::mem::offset_of!(mjContact, mu) - 224usize];
    ["Offset of field: mjContact::H"][::core::mem::offset_of!(mjContact, H) - 232usize];
    ["Offset of field: mjContact::dim"][::core::mem::offset_of!(mjContact, dim) - 520usize];
    ["Offset of field: mjContact::geom1"][::core::mem::offset_of!(mjContact, geom1) - 524usize];
    ["Offset of field: mjContact::geom2"][::core::mem::offset_of!(mjContact, geom2) - 528usize];
    ["Offset of field: mjContact::geom"][::core::mem::offset_of!(mjContact, geom) - 532usize];
    ["Offset of field: mjContact::flex"][::core::mem::offset_of!(mjContact, flex) - 540usize];
    ["Offset of field: mjContact::elem"][::core::mem::offset_of!(mjContact, elem) - 548usize];
    ["Offset of field: mjContact::vert"][::core::mem::offset_of!(mjContact, vert) - 556usize];
    ["Offset of field: mjContact::exclude"][::core::mem::offset_of!(mjContact, exclude) - 564usize];
    ["Offset of field: mjContact::efc_address"]
        [::core::mem::offset_of!(mjContact, efc_address) - 568usize];
};
impl Default for mjContact {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjWarningStat {
    pub(crate) lastinfo: ::core::ffi::c_int,
    pub(crate) number: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjWarningStat"][::core::mem::size_of::<mjWarningStat>() - 8usize];
    ["Alignment of mjWarningStat"][::core::mem::align_of::<mjWarningStat>() - 4usize];
    ["Offset of field: mjWarningStat::lastinfo"]
        [::core::mem::offset_of!(mjWarningStat, lastinfo) - 0usize];
    ["Offset of field: mjWarningStat::number"]
        [::core::mem::offset_of!(mjWarningStat, number) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjTimerStat {
    pub(crate) duration: mjtNum,
    pub(crate) number: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjTimerStat"][::core::mem::size_of::<mjTimerStat>() - 16usize];
    ["Alignment of mjTimerStat"][::core::mem::align_of::<mjTimerStat>() - 8usize];
    ["Offset of field: mjTimerStat::duration"]
        [::core::mem::offset_of!(mjTimerStat, duration) - 0usize];
    ["Offset of field: mjTimerStat::number"][::core::mem::offset_of!(mjTimerStat, number) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjSolverStat {
    pub(crate) improvement: mjtNum,
    pub(crate) gradient: mjtNum,
    pub(crate) lineslope: mjtNum,
    pub(crate) nactive: ::core::ffi::c_int,
    pub(crate) nchange: ::core::ffi::c_int,
    pub(crate) neval: ::core::ffi::c_int,
    pub(crate) nupdate: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjSolverStat"][::core::mem::size_of::<mjSolverStat>() - 40usize];
    ["Alignment of mjSolverStat"][::core::mem::align_of::<mjSolverStat>() - 8usize];
    ["Offset of field: mjSolverStat::improvement"]
        [::core::mem::offset_of!(mjSolverStat, improvement) - 0usize];
    ["Offset of field: mjSolverStat::gradient"]
        [::core::mem::offset_of!(mjSolverStat, gradient) - 8usize];
    ["Offset of field: mjSolverStat::lineslope"]
        [::core::mem::offset_of!(mjSolverStat, lineslope) - 16usize];
    ["Offset of field: mjSolverStat::nactive"]
        [::core::mem::offset_of!(mjSolverStat, nactive) - 24usize];
    ["Offset of field: mjSolverStat::nchange"]
        [::core::mem::offset_of!(mjSolverStat, nchange) - 28usize];
    ["Offset of field: mjSolverStat::neval"]
        [::core::mem::offset_of!(mjSolverStat, neval) - 32usize];
    ["Offset of field: mjSolverStat::nupdate"]
        [::core::mem::offset_of!(mjSolverStat, nupdate) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjData {
    pub(crate) narena: usize,
    pub(crate) nbuffer: usize,
    pub(crate) nplugin: ::core::ffi::c_int,
    pub(crate) pstack: usize,
    pub(crate) pbase: usize,
    pub(crate) parena: usize,
    pub(crate) maxuse_stack: usize,
    pub(crate) maxuse_threadstack: [usize; 128usize],
    pub(crate) maxuse_arena: usize,
    pub(crate) maxuse_con: ::core::ffi::c_int,
    pub(crate) maxuse_efc: ::core::ffi::c_int,
    pub(crate) solver: [mjSolverStat; 4000usize],
    pub(crate) solver_niter: [::core::ffi::c_int; 20usize],
    pub(crate) solver_nnz: [::core::ffi::c_int; 20usize],
    pub(crate) solver_fwdinv: [mjtNum; 2usize],
    pub(crate) warning: [mjWarningStat; 8usize],
    pub(crate) timer: [mjTimerStat; 15usize],
    pub(crate) ncon: ::core::ffi::c_int,
    pub(crate) ne: ::core::ffi::c_int,
    pub(crate) nf: ::core::ffi::c_int,
    pub(crate) nl: ::core::ffi::c_int,
    pub(crate) nefc: ::core::ffi::c_int,
    pub(crate) nJ: ::core::ffi::c_int,
    pub(crate) nA: ::core::ffi::c_int,
    pub(crate) nisland: ::core::ffi::c_int,
    pub(crate) time: mjtNum,
    pub(crate) energy: [mjtNum; 2usize],
    pub(crate) buffer: *mut ::core::ffi::c_void,
    pub(crate) arena: *mut ::core::ffi::c_void,
    pub(crate) qpos: *mut mjtNum,
    pub(crate) qvel: *mut mjtNum,
    pub(crate) act: *mut mjtNum,
    pub(crate) qacc_warmstart: *mut mjtNum,
    pub(crate) plugin_state: *mut mjtNum,
    pub(crate) ctrl: *mut mjtNum,
    pub(crate) qfrc_applied: *mut mjtNum,
    pub(crate) xfrc_applied: *mut mjtNum,
    pub(crate) eq_active: *mut mjtByte,
    pub(crate) mocap_pos: *mut mjtNum,
    pub(crate) mocap_quat: *mut mjtNum,
    pub(crate) qacc: *mut mjtNum,
    pub(crate) act_dot: *mut mjtNum,
    pub(crate) userdata: *mut mjtNum,
    pub(crate) sensordata: *mut mjtNum,
    pub(crate) plugin: *mut ::core::ffi::c_int,
    pub(crate) plugin_data: *mut usize,
    pub(crate) xpos: *mut mjtNum,
    pub(crate) xquat: *mut mjtNum,
    pub(crate) xmat: *mut mjtNum,
    pub(crate) xipos: *mut mjtNum,
    pub(crate) ximat: *mut mjtNum,
    pub(crate) xanchor: *mut mjtNum,
    pub(crate) xaxis: *mut mjtNum,
    pub(crate) geom_xpos: *mut mjtNum,
    pub(crate) geom_xmat: *mut mjtNum,
    pub(crate) site_xpos: *mut mjtNum,
    pub(crate) site_xmat: *mut mjtNum,
    pub(crate) cam_xpos: *mut mjtNum,
    pub(crate) cam_xmat: *mut mjtNum,
    pub(crate) light_xpos: *mut mjtNum,
    pub(crate) light_xdir: *mut mjtNum,
    pub(crate) subtree_com: *mut mjtNum,
    pub(crate) cdof: *mut mjtNum,
    pub(crate) cinert: *mut mjtNum,
    pub(crate) flexvert_xpos: *mut mjtNum,
    pub(crate) flexelem_aabb: *mut mjtNum,
    pub(crate) flexedge_J_rownnz: *mut ::core::ffi::c_int,
    pub(crate) flexedge_J_rowadr: *mut ::core::ffi::c_int,
    pub(crate) flexedge_J_colind: *mut ::core::ffi::c_int,
    pub(crate) flexedge_J: *mut mjtNum,
    pub(crate) flexedge_length: *mut mjtNum,
    pub(crate) ten_wrapadr: *mut ::core::ffi::c_int,
    pub(crate) ten_wrapnum: *mut ::core::ffi::c_int,
    pub(crate) ten_J_rownnz: *mut ::core::ffi::c_int,
    pub(crate) ten_J_rowadr: *mut ::core::ffi::c_int,
    pub(crate) ten_J_colind: *mut ::core::ffi::c_int,
    pub(crate) ten_J: *mut mjtNum,
    pub(crate) ten_length: *mut mjtNum,
    pub(crate) wrap_obj: *mut ::core::ffi::c_int,
    pub(crate) wrap_xpos: *mut mjtNum,
    pub(crate) actuator_length: *mut mjtNum,
    pub(crate) moment_rownnz: *mut ::core::ffi::c_int,
    pub(crate) moment_rowadr: *mut ::core::ffi::c_int,
    pub(crate) moment_colind: *mut ::core::ffi::c_int,
    pub(crate) actuator_moment: *mut mjtNum,
    pub(crate) crb: *mut mjtNum,
    pub(crate) qM: *mut mjtNum,
    pub(crate) qLD: *mut mjtNum,
    pub(crate) qLDiagInv: *mut mjtNum,
    pub(crate) bvh_aabb_dyn: *mut mjtNum,
    pub(crate) bvh_active: *mut mjtByte,
    pub(crate) flexedge_velocity: *mut mjtNum,
    pub(crate) ten_velocity: *mut mjtNum,
    pub(crate) actuator_velocity: *mut mjtNum,
    pub(crate) cvel: *mut mjtNum,
    pub(crate) cdof_dot: *mut mjtNum,
    pub(crate) qfrc_bias: *mut mjtNum,
    pub(crate) qfrc_spring: *mut mjtNum,
    pub(crate) qfrc_damper: *mut mjtNum,
    pub(crate) qfrc_gravcomp: *mut mjtNum,
    pub(crate) qfrc_fluid: *mut mjtNum,
    pub(crate) qfrc_passive: *mut mjtNum,
    pub(crate) subtree_linvel: *mut mjtNum,
    pub(crate) subtree_angmom: *mut mjtNum,
    pub(crate) qH: *mut mjtNum,
    pub(crate) qHDiagInv: *mut mjtNum,
    pub(crate) B_rownnz: *mut ::core::ffi::c_int,
    pub(crate) B_rowadr: *mut ::core::ffi::c_int,
    pub(crate) B_colind: *mut ::core::ffi::c_int,
    pub(crate) M_rownnz: *mut ::core::ffi::c_int,
    pub(crate) M_rowadr: *mut ::core::ffi::c_int,
    pub(crate) M_colind: *mut ::core::ffi::c_int,
    pub(crate) mapM2M: *mut ::core::ffi::c_int,
    pub(crate) C_rownnz: *mut ::core::ffi::c_int,
    pub(crate) C_rowadr: *mut ::core::ffi::c_int,
    pub(crate) C_colind: *mut ::core::ffi::c_int,
    pub(crate) mapM2C: *mut ::core::ffi::c_int,
    pub(crate) D_rownnz: *mut ::core::ffi::c_int,
    pub(crate) D_rowadr: *mut ::core::ffi::c_int,
    pub(crate) D_diag: *mut ::core::ffi::c_int,
    pub(crate) D_colind: *mut ::core::ffi::c_int,
    pub(crate) mapM2D: *mut ::core::ffi::c_int,
    pub(crate) mapD2M: *mut ::core::ffi::c_int,
    pub(crate) qDeriv: *mut mjtNum,
    pub(crate) qLU: *mut mjtNum,
    pub(crate) actuator_force: *mut mjtNum,
    pub(crate) qfrc_actuator: *mut mjtNum,
    pub(crate) qfrc_smooth: *mut mjtNum,
    pub(crate) qacc_smooth: *mut mjtNum,
    pub(crate) qfrc_constraint: *mut mjtNum,
    pub(crate) qfrc_inverse: *mut mjtNum,
    pub(crate) cacc: *mut mjtNum,
    pub(crate) cfrc_int: *mut mjtNum,
    pub(crate) cfrc_ext: *mut mjtNum,
    pub(crate) contact: *mut mjContact,
    pub(crate) efc_type: *mut ::core::ffi::c_int,
    pub(crate) efc_id: *mut ::core::ffi::c_int,
    pub(crate) efc_J_rownnz: *mut ::core::ffi::c_int,
    pub(crate) efc_J_rowadr: *mut ::core::ffi::c_int,
    pub(crate) efc_J_rowsuper: *mut ::core::ffi::c_int,
    pub(crate) efc_J_colind: *mut ::core::ffi::c_int,
    pub(crate) efc_JT_rownnz: *mut ::core::ffi::c_int,
    pub(crate) efc_JT_rowadr: *mut ::core::ffi::c_int,
    pub(crate) efc_JT_rowsuper: *mut ::core::ffi::c_int,
    pub(crate) efc_JT_colind: *mut ::core::ffi::c_int,
    pub(crate) efc_J: *mut mjtNum,
    pub(crate) efc_JT: *mut mjtNum,
    pub(crate) efc_pos: *mut mjtNum,
    pub(crate) efc_margin: *mut mjtNum,
    pub(crate) efc_frictionloss: *mut mjtNum,
    pub(crate) efc_diagApprox: *mut mjtNum,
    pub(crate) efc_KBIP: *mut mjtNum,
    pub(crate) efc_D: *mut mjtNum,
    pub(crate) efc_R: *mut mjtNum,
    pub(crate) tendon_efcadr: *mut ::core::ffi::c_int,
    pub(crate) dof_island: *mut ::core::ffi::c_int,
    pub(crate) island_dofnum: *mut ::core::ffi::c_int,
    pub(crate) island_dofadr: *mut ::core::ffi::c_int,
    pub(crate) island_dofind: *mut ::core::ffi::c_int,
    pub(crate) dof_islandind: *mut ::core::ffi::c_int,
    pub(crate) efc_island: *mut ::core::ffi::c_int,
    pub(crate) island_efcnum: *mut ::core::ffi::c_int,
    pub(crate) island_efcadr: *mut ::core::ffi::c_int,
    pub(crate) island_efcind: *mut ::core::ffi::c_int,
    pub(crate) efc_AR_rownnz: *mut ::core::ffi::c_int,
    pub(crate) efc_AR_rowadr: *mut ::core::ffi::c_int,
    pub(crate) efc_AR_colind: *mut ::core::ffi::c_int,
    pub(crate) efc_AR: *mut mjtNum,
    pub(crate) efc_vel: *mut mjtNum,
    pub(crate) efc_aref: *mut mjtNum,
    pub(crate) efc_b: *mut mjtNum,
    pub(crate) efc_force: *mut mjtNum,
    pub(crate) efc_state: *mut ::core::ffi::c_int,
    pub(crate) threadpool: usize,
    pub(crate) signature: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjData"][::core::mem::size_of::<mjData>() - 162816usize];
    ["Alignment of mjData"][::core::mem::align_of::<mjData>() - 8usize];
    ["Offset of field: mjData::narena"][::core::mem::offset_of!(mjData, narena) - 0usize];
    ["Offset of field: mjData::nbuffer"][::core::mem::offset_of!(mjData, nbuffer) - 8usize];
    ["Offset of field: mjData::nplugin"][::core::mem::offset_of!(mjData, nplugin) - 16usize];
    ["Offset of field: mjData::pstack"][::core::mem::offset_of!(mjData, pstack) - 24usize];
    ["Offset of field: mjData::pbase"][::core::mem::offset_of!(mjData, pbase) - 32usize];
    ["Offset of field: mjData::parena"][::core::mem::offset_of!(mjData, parena) - 40usize];
    ["Offset of field: mjData::maxuse_stack"]
        [::core::mem::offset_of!(mjData, maxuse_stack) - 48usize];
    ["Offset of field: mjData::maxuse_threadstack"]
        [::core::mem::offset_of!(mjData, maxuse_threadstack) - 56usize];
    ["Offset of field: mjData::maxuse_arena"]
        [::core::mem::offset_of!(mjData, maxuse_arena) - 1080usize];
    ["Offset of field: mjData::maxuse_con"]
        [::core::mem::offset_of!(mjData, maxuse_con) - 1088usize];
    ["Offset of field: mjData::maxuse_efc"]
        [::core::mem::offset_of!(mjData, maxuse_efc) - 1092usize];
    ["Offset of field: mjData::solver"][::core::mem::offset_of!(mjData, solver) - 1096usize];
    ["Offset of field: mjData::solver_niter"]
        [::core::mem::offset_of!(mjData, solver_niter) - 161096usize];
    ["Offset of field: mjData::solver_nnz"]
        [::core::mem::offset_of!(mjData, solver_nnz) - 161176usize];
    ["Offset of field: mjData::solver_fwdinv"]
        [::core::mem::offset_of!(mjData, solver_fwdinv) - 161256usize];
    ["Offset of field: mjData::warning"][::core::mem::offset_of!(mjData, warning) - 161272usize];
    ["Offset of field: mjData::timer"][::core::mem::offset_of!(mjData, timer) - 161336usize];
    ["Offset of field: mjData::ncon"][::core::mem::offset_of!(mjData, ncon) - 161576usize];
    ["Offset of field: mjData::ne"][::core::mem::offset_of!(mjData, ne) - 161580usize];
    ["Offset of field: mjData::nf"][::core::mem::offset_of!(mjData, nf) - 161584usize];
    ["Offset of field: mjData::nl"][::core::mem::offset_of!(mjData, nl) - 161588usize];
    ["Offset of field: mjData::nefc"][::core::mem::offset_of!(mjData, nefc) - 161592usize];
    ["Offset of field: mjData::nJ"][::core::mem::offset_of!(mjData, nJ) - 161596usize];
    ["Offset of field: mjData::nA"][::core::mem::offset_of!(mjData, nA) - 161600usize];
    ["Offset of field: mjData::nisland"][::core::mem::offset_of!(mjData, nisland) - 161604usize];
    ["Offset of field: mjData::time"][::core::mem::offset_of!(mjData, time) - 161608usize];
    ["Offset of field: mjData::energy"][::core::mem::offset_of!(mjData, energy) - 161616usize];
    ["Offset of field: mjData::buffer"][::core::mem::offset_of!(mjData, buffer) - 161632usize];
    ["Offset of field: mjData::arena"][::core::mem::offset_of!(mjData, arena) - 161640usize];
    ["Offset of field: mjData::qpos"][::core::mem::offset_of!(mjData, qpos) - 161648usize];
    ["Offset of field: mjData::qvel"][::core::mem::offset_of!(mjData, qvel) - 161656usize];
    ["Offset of field: mjData::act"][::core::mem::offset_of!(mjData, act) - 161664usize];
    ["Offset of field: mjData::qacc_warmstart"]
        [::core::mem::offset_of!(mjData, qacc_warmstart) - 161672usize];
    ["Offset of field: mjData::plugin_state"]
        [::core::mem::offset_of!(mjData, plugin_state) - 161680usize];
    ["Offset of field: mjData::ctrl"][::core::mem::offset_of!(mjData, ctrl) - 161688usize];
    ["Offset of field: mjData::qfrc_applied"]
        [::core::mem::offset_of!(mjData, qfrc_applied) - 161696usize];
    ["Offset of field: mjData::xfrc_applied"]
        [::core::mem::offset_of!(mjData, xfrc_applied) - 161704usize];
    ["Offset of field: mjData::eq_active"]
        [::core::mem::offset_of!(mjData, eq_active) - 161712usize];
    ["Offset of field: mjData::mocap_pos"]
        [::core::mem::offset_of!(mjData, mocap_pos) - 161720usize];
    ["Offset of field: mjData::mocap_quat"]
        [::core::mem::offset_of!(mjData, mocap_quat) - 161728usize];
    ["Offset of field: mjData::qacc"][::core::mem::offset_of!(mjData, qacc) - 161736usize];
    ["Offset of field: mjData::act_dot"][::core::mem::offset_of!(mjData, act_dot) - 161744usize];
    ["Offset of field: mjData::userdata"][::core::mem::offset_of!(mjData, userdata) - 161752usize];
    ["Offset of field: mjData::sensordata"]
        [::core::mem::offset_of!(mjData, sensordata) - 161760usize];
    ["Offset of field: mjData::plugin"][::core::mem::offset_of!(mjData, plugin) - 161768usize];
    ["Offset of field: mjData::plugin_data"]
        [::core::mem::offset_of!(mjData, plugin_data) - 161776usize];
    ["Offset of field: mjData::xpos"][::core::mem::offset_of!(mjData, xpos) - 161784usize];
    ["Offset of field: mjData::xquat"][::core::mem::offset_of!(mjData, xquat) - 161792usize];
    ["Offset of field: mjData::xmat"][::core::mem::offset_of!(mjData, xmat) - 161800usize];
    ["Offset of field: mjData::xipos"][::core::mem::offset_of!(mjData, xipos) - 161808usize];
    ["Offset of field: mjData::ximat"][::core::mem::offset_of!(mjData, ximat) - 161816usize];
    ["Offset of field: mjData::xanchor"][::core::mem::offset_of!(mjData, xanchor) - 161824usize];
    ["Offset of field: mjData::xaxis"][::core::mem::offset_of!(mjData, xaxis) - 161832usize];
    ["Offset of field: mjData::geom_xpos"]
        [::core::mem::offset_of!(mjData, geom_xpos) - 161840usize];
    ["Offset of field: mjData::geom_xmat"]
        [::core::mem::offset_of!(mjData, geom_xmat) - 161848usize];
    ["Offset of field: mjData::site_xpos"]
        [::core::mem::offset_of!(mjData, site_xpos) - 161856usize];
    ["Offset of field: mjData::site_xmat"]
        [::core::mem::offset_of!(mjData, site_xmat) - 161864usize];
    ["Offset of field: mjData::cam_xpos"][::core::mem::offset_of!(mjData, cam_xpos) - 161872usize];
    ["Offset of field: mjData::cam_xmat"][::core::mem::offset_of!(mjData, cam_xmat) - 161880usize];
    ["Offset of field: mjData::light_xpos"]
        [::core::mem::offset_of!(mjData, light_xpos) - 161888usize];
    ["Offset of field: mjData::light_xdir"]
        [::core::mem::offset_of!(mjData, light_xdir) - 161896usize];
    ["Offset of field: mjData::subtree_com"]
        [::core::mem::offset_of!(mjData, subtree_com) - 161904usize];
    ["Offset of field: mjData::cdof"][::core::mem::offset_of!(mjData, cdof) - 161912usize];
    ["Offset of field: mjData::cinert"][::core::mem::offset_of!(mjData, cinert) - 161920usize];
    ["Offset of field: mjData::flexvert_xpos"]
        [::core::mem::offset_of!(mjData, flexvert_xpos) - 161928usize];
    ["Offset of field: mjData::flexelem_aabb"]
        [::core::mem::offset_of!(mjData, flexelem_aabb) - 161936usize];
    ["Offset of field: mjData::flexedge_J_rownnz"]
        [::core::mem::offset_of!(mjData, flexedge_J_rownnz) - 161944usize];
    ["Offset of field: mjData::flexedge_J_rowadr"]
        [::core::mem::offset_of!(mjData, flexedge_J_rowadr) - 161952usize];
    ["Offset of field: mjData::flexedge_J_colind"]
        [::core::mem::offset_of!(mjData, flexedge_J_colind) - 161960usize];
    ["Offset of field: mjData::flexedge_J"]
        [::core::mem::offset_of!(mjData, flexedge_J) - 161968usize];
    ["Offset of field: mjData::flexedge_length"]
        [::core::mem::offset_of!(mjData, flexedge_length) - 161976usize];
    ["Offset of field: mjData::ten_wrapadr"]
        [::core::mem::offset_of!(mjData, ten_wrapadr) - 161984usize];
    ["Offset of field: mjData::ten_wrapnum"]
        [::core::mem::offset_of!(mjData, ten_wrapnum) - 161992usize];
    ["Offset of field: mjData::ten_J_rownnz"]
        [::core::mem::offset_of!(mjData, ten_J_rownnz) - 162000usize];
    ["Offset of field: mjData::ten_J_rowadr"]
        [::core::mem::offset_of!(mjData, ten_J_rowadr) - 162008usize];
    ["Offset of field: mjData::ten_J_colind"]
        [::core::mem::offset_of!(mjData, ten_J_colind) - 162016usize];
    ["Offset of field: mjData::ten_J"][::core::mem::offset_of!(mjData, ten_J) - 162024usize];
    ["Offset of field: mjData::ten_length"]
        [::core::mem::offset_of!(mjData, ten_length) - 162032usize];
    ["Offset of field: mjData::wrap_obj"][::core::mem::offset_of!(mjData, wrap_obj) - 162040usize];
    ["Offset of field: mjData::wrap_xpos"]
        [::core::mem::offset_of!(mjData, wrap_xpos) - 162048usize];
    ["Offset of field: mjData::actuator_length"]
        [::core::mem::offset_of!(mjData, actuator_length) - 162056usize];
    ["Offset of field: mjData::moment_rownnz"]
        [::core::mem::offset_of!(mjData, moment_rownnz) - 162064usize];
    ["Offset of field: mjData::moment_rowadr"]
        [::core::mem::offset_of!(mjData, moment_rowadr) - 162072usize];
    ["Offset of field: mjData::moment_colind"]
        [::core::mem::offset_of!(mjData, moment_colind) - 162080usize];
    ["Offset of field: mjData::actuator_moment"]
        [::core::mem::offset_of!(mjData, actuator_moment) - 162088usize];
    ["Offset of field: mjData::crb"][::core::mem::offset_of!(mjData, crb) - 162096usize];
    ["Offset of field: mjData::qM"][::core::mem::offset_of!(mjData, qM) - 162104usize];
    ["Offset of field: mjData::qLD"][::core::mem::offset_of!(mjData, qLD) - 162112usize];
    ["Offset of field: mjData::qLDiagInv"]
        [::core::mem::offset_of!(mjData, qLDiagInv) - 162120usize];
    ["Offset of field: mjData::bvh_aabb_dyn"]
        [::core::mem::offset_of!(mjData, bvh_aabb_dyn) - 162128usize];
    ["Offset of field: mjData::bvh_active"]
        [::core::mem::offset_of!(mjData, bvh_active) - 162136usize];
    ["Offset of field: mjData::flexedge_velocity"]
        [::core::mem::offset_of!(mjData, flexedge_velocity) - 162144usize];
    ["Offset of field: mjData::ten_velocity"]
        [::core::mem::offset_of!(mjData, ten_velocity) - 162152usize];
    ["Offset of field: mjData::actuator_velocity"]
        [::core::mem::offset_of!(mjData, actuator_velocity) - 162160usize];
    ["Offset of field: mjData::cvel"][::core::mem::offset_of!(mjData, cvel) - 162168usize];
    ["Offset of field: mjData::cdof_dot"][::core::mem::offset_of!(mjData, cdof_dot) - 162176usize];
    ["Offset of field: mjData::qfrc_bias"]
        [::core::mem::offset_of!(mjData, qfrc_bias) - 162184usize];
    ["Offset of field: mjData::qfrc_spring"]
        [::core::mem::offset_of!(mjData, qfrc_spring) - 162192usize];
    ["Offset of field: mjData::qfrc_damper"]
        [::core::mem::offset_of!(mjData, qfrc_damper) - 162200usize];
    ["Offset of field: mjData::qfrc_gravcomp"]
        [::core::mem::offset_of!(mjData, qfrc_gravcomp) - 162208usize];
    ["Offset of field: mjData::qfrc_fluid"]
        [::core::mem::offset_of!(mjData, qfrc_fluid) - 162216usize];
    ["Offset of field: mjData::qfrc_passive"]
        [::core::mem::offset_of!(mjData, qfrc_passive) - 162224usize];
    ["Offset of field: mjData::subtree_linvel"]
        [::core::mem::offset_of!(mjData, subtree_linvel) - 162232usize];
    ["Offset of field: mjData::subtree_angmom"]
        [::core::mem::offset_of!(mjData, subtree_angmom) - 162240usize];
    ["Offset of field: mjData::qH"][::core::mem::offset_of!(mjData, qH) - 162248usize];
    ["Offset of field: mjData::qHDiagInv"]
        [::core::mem::offset_of!(mjData, qHDiagInv) - 162256usize];
    ["Offset of field: mjData::B_rownnz"][::core::mem::offset_of!(mjData, B_rownnz) - 162264usize];
    ["Offset of field: mjData::B_rowadr"][::core::mem::offset_of!(mjData, B_rowadr) - 162272usize];
    ["Offset of field: mjData::B_colind"][::core::mem::offset_of!(mjData, B_colind) - 162280usize];
    ["Offset of field: mjData::M_rownnz"][::core::mem::offset_of!(mjData, M_rownnz) - 162288usize];
    ["Offset of field: mjData::M_rowadr"][::core::mem::offset_of!(mjData, M_rowadr) - 162296usize];
    ["Offset of field: mjData::M_colind"][::core::mem::offset_of!(mjData, M_colind) - 162304usize];
    ["Offset of field: mjData::mapM2M"][::core::mem::offset_of!(mjData, mapM2M) - 162312usize];
    ["Offset of field: mjData::C_rownnz"][::core::mem::offset_of!(mjData, C_rownnz) - 162320usize];
    ["Offset of field: mjData::C_rowadr"][::core::mem::offset_of!(mjData, C_rowadr) - 162328usize];
    ["Offset of field: mjData::C_colind"][::core::mem::offset_of!(mjData, C_colind) - 162336usize];
    ["Offset of field: mjData::mapM2C"][::core::mem::offset_of!(mjData, mapM2C) - 162344usize];
    ["Offset of field: mjData::D_rownnz"][::core::mem::offset_of!(mjData, D_rownnz) - 162352usize];
    ["Offset of field: mjData::D_rowadr"][::core::mem::offset_of!(mjData, D_rowadr) - 162360usize];
    ["Offset of field: mjData::D_diag"][::core::mem::offset_of!(mjData, D_diag) - 162368usize];
    ["Offset of field: mjData::D_colind"][::core::mem::offset_of!(mjData, D_colind) - 162376usize];
    ["Offset of field: mjData::mapM2D"][::core::mem::offset_of!(mjData, mapM2D) - 162384usize];
    ["Offset of field: mjData::mapD2M"][::core::mem::offset_of!(mjData, mapD2M) - 162392usize];
    ["Offset of field: mjData::qDeriv"][::core::mem::offset_of!(mjData, qDeriv) - 162400usize];
    ["Offset of field: mjData::qLU"][::core::mem::offset_of!(mjData, qLU) - 162408usize];
    ["Offset of field: mjData::actuator_force"]
        [::core::mem::offset_of!(mjData, actuator_force) - 162416usize];
    ["Offset of field: mjData::qfrc_actuator"]
        [::core::mem::offset_of!(mjData, qfrc_actuator) - 162424usize];
    ["Offset of field: mjData::qfrc_smooth"]
        [::core::mem::offset_of!(mjData, qfrc_smooth) - 162432usize];
    ["Offset of field: mjData::qacc_smooth"]
        [::core::mem::offset_of!(mjData, qacc_smooth) - 162440usize];
    ["Offset of field: mjData::qfrc_constraint"]
        [::core::mem::offset_of!(mjData, qfrc_constraint) - 162448usize];
    ["Offset of field: mjData::qfrc_inverse"]
        [::core::mem::offset_of!(mjData, qfrc_inverse) - 162456usize];
    ["Offset of field: mjData::cacc"][::core::mem::offset_of!(mjData, cacc) - 162464usize];
    ["Offset of field: mjData::cfrc_int"][::core::mem::offset_of!(mjData, cfrc_int) - 162472usize];
    ["Offset of field: mjData::cfrc_ext"][::core::mem::offset_of!(mjData, cfrc_ext) - 162480usize];
    ["Offset of field: mjData::contact"][::core::mem::offset_of!(mjData, contact) - 162488usize];
    ["Offset of field: mjData::efc_type"][::core::mem::offset_of!(mjData, efc_type) - 162496usize];
    ["Offset of field: mjData::efc_id"][::core::mem::offset_of!(mjData, efc_id) - 162504usize];
    ["Offset of field: mjData::efc_J_rownnz"]
        [::core::mem::offset_of!(mjData, efc_J_rownnz) - 162512usize];
    ["Offset of field: mjData::efc_J_rowadr"]
        [::core::mem::offset_of!(mjData, efc_J_rowadr) - 162520usize];
    ["Offset of field: mjData::efc_J_rowsuper"]
        [::core::mem::offset_of!(mjData, efc_J_rowsuper) - 162528usize];
    ["Offset of field: mjData::efc_J_colind"]
        [::core::mem::offset_of!(mjData, efc_J_colind) - 162536usize];
    ["Offset of field: mjData::efc_JT_rownnz"]
        [::core::mem::offset_of!(mjData, efc_JT_rownnz) - 162544usize];
    ["Offset of field: mjData::efc_JT_rowadr"]
        [::core::mem::offset_of!(mjData, efc_JT_rowadr) - 162552usize];
    ["Offset of field: mjData::efc_JT_rowsuper"]
        [::core::mem::offset_of!(mjData, efc_JT_rowsuper) - 162560usize];
    ["Offset of field: mjData::efc_JT_colind"]
        [::core::mem::offset_of!(mjData, efc_JT_colind) - 162568usize];
    ["Offset of field: mjData::efc_J"][::core::mem::offset_of!(mjData, efc_J) - 162576usize];
    ["Offset of field: mjData::efc_JT"][::core::mem::offset_of!(mjData, efc_JT) - 162584usize];
    ["Offset of field: mjData::efc_pos"][::core::mem::offset_of!(mjData, efc_pos) - 162592usize];
    ["Offset of field: mjData::efc_margin"]
        [::core::mem::offset_of!(mjData, efc_margin) - 162600usize];
    ["Offset of field: mjData::efc_frictionloss"]
        [::core::mem::offset_of!(mjData, efc_frictionloss) - 162608usize];
    ["Offset of field: mjData::efc_diagApprox"]
        [::core::mem::offset_of!(mjData, efc_diagApprox) - 162616usize];
    ["Offset of field: mjData::efc_KBIP"][::core::mem::offset_of!(mjData, efc_KBIP) - 162624usize];
    ["Offset of field: mjData::efc_D"][::core::mem::offset_of!(mjData, efc_D) - 162632usize];
    ["Offset of field: mjData::efc_R"][::core::mem::offset_of!(mjData, efc_R) - 162640usize];
    ["Offset of field: mjData::tendon_efcadr"]
        [::core::mem::offset_of!(mjData, tendon_efcadr) - 162648usize];
    ["Offset of field: mjData::dof_island"]
        [::core::mem::offset_of!(mjData, dof_island) - 162656usize];
    ["Offset of field: mjData::island_dofnum"]
        [::core::mem::offset_of!(mjData, island_dofnum) - 162664usize];
    ["Offset of field: mjData::island_dofadr"]
        [::core::mem::offset_of!(mjData, island_dofadr) - 162672usize];
    ["Offset of field: mjData::island_dofind"]
        [::core::mem::offset_of!(mjData, island_dofind) - 162680usize];
    ["Offset of field: mjData::dof_islandind"]
        [::core::mem::offset_of!(mjData, dof_islandind) - 162688usize];
    ["Offset of field: mjData::efc_island"]
        [::core::mem::offset_of!(mjData, efc_island) - 162696usize];
    ["Offset of field: mjData::island_efcnum"]
        [::core::mem::offset_of!(mjData, island_efcnum) - 162704usize];
    ["Offset of field: mjData::island_efcadr"]
        [::core::mem::offset_of!(mjData, island_efcadr) - 162712usize];
    ["Offset of field: mjData::island_efcind"]
        [::core::mem::offset_of!(mjData, island_efcind) - 162720usize];
    ["Offset of field: mjData::efc_AR_rownnz"]
        [::core::mem::offset_of!(mjData, efc_AR_rownnz) - 162728usize];
    ["Offset of field: mjData::efc_AR_rowadr"]
        [::core::mem::offset_of!(mjData, efc_AR_rowadr) - 162736usize];
    ["Offset of field: mjData::efc_AR_colind"]
        [::core::mem::offset_of!(mjData, efc_AR_colind) - 162744usize];
    ["Offset of field: mjData::efc_AR"][::core::mem::offset_of!(mjData, efc_AR) - 162752usize];
    ["Offset of field: mjData::efc_vel"][::core::mem::offset_of!(mjData, efc_vel) - 162760usize];
    ["Offset of field: mjData::efc_aref"][::core::mem::offset_of!(mjData, efc_aref) - 162768usize];
    ["Offset of field: mjData::efc_b"][::core::mem::offset_of!(mjData, efc_b) - 162776usize];
    ["Offset of field: mjData::efc_force"]
        [::core::mem::offset_of!(mjData, efc_force) - 162784usize];
    ["Offset of field: mjData::efc_state"]
        [::core::mem::offset_of!(mjData, efc_state) - 162792usize];
    ["Offset of field: mjData::threadpool"]
        [::core::mem::offset_of!(mjData, threadpool) - 162800usize];
    ["Offset of field: mjData::signature"]
        [::core::mem::offset_of!(mjData, signature) - 162808usize];
};
impl Default for mjData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjfGeneric =
    ::core::option::Option<unsafe extern "C" fn(m: *const mjModel, d: *mut mjData)>;
pub type mjfConFilt = ::core::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *mut mjData,
        geom1: ::core::ffi::c_int,
        geom2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type mjfSensor = ::core::option::Option<
    unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, stage: ::core::ffi::c_int),
>;
pub type mjfTime = ::core::option::Option<unsafe extern "C" fn() -> mjtNum>;
pub type mjfAct = ::core::option::Option<
    unsafe extern "C" fn(m: *const mjModel, d: *const mjData, id: ::core::ffi::c_int) -> mjtNum,
>;
pub type mjfCollision = ::core::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *const mjData,
        con: *mut mjContact,
        g1: ::core::ffi::c_int,
        g2: ::core::ffi::c_int,
        margin: mjtNum,
    ) -> ::core::ffi::c_int,
>;
impl mjtCatBit {
    pub const STATIC: mjtCatBit = mjtCatBit(1);
    pub const DYNAMIC: mjtCatBit = mjtCatBit(2);
    pub const DECOR: mjtCatBit = mjtCatBit(4);
    pub const ALL: mjtCatBit = mjtCatBit(7);
}
impl ::core::ops::BitOr<mjtCatBit> for mjtCatBit {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        mjtCatBit(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for mjtCatBit {
    #[inline]
    fn bitor_assign(&mut self, rhs: mjtCatBit) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<mjtCatBit> for mjtCatBit {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        mjtCatBit(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for mjtCatBit {
    #[inline]
    fn bitand_assign(&mut self, rhs: mjtCatBit) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtCatBit(pub(crate) ::core::ffi::c_uint);
impl mjtMouse {
    pub const NONE: mjtMouse = mjtMouse(0);
    pub const ROTATE_V: mjtMouse = mjtMouse(1);
    pub const ROTATE_H: mjtMouse = mjtMouse(2);
    pub const MOVE_V: mjtMouse = mjtMouse(3);
    pub const MOVE_H: mjtMouse = mjtMouse(4);
    pub const ZOOM: mjtMouse = mjtMouse(5);
    pub const SELECT: mjtMouse = mjtMouse(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtMouse(pub(crate) ::core::ffi::c_uint);
impl mjtPertBit {
    pub const TRANSLATE: mjtPertBit = mjtPertBit(1);
    pub const ROTATE: mjtPertBit = mjtPertBit(2);
}
impl ::core::ops::BitOr<mjtPertBit> for mjtPertBit {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        mjtPertBit(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for mjtPertBit {
    #[inline]
    fn bitor_assign(&mut self, rhs: mjtPertBit) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<mjtPertBit> for mjtPertBit {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        mjtPertBit(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for mjtPertBit {
    #[inline]
    fn bitand_assign(&mut self, rhs: mjtPertBit) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtPertBit(pub(crate) ::core::ffi::c_uint);
impl mjtCamera {
    pub const FREE: mjtCamera = mjtCamera(0);
    pub const TRACKING: mjtCamera = mjtCamera(1);
    pub const FIXED: mjtCamera = mjtCamera(2);
    pub const USER: mjtCamera = mjtCamera(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtCamera(pub(crate) ::core::ffi::c_uint);
pub const mjNLABEL: usize = mjtLabel::mjNLABEL.0 as usize;
impl mjtLabel {
    pub const NONE: mjtLabel = mjtLabel(0);
    pub const BODY: mjtLabel = mjtLabel(1);
    pub const JOINT: mjtLabel = mjtLabel(2);
    pub const GEOM: mjtLabel = mjtLabel(3);
    pub const SITE: mjtLabel = mjtLabel(4);
    pub const CAMERA: mjtLabel = mjtLabel(5);
    pub const LIGHT: mjtLabel = mjtLabel(6);
    pub const TENDON: mjtLabel = mjtLabel(7);
    pub const ACTUATOR: mjtLabel = mjtLabel(8);
    pub const CONSTRAINT: mjtLabel = mjtLabel(9);
    pub const FLEX: mjtLabel = mjtLabel(10);
    pub const SKIN: mjtLabel = mjtLabel(11);
    pub const SELECTION: mjtLabel = mjtLabel(12);
    pub const SELPNT: mjtLabel = mjtLabel(13);
    pub const CONTACTPOINT: mjtLabel = mjtLabel(14);
    pub const CONTACTFORCE: mjtLabel = mjtLabel(15);
    pub const ISLAND: mjtLabel = mjtLabel(16);
    pub(crate) const mjNLABEL: mjtLabel = mjtLabel(17);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtLabel(pub(crate) ::core::ffi::c_uint);
pub const mjNFRAME: usize = mjtFrame::mjNFRAME.0 as usize;
impl mjtFrame {
    pub const NONE: mjtFrame = mjtFrame(0);
    pub const BODY: mjtFrame = mjtFrame(1);
    pub const GEOM: mjtFrame = mjtFrame(2);
    pub const SITE: mjtFrame = mjtFrame(3);
    pub const CAMERA: mjtFrame = mjtFrame(4);
    pub const LIGHT: mjtFrame = mjtFrame(5);
    pub const CONTACT: mjtFrame = mjtFrame(6);
    pub const WORLD: mjtFrame = mjtFrame(7);
    pub(crate) const mjNFRAME: mjtFrame = mjtFrame(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtFrame(pub(crate) ::core::ffi::c_uint);
pub const mjNVISFLAG: usize = mjtVisFlag::mjNVISFLAG.0 as usize;
impl mjtVisFlag {
    pub const CONVEXHULL: mjtVisFlag = mjtVisFlag(0);
    pub const TEXTURE: mjtVisFlag = mjtVisFlag(1);
    pub const JOINT: mjtVisFlag = mjtVisFlag(2);
    pub const CAMERA: mjtVisFlag = mjtVisFlag(3);
    pub const ACTUATOR: mjtVisFlag = mjtVisFlag(4);
    pub const ACTIVATION: mjtVisFlag = mjtVisFlag(5);
    pub const LIGHT: mjtVisFlag = mjtVisFlag(6);
    pub const TENDON: mjtVisFlag = mjtVisFlag(7);
    pub const RANGEFINDER: mjtVisFlag = mjtVisFlag(8);
    pub const CONSTRAINT: mjtVisFlag = mjtVisFlag(9);
    pub const INERTIA: mjtVisFlag = mjtVisFlag(10);
    pub const SCLINERTIA: mjtVisFlag = mjtVisFlag(11);
    pub const PERTFORCE: mjtVisFlag = mjtVisFlag(12);
    pub const PERTOBJ: mjtVisFlag = mjtVisFlag(13);
    pub const CONTACTPOINT: mjtVisFlag = mjtVisFlag(14);
    pub const ISLAND: mjtVisFlag = mjtVisFlag(15);
    pub const CONTACTFORCE: mjtVisFlag = mjtVisFlag(16);
    pub const CONTACTSPLIT: mjtVisFlag = mjtVisFlag(17);
    pub const TRANSPARENT: mjtVisFlag = mjtVisFlag(18);
    pub const AUTOCONNECT: mjtVisFlag = mjtVisFlag(19);
    pub const COM: mjtVisFlag = mjtVisFlag(20);
    pub const SELECT: mjtVisFlag = mjtVisFlag(21);
    pub const STATIC: mjtVisFlag = mjtVisFlag(22);
    pub const SKIN: mjtVisFlag = mjtVisFlag(23);
    pub const FLEXVERT: mjtVisFlag = mjtVisFlag(24);
    pub const FLEXEDGE: mjtVisFlag = mjtVisFlag(25);
    pub const FLEXFACE: mjtVisFlag = mjtVisFlag(26);
    pub const FLEXSKIN: mjtVisFlag = mjtVisFlag(27);
    pub const BODYBVH: mjtVisFlag = mjtVisFlag(28);
    pub const FLEXBVH: mjtVisFlag = mjtVisFlag(29);
    pub const MESHBVH: mjtVisFlag = mjtVisFlag(30);
    pub const SDFITER: mjtVisFlag = mjtVisFlag(31);
    pub(crate) const mjNVISFLAG: mjtVisFlag = mjtVisFlag(32);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtVisFlag(pub(crate) ::core::ffi::c_uint);
pub const mjNRNDFLAG: usize = mjtRndFlag::mjNRNDFLAG.0 as usize;
impl mjtRndFlag {
    pub const SHADOW: mjtRndFlag = mjtRndFlag(0);
    pub const WIREFRAME: mjtRndFlag = mjtRndFlag(1);
    pub const REFLECTION: mjtRndFlag = mjtRndFlag(2);
    pub const ADDITIVE: mjtRndFlag = mjtRndFlag(3);
    pub const SKYBOX: mjtRndFlag = mjtRndFlag(4);
    pub const FOG: mjtRndFlag = mjtRndFlag(5);
    pub const HAZE: mjtRndFlag = mjtRndFlag(6);
    pub const SEGMENT: mjtRndFlag = mjtRndFlag(7);
    pub const IDCOLOR: mjtRndFlag = mjtRndFlag(8);
    pub const CULL_FACE: mjtRndFlag = mjtRndFlag(9);
    pub(crate) const mjNRNDFLAG: mjtRndFlag = mjtRndFlag(10);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtRndFlag(pub(crate) ::core::ffi::c_uint);
impl mjtStereo {
    pub const NONE: mjtStereo = mjtStereo(0);
    pub const QUADBUFFERED: mjtStereo = mjtStereo(1);
    pub const SIDEBYSIDE: mjtStereo = mjtStereo(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtStereo(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvPerturb {
    pub(crate) select: ::core::ffi::c_int,
    pub(crate) flexselect: ::core::ffi::c_int,
    pub(crate) skinselect: ::core::ffi::c_int,
    pub(crate) active: ::core::ffi::c_int,
    pub(crate) active2: ::core::ffi::c_int,
    pub(crate) refpos: [mjtNum; 3usize],
    pub(crate) refquat: [mjtNum; 4usize],
    pub(crate) refselpos: [mjtNum; 3usize],
    pub(crate) localpos: [mjtNum; 3usize],
    pub(crate) localmass: mjtNum,
    pub(crate) scale: mjtNum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvPerturb"][::core::mem::size_of::<mjvPerturb>() - 144usize];
    ["Alignment of mjvPerturb"][::core::mem::align_of::<mjvPerturb>() - 8usize];
    ["Offset of field: mjvPerturb::select"][::core::mem::offset_of!(mjvPerturb, select) - 0usize];
    ["Offset of field: mjvPerturb::flexselect"]
        [::core::mem::offset_of!(mjvPerturb, flexselect) - 4usize];
    ["Offset of field: mjvPerturb::skinselect"]
        [::core::mem::offset_of!(mjvPerturb, skinselect) - 8usize];
    ["Offset of field: mjvPerturb::active"][::core::mem::offset_of!(mjvPerturb, active) - 12usize];
    ["Offset of field: mjvPerturb::active2"]
        [::core::mem::offset_of!(mjvPerturb, active2) - 16usize];
    ["Offset of field: mjvPerturb::refpos"][::core::mem::offset_of!(mjvPerturb, refpos) - 24usize];
    ["Offset of field: mjvPerturb::refquat"]
        [::core::mem::offset_of!(mjvPerturb, refquat) - 48usize];
    ["Offset of field: mjvPerturb::refselpos"]
        [::core::mem::offset_of!(mjvPerturb, refselpos) - 80usize];
    ["Offset of field: mjvPerturb::localpos"]
        [::core::mem::offset_of!(mjvPerturb, localpos) - 104usize];
    ["Offset of field: mjvPerturb::localmass"]
        [::core::mem::offset_of!(mjvPerturb, localmass) - 128usize];
    ["Offset of field: mjvPerturb::scale"][::core::mem::offset_of!(mjvPerturb, scale) - 136usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvCamera {
    pub(crate) type_: ::core::ffi::c_int,
    pub(crate) fixedcamid: ::core::ffi::c_int,
    pub(crate) trackbodyid: ::core::ffi::c_int,
    pub(crate) lookat: [mjtNum; 3usize],
    pub(crate) distance: mjtNum,
    pub(crate) azimuth: mjtNum,
    pub(crate) elevation: mjtNum,
    pub(crate) orthographic: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvCamera"][::core::mem::size_of::<mjvCamera>() - 72usize];
    ["Alignment of mjvCamera"][::core::mem::align_of::<mjvCamera>() - 8usize];
    ["Offset of field: mjvCamera::type_"][::core::mem::offset_of!(mjvCamera, type_) - 0usize];
    ["Offset of field: mjvCamera::fixedcamid"]
        [::core::mem::offset_of!(mjvCamera, fixedcamid) - 4usize];
    ["Offset of field: mjvCamera::trackbodyid"]
        [::core::mem::offset_of!(mjvCamera, trackbodyid) - 8usize];
    ["Offset of field: mjvCamera::lookat"][::core::mem::offset_of!(mjvCamera, lookat) - 16usize];
    ["Offset of field: mjvCamera::distance"]
        [::core::mem::offset_of!(mjvCamera, distance) - 40usize];
    ["Offset of field: mjvCamera::azimuth"][::core::mem::offset_of!(mjvCamera, azimuth) - 48usize];
    ["Offset of field: mjvCamera::elevation"]
        [::core::mem::offset_of!(mjvCamera, elevation) - 56usize];
    ["Offset of field: mjvCamera::orthographic"]
        [::core::mem::offset_of!(mjvCamera, orthographic) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvGLCamera {
    pub(crate) pos: [f32; 3usize],
    pub(crate) forward: [f32; 3usize],
    pub(crate) up: [f32; 3usize],
    pub(crate) frustum_center: f32,
    pub(crate) frustum_width: f32,
    pub(crate) frustum_bottom: f32,
    pub(crate) frustum_top: f32,
    pub(crate) frustum_near: f32,
    pub(crate) frustum_far: f32,
    pub(crate) orthographic: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvGLCamera"][::core::mem::size_of::<mjvGLCamera>() - 64usize];
    ["Alignment of mjvGLCamera"][::core::mem::align_of::<mjvGLCamera>() - 4usize];
    ["Offset of field: mjvGLCamera::pos"][::core::mem::offset_of!(mjvGLCamera, pos) - 0usize];
    ["Offset of field: mjvGLCamera::forward"]
        [::core::mem::offset_of!(mjvGLCamera, forward) - 12usize];
    ["Offset of field: mjvGLCamera::up"][::core::mem::offset_of!(mjvGLCamera, up) - 24usize];
    ["Offset of field: mjvGLCamera::frustum_center"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_center) - 36usize];
    ["Offset of field: mjvGLCamera::frustum_width"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_width) - 40usize];
    ["Offset of field: mjvGLCamera::frustum_bottom"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_bottom) - 44usize];
    ["Offset of field: mjvGLCamera::frustum_top"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_top) - 48usize];
    ["Offset of field: mjvGLCamera::frustum_near"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_near) - 52usize];
    ["Offset of field: mjvGLCamera::frustum_far"]
        [::core::mem::offset_of!(mjvGLCamera, frustum_far) - 56usize];
    ["Offset of field: mjvGLCamera::orthographic"]
        [::core::mem::offset_of!(mjvGLCamera, orthographic) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvGeom {
    pub(crate) type_: ::core::ffi::c_int,
    pub(crate) dataid: ::core::ffi::c_int,
    pub(crate) objtype: ::core::ffi::c_int,
    pub(crate) objid: ::core::ffi::c_int,
    pub(crate) category: ::core::ffi::c_int,
    pub(crate) matid: ::core::ffi::c_int,
    pub(crate) texcoord: ::core::ffi::c_int,
    pub(crate) segid: ::core::ffi::c_int,
    pub(crate) size: [f32; 3usize],
    pub(crate) pos: [f32; 3usize],
    pub(crate) mat: [f32; 9usize],
    pub(crate) rgba: [f32; 4usize],
    pub(crate) emission: f32,
    pub(crate) specular: f32,
    pub(crate) shininess: f32,
    pub(crate) reflectance: f32,
    pub(crate) label: [::core::ffi::c_char; 100usize],
    pub(crate) camdist: f32,
    pub(crate) modelrbound: f32,
    pub(crate) transparent: mjtByte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvGeom"][::core::mem::size_of::<mjvGeom>() - 236usize];
    ["Alignment of mjvGeom"][::core::mem::align_of::<mjvGeom>() - 4usize];
    ["Offset of field: mjvGeom::type_"][::core::mem::offset_of!(mjvGeom, type_) - 0usize];
    ["Offset of field: mjvGeom::dataid"][::core::mem::offset_of!(mjvGeom, dataid) - 4usize];
    ["Offset of field: mjvGeom::objtype"][::core::mem::offset_of!(mjvGeom, objtype) - 8usize];
    ["Offset of field: mjvGeom::objid"][::core::mem::offset_of!(mjvGeom, objid) - 12usize];
    ["Offset of field: mjvGeom::category"][::core::mem::offset_of!(mjvGeom, category) - 16usize];
    ["Offset of field: mjvGeom::matid"][::core::mem::offset_of!(mjvGeom, matid) - 20usize];
    ["Offset of field: mjvGeom::texcoord"][::core::mem::offset_of!(mjvGeom, texcoord) - 24usize];
    ["Offset of field: mjvGeom::segid"][::core::mem::offset_of!(mjvGeom, segid) - 28usize];
    ["Offset of field: mjvGeom::size"][::core::mem::offset_of!(mjvGeom, size) - 32usize];
    ["Offset of field: mjvGeom::pos"][::core::mem::offset_of!(mjvGeom, pos) - 44usize];
    ["Offset of field: mjvGeom::mat"][::core::mem::offset_of!(mjvGeom, mat) - 56usize];
    ["Offset of field: mjvGeom::rgba"][::core::mem::offset_of!(mjvGeom, rgba) - 92usize];
    ["Offset of field: mjvGeom::emission"][::core::mem::offset_of!(mjvGeom, emission) - 108usize];
    ["Offset of field: mjvGeom::specular"][::core::mem::offset_of!(mjvGeom, specular) - 112usize];
    ["Offset of field: mjvGeom::shininess"][::core::mem::offset_of!(mjvGeom, shininess) - 116usize];
    ["Offset of field: mjvGeom::reflectance"]
        [::core::mem::offset_of!(mjvGeom, reflectance) - 120usize];
    ["Offset of field: mjvGeom::label"][::core::mem::offset_of!(mjvGeom, label) - 124usize];
    ["Offset of field: mjvGeom::camdist"][::core::mem::offset_of!(mjvGeom, camdist) - 224usize];
    ["Offset of field: mjvGeom::modelrbound"]
        [::core::mem::offset_of!(mjvGeom, modelrbound) - 228usize];
    ["Offset of field: mjvGeom::transparent"]
        [::core::mem::offset_of!(mjvGeom, transparent) - 232usize];
};
impl Default for mjvGeom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvLight {
    pub(crate) pos: [f32; 3usize],
    pub(crate) dir: [f32; 3usize],
    pub(crate) attenuation: [f32; 3usize],
    pub(crate) cutoff: f32,
    pub(crate) exponent: f32,
    pub(crate) ambient: [f32; 3usize],
    pub(crate) diffuse: [f32; 3usize],
    pub(crate) specular: [f32; 3usize],
    pub(crate) headlight: mjtByte,
    pub(crate) directional: mjtByte,
    pub(crate) castshadow: mjtByte,
    pub(crate) bulbradius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvLight"][::core::mem::size_of::<mjvLight>() - 88usize];
    ["Alignment of mjvLight"][::core::mem::align_of::<mjvLight>() - 4usize];
    ["Offset of field: mjvLight::pos"][::core::mem::offset_of!(mjvLight, pos) - 0usize];
    ["Offset of field: mjvLight::dir"][::core::mem::offset_of!(mjvLight, dir) - 12usize];
    ["Offset of field: mjvLight::attenuation"]
        [::core::mem::offset_of!(mjvLight, attenuation) - 24usize];
    ["Offset of field: mjvLight::cutoff"][::core::mem::offset_of!(mjvLight, cutoff) - 36usize];
    ["Offset of field: mjvLight::exponent"][::core::mem::offset_of!(mjvLight, exponent) - 40usize];
    ["Offset of field: mjvLight::ambient"][::core::mem::offset_of!(mjvLight, ambient) - 44usize];
    ["Offset of field: mjvLight::diffuse"][::core::mem::offset_of!(mjvLight, diffuse) - 56usize];
    ["Offset of field: mjvLight::specular"][::core::mem::offset_of!(mjvLight, specular) - 68usize];
    ["Offset of field: mjvLight::headlight"]
        [::core::mem::offset_of!(mjvLight, headlight) - 80usize];
    ["Offset of field: mjvLight::directional"]
        [::core::mem::offset_of!(mjvLight, directional) - 81usize];
    ["Offset of field: mjvLight::castshadow"]
        [::core::mem::offset_of!(mjvLight, castshadow) - 82usize];
    ["Offset of field: mjvLight::bulbradius"]
        [::core::mem::offset_of!(mjvLight, bulbradius) - 84usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvOption {
    pub(crate) label: ::core::ffi::c_int,
    pub(crate) frame: ::core::ffi::c_int,
    pub(crate) geomgroup: [mjtByte; 6usize],
    pub(crate) sitegroup: [mjtByte; 6usize],
    pub(crate) jointgroup: [mjtByte; 6usize],
    pub(crate) tendongroup: [mjtByte; 6usize],
    pub(crate) actuatorgroup: [mjtByte; 6usize],
    pub(crate) flexgroup: [mjtByte; 6usize],
    pub(crate) skingroup: [mjtByte; 6usize],
    pub(crate) flags: [mjtByte; 32usize],
    pub(crate) bvh_depth: ::core::ffi::c_int,
    pub(crate) flex_layer: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvOption"][::core::mem::size_of::<mjvOption>() - 92usize];
    ["Alignment of mjvOption"][::core::mem::align_of::<mjvOption>() - 4usize];
    ["Offset of field: mjvOption::label"][::core::mem::offset_of!(mjvOption, label) - 0usize];
    ["Offset of field: mjvOption::frame"][::core::mem::offset_of!(mjvOption, frame) - 4usize];
    ["Offset of field: mjvOption::geomgroup"]
        [::core::mem::offset_of!(mjvOption, geomgroup) - 8usize];
    ["Offset of field: mjvOption::sitegroup"]
        [::core::mem::offset_of!(mjvOption, sitegroup) - 14usize];
    ["Offset of field: mjvOption::jointgroup"]
        [::core::mem::offset_of!(mjvOption, jointgroup) - 20usize];
    ["Offset of field: mjvOption::tendongroup"]
        [::core::mem::offset_of!(mjvOption, tendongroup) - 26usize];
    ["Offset of field: mjvOption::actuatorgroup"]
        [::core::mem::offset_of!(mjvOption, actuatorgroup) - 32usize];
    ["Offset of field: mjvOption::flexgroup"]
        [::core::mem::offset_of!(mjvOption, flexgroup) - 38usize];
    ["Offset of field: mjvOption::skingroup"]
        [::core::mem::offset_of!(mjvOption, skingroup) - 44usize];
    ["Offset of field: mjvOption::flags"][::core::mem::offset_of!(mjvOption, flags) - 50usize];
    ["Offset of field: mjvOption::bvh_depth"]
        [::core::mem::offset_of!(mjvOption, bvh_depth) - 84usize];
    ["Offset of field: mjvOption::flex_layer"]
        [::core::mem::offset_of!(mjvOption, flex_layer) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvScene {
    pub(crate) maxgeom: ::core::ffi::c_int,
    pub(crate) ngeom: ::core::ffi::c_int,
    pub(crate) geoms: *mut mjvGeom,
    pub(crate) geomorder: *mut ::core::ffi::c_int,
    pub(crate) nflex: ::core::ffi::c_int,
    pub(crate) flexedgeadr: *mut ::core::ffi::c_int,
    pub(crate) flexedgenum: *mut ::core::ffi::c_int,
    pub(crate) flexvertadr: *mut ::core::ffi::c_int,
    pub(crate) flexvertnum: *mut ::core::ffi::c_int,
    pub(crate) flexfaceadr: *mut ::core::ffi::c_int,
    pub(crate) flexfacenum: *mut ::core::ffi::c_int,
    pub(crate) flexfaceused: *mut ::core::ffi::c_int,
    pub(crate) flexedge: *mut ::core::ffi::c_int,
    pub(crate) flexvert: *mut f32,
    pub(crate) flexface: *mut f32,
    pub(crate) flexnormal: *mut f32,
    pub(crate) flextexcoord: *mut f32,
    pub(crate) flexvertopt: mjtByte,
    pub(crate) flexedgeopt: mjtByte,
    pub(crate) flexfaceopt: mjtByte,
    pub(crate) flexskinopt: mjtByte,
    pub(crate) nskin: ::core::ffi::c_int,
    pub(crate) skinfacenum: *mut ::core::ffi::c_int,
    pub(crate) skinvertadr: *mut ::core::ffi::c_int,
    pub(crate) skinvertnum: *mut ::core::ffi::c_int,
    pub(crate) skinvert: *mut f32,
    pub(crate) skinnormal: *mut f32,
    pub(crate) nlight: ::core::ffi::c_int,
    pub(crate) lights: [mjvLight; 100usize],
    pub(crate) camera: [mjvGLCamera; 2usize],
    pub(crate) enabletransform: mjtByte,
    pub(crate) translate: [f32; 3usize],
    pub(crate) rotate: [f32; 4usize],
    pub(crate) scale: f32,
    pub(crate) stereo: ::core::ffi::c_int,
    pub(crate) flags: [mjtByte; 10usize],
    pub(crate) framewidth: ::core::ffi::c_int,
    pub(crate) framergb: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvScene"][::core::mem::size_of::<mjvScene>() - 9176usize];
    ["Alignment of mjvScene"][::core::mem::align_of::<mjvScene>() - 8usize];
    ["Offset of field: mjvScene::maxgeom"][::core::mem::offset_of!(mjvScene, maxgeom) - 0usize];
    ["Offset of field: mjvScene::ngeom"][::core::mem::offset_of!(mjvScene, ngeom) - 4usize];
    ["Offset of field: mjvScene::geoms"][::core::mem::offset_of!(mjvScene, geoms) - 8usize];
    ["Offset of field: mjvScene::geomorder"]
        [::core::mem::offset_of!(mjvScene, geomorder) - 16usize];
    ["Offset of field: mjvScene::nflex"][::core::mem::offset_of!(mjvScene, nflex) - 24usize];
    ["Offset of field: mjvScene::flexedgeadr"]
        [::core::mem::offset_of!(mjvScene, flexedgeadr) - 32usize];
    ["Offset of field: mjvScene::flexedgenum"]
        [::core::mem::offset_of!(mjvScene, flexedgenum) - 40usize];
    ["Offset of field: mjvScene::flexvertadr"]
        [::core::mem::offset_of!(mjvScene, flexvertadr) - 48usize];
    ["Offset of field: mjvScene::flexvertnum"]
        [::core::mem::offset_of!(mjvScene, flexvertnum) - 56usize];
    ["Offset of field: mjvScene::flexfaceadr"]
        [::core::mem::offset_of!(mjvScene, flexfaceadr) - 64usize];
    ["Offset of field: mjvScene::flexfacenum"]
        [::core::mem::offset_of!(mjvScene, flexfacenum) - 72usize];
    ["Offset of field: mjvScene::flexfaceused"]
        [::core::mem::offset_of!(mjvScene, flexfaceused) - 80usize];
    ["Offset of field: mjvScene::flexedge"][::core::mem::offset_of!(mjvScene, flexedge) - 88usize];
    ["Offset of field: mjvScene::flexvert"][::core::mem::offset_of!(mjvScene, flexvert) - 96usize];
    ["Offset of field: mjvScene::flexface"][::core::mem::offset_of!(mjvScene, flexface) - 104usize];
    ["Offset of field: mjvScene::flexnormal"]
        [::core::mem::offset_of!(mjvScene, flexnormal) - 112usize];
    ["Offset of field: mjvScene::flextexcoord"]
        [::core::mem::offset_of!(mjvScene, flextexcoord) - 120usize];
    ["Offset of field: mjvScene::flexvertopt"]
        [::core::mem::offset_of!(mjvScene, flexvertopt) - 128usize];
    ["Offset of field: mjvScene::flexedgeopt"]
        [::core::mem::offset_of!(mjvScene, flexedgeopt) - 129usize];
    ["Offset of field: mjvScene::flexfaceopt"]
        [::core::mem::offset_of!(mjvScene, flexfaceopt) - 130usize];
    ["Offset of field: mjvScene::flexskinopt"]
        [::core::mem::offset_of!(mjvScene, flexskinopt) - 131usize];
    ["Offset of field: mjvScene::nskin"][::core::mem::offset_of!(mjvScene, nskin) - 132usize];
    ["Offset of field: mjvScene::skinfacenum"]
        [::core::mem::offset_of!(mjvScene, skinfacenum) - 136usize];
    ["Offset of field: mjvScene::skinvertadr"]
        [::core::mem::offset_of!(mjvScene, skinvertadr) - 144usize];
    ["Offset of field: mjvScene::skinvertnum"]
        [::core::mem::offset_of!(mjvScene, skinvertnum) - 152usize];
    ["Offset of field: mjvScene::skinvert"][::core::mem::offset_of!(mjvScene, skinvert) - 160usize];
    ["Offset of field: mjvScene::skinnormal"]
        [::core::mem::offset_of!(mjvScene, skinnormal) - 168usize];
    ["Offset of field: mjvScene::nlight"][::core::mem::offset_of!(mjvScene, nlight) - 176usize];
    ["Offset of field: mjvScene::lights"][::core::mem::offset_of!(mjvScene, lights) - 180usize];
    ["Offset of field: mjvScene::camera"][::core::mem::offset_of!(mjvScene, camera) - 8980usize];
    ["Offset of field: mjvScene::enabletransform"]
        [::core::mem::offset_of!(mjvScene, enabletransform) - 9108usize];
    ["Offset of field: mjvScene::translate"]
        [::core::mem::offset_of!(mjvScene, translate) - 9112usize];
    ["Offset of field: mjvScene::rotate"][::core::mem::offset_of!(mjvScene, rotate) - 9124usize];
    ["Offset of field: mjvScene::scale"][::core::mem::offset_of!(mjvScene, scale) - 9140usize];
    ["Offset of field: mjvScene::stereo"][::core::mem::offset_of!(mjvScene, stereo) - 9144usize];
    ["Offset of field: mjvScene::flags"][::core::mem::offset_of!(mjvScene, flags) - 9148usize];
    ["Offset of field: mjvScene::framewidth"]
        [::core::mem::offset_of!(mjvScene, framewidth) - 9160usize];
    ["Offset of field: mjvScene::framergb"]
        [::core::mem::offset_of!(mjvScene, framergb) - 9164usize];
};
impl Default for mjvScene {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvFigure {
    pub(crate) flg_legend: ::core::ffi::c_int,
    pub(crate) flg_ticklabel: [::core::ffi::c_int; 2usize],
    pub(crate) flg_extend: ::core::ffi::c_int,
    pub(crate) flg_barplot: ::core::ffi::c_int,
    pub(crate) flg_selection: ::core::ffi::c_int,
    pub(crate) flg_symmetric: ::core::ffi::c_int,
    pub(crate) linewidth: f32,
    pub(crate) gridwidth: f32,
    pub(crate) gridsize: [::core::ffi::c_int; 2usize],
    pub(crate) gridrgb: [f32; 3usize],
    pub(crate) figurergba: [f32; 4usize],
    pub(crate) panergba: [f32; 4usize],
    pub(crate) legendrgba: [f32; 4usize],
    pub(crate) textrgb: [f32; 3usize],
    pub(crate) linergb: [[f32; 3usize]; 100usize],
    pub(crate) range: [[f32; 2usize]; 2usize],
    pub(crate) xformat: [::core::ffi::c_char; 20usize],
    pub(crate) yformat: [::core::ffi::c_char; 20usize],
    pub(crate) minwidth: [::core::ffi::c_char; 20usize],
    pub(crate) title: [::core::ffi::c_char; 1000usize],
    pub(crate) xlabel: [::core::ffi::c_char; 100usize],
    pub(crate) linename: [[::core::ffi::c_char; 100usize]; 100usize],
    pub(crate) legendoffset: ::core::ffi::c_int,
    pub(crate) subplot: ::core::ffi::c_int,
    pub(crate) highlight: [::core::ffi::c_int; 2usize],
    pub(crate) highlightid: ::core::ffi::c_int,
    pub(crate) selection: f32,
    pub(crate) linepnt: [::core::ffi::c_int; 100usize],
    pub(crate) linedata: [[f32; 2000usize]; 100usize],
    pub(crate) xaxispixel: [::core::ffi::c_int; 2usize],
    pub(crate) yaxispixel: [::core::ffi::c_int; 2usize],
    pub(crate) xaxisdata: [f32; 2usize],
    pub(crate) yaxisdata: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvFigure"][::core::mem::size_of::<mjvFigure>() - 812948usize];
    ["Alignment of mjvFigure"][::core::mem::align_of::<mjvFigure>() - 4usize];
    ["Offset of field: mjvFigure::flg_legend"]
        [::core::mem::offset_of!(mjvFigure, flg_legend) - 0usize];
    ["Offset of field: mjvFigure::flg_ticklabel"]
        [::core::mem::offset_of!(mjvFigure, flg_ticklabel) - 4usize];
    ["Offset of field: mjvFigure::flg_extend"]
        [::core::mem::offset_of!(mjvFigure, flg_extend) - 12usize];
    ["Offset of field: mjvFigure::flg_barplot"]
        [::core::mem::offset_of!(mjvFigure, flg_barplot) - 16usize];
    ["Offset of field: mjvFigure::flg_selection"]
        [::core::mem::offset_of!(mjvFigure, flg_selection) - 20usize];
    ["Offset of field: mjvFigure::flg_symmetric"]
        [::core::mem::offset_of!(mjvFigure, flg_symmetric) - 24usize];
    ["Offset of field: mjvFigure::linewidth"]
        [::core::mem::offset_of!(mjvFigure, linewidth) - 28usize];
    ["Offset of field: mjvFigure::gridwidth"]
        [::core::mem::offset_of!(mjvFigure, gridwidth) - 32usize];
    ["Offset of field: mjvFigure::gridsize"]
        [::core::mem::offset_of!(mjvFigure, gridsize) - 36usize];
    ["Offset of field: mjvFigure::gridrgb"][::core::mem::offset_of!(mjvFigure, gridrgb) - 44usize];
    ["Offset of field: mjvFigure::figurergba"]
        [::core::mem::offset_of!(mjvFigure, figurergba) - 56usize];
    ["Offset of field: mjvFigure::panergba"]
        [::core::mem::offset_of!(mjvFigure, panergba) - 72usize];
    ["Offset of field: mjvFigure::legendrgba"]
        [::core::mem::offset_of!(mjvFigure, legendrgba) - 88usize];
    ["Offset of field: mjvFigure::textrgb"][::core::mem::offset_of!(mjvFigure, textrgb) - 104usize];
    ["Offset of field: mjvFigure::linergb"][::core::mem::offset_of!(mjvFigure, linergb) - 116usize];
    ["Offset of field: mjvFigure::range"][::core::mem::offset_of!(mjvFigure, range) - 1316usize];
    ["Offset of field: mjvFigure::xformat"]
        [::core::mem::offset_of!(mjvFigure, xformat) - 1332usize];
    ["Offset of field: mjvFigure::yformat"]
        [::core::mem::offset_of!(mjvFigure, yformat) - 1352usize];
    ["Offset of field: mjvFigure::minwidth"]
        [::core::mem::offset_of!(mjvFigure, minwidth) - 1372usize];
    ["Offset of field: mjvFigure::title"][::core::mem::offset_of!(mjvFigure, title) - 1392usize];
    ["Offset of field: mjvFigure::xlabel"][::core::mem::offset_of!(mjvFigure, xlabel) - 2392usize];
    ["Offset of field: mjvFigure::linename"]
        [::core::mem::offset_of!(mjvFigure, linename) - 2492usize];
    ["Offset of field: mjvFigure::legendoffset"]
        [::core::mem::offset_of!(mjvFigure, legendoffset) - 12492usize];
    ["Offset of field: mjvFigure::subplot"]
        [::core::mem::offset_of!(mjvFigure, subplot) - 12496usize];
    ["Offset of field: mjvFigure::highlight"]
        [::core::mem::offset_of!(mjvFigure, highlight) - 12500usize];
    ["Offset of field: mjvFigure::highlightid"]
        [::core::mem::offset_of!(mjvFigure, highlightid) - 12508usize];
    ["Offset of field: mjvFigure::selection"]
        [::core::mem::offset_of!(mjvFigure, selection) - 12512usize];
    ["Offset of field: mjvFigure::linepnt"]
        [::core::mem::offset_of!(mjvFigure, linepnt) - 12516usize];
    ["Offset of field: mjvFigure::linedata"]
        [::core::mem::offset_of!(mjvFigure, linedata) - 12916usize];
    ["Offset of field: mjvFigure::xaxispixel"]
        [::core::mem::offset_of!(mjvFigure, xaxispixel) - 812916usize];
    ["Offset of field: mjvFigure::yaxispixel"]
        [::core::mem::offset_of!(mjvFigure, yaxispixel) - 812924usize];
    ["Offset of field: mjvFigure::xaxisdata"]
        [::core::mem::offset_of!(mjvFigure, xaxisdata) - 812932usize];
    ["Offset of field: mjvFigure::yaxisdata"]
        [::core::mem::offset_of!(mjvFigure, yaxisdata) - 812940usize];
};
impl Default for mjvFigure {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState {
    pub(crate) nbuffer: ::core::ffi::c_int,
    pub(crate) buffer: *mut ::core::ffi::c_void,
    pub(crate) maxgeom: ::core::ffi::c_int,
    pub(crate) scratch: mjvScene,
    pub(crate) model: mjvSceneState___bindgen_ty_1,
    pub(crate) data: mjvSceneState___bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState___bindgen_ty_1 {
    pub(crate) nv: ::core::ffi::c_int,
    pub(crate) nu: ::core::ffi::c_int,
    pub(crate) na: ::core::ffi::c_int,
    pub(crate) nbody: ::core::ffi::c_int,
    pub(crate) nbvh: ::core::ffi::c_int,
    pub(crate) nbvhstatic: ::core::ffi::c_int,
    pub(crate) njnt: ::core::ffi::c_int,
    pub(crate) ngeom: ::core::ffi::c_int,
    pub(crate) nsite: ::core::ffi::c_int,
    pub(crate) ncam: ::core::ffi::c_int,
    pub(crate) nlight: ::core::ffi::c_int,
    pub(crate) nmesh: ::core::ffi::c_int,
    pub(crate) nskin: ::core::ffi::c_int,
    pub(crate) nflex: ::core::ffi::c_int,
    pub(crate) nflexvert: ::core::ffi::c_int,
    pub(crate) nflextexcoord: ::core::ffi::c_int,
    pub(crate) nskinvert: ::core::ffi::c_int,
    pub(crate) nskinface: ::core::ffi::c_int,
    pub(crate) nskinbone: ::core::ffi::c_int,
    pub(crate) nskinbonevert: ::core::ffi::c_int,
    pub(crate) nmat: ::core::ffi::c_int,
    pub(crate) neq: ::core::ffi::c_int,
    pub(crate) ntendon: ::core::ffi::c_int,
    pub(crate) ntree: ::core::ffi::c_int,
    pub(crate) nwrap: ::core::ffi::c_int,
    pub(crate) nsensor: ::core::ffi::c_int,
    pub(crate) nnames: ::core::ffi::c_int,
    pub(crate) npaths: ::core::ffi::c_int,
    pub(crate) nsensordata: ::core::ffi::c_int,
    pub(crate) narena: ::core::ffi::c_int,
    pub(crate) opt: mjOption,
    pub(crate) vis: mjVisual,
    pub(crate) stat: mjStatistic,
    pub(crate) body_parentid: *mut ::core::ffi::c_int,
    pub(crate) body_rootid: *mut ::core::ffi::c_int,
    pub(crate) body_weldid: *mut ::core::ffi::c_int,
    pub(crate) body_mocapid: *mut ::core::ffi::c_int,
    pub(crate) body_jntnum: *mut ::core::ffi::c_int,
    pub(crate) body_jntadr: *mut ::core::ffi::c_int,
    pub(crate) body_dofnum: *mut ::core::ffi::c_int,
    pub(crate) body_dofadr: *mut ::core::ffi::c_int,
    pub(crate) body_geomnum: *mut ::core::ffi::c_int,
    pub(crate) body_geomadr: *mut ::core::ffi::c_int,
    pub(crate) body_iquat: *mut mjtNum,
    pub(crate) body_mass: *mut mjtNum,
    pub(crate) body_inertia: *mut mjtNum,
    pub(crate) body_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) body_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) bvh_depth: *mut ::core::ffi::c_int,
    pub(crate) bvh_child: *mut ::core::ffi::c_int,
    pub(crate) bvh_nodeid: *mut ::core::ffi::c_int,
    pub(crate) bvh_aabb: *mut mjtNum,
    pub(crate) jnt_type: *mut ::core::ffi::c_int,
    pub(crate) jnt_bodyid: *mut ::core::ffi::c_int,
    pub(crate) jnt_group: *mut ::core::ffi::c_int,
    pub(crate) geom_type: *mut ::core::ffi::c_int,
    pub(crate) geom_bodyid: *mut ::core::ffi::c_int,
    pub(crate) geom_contype: *mut ::core::ffi::c_int,
    pub(crate) geom_conaffinity: *mut ::core::ffi::c_int,
    pub(crate) geom_dataid: *mut ::core::ffi::c_int,
    pub(crate) geom_matid: *mut ::core::ffi::c_int,
    pub(crate) geom_group: *mut ::core::ffi::c_int,
    pub(crate) geom_size: *mut mjtNum,
    pub(crate) geom_aabb: *mut mjtNum,
    pub(crate) geom_rbound: *mut mjtNum,
    pub(crate) geom_rgba: *mut f32,
    pub(crate) site_type: *mut ::core::ffi::c_int,
    pub(crate) site_bodyid: *mut ::core::ffi::c_int,
    pub(crate) site_matid: *mut ::core::ffi::c_int,
    pub(crate) site_group: *mut ::core::ffi::c_int,
    pub(crate) site_size: *mut mjtNum,
    pub(crate) site_rgba: *mut f32,
    pub(crate) cam_orthographic: *mut ::core::ffi::c_int,
    pub(crate) cam_fovy: *mut mjtNum,
    pub(crate) cam_ipd: *mut mjtNum,
    pub(crate) cam_resolution: *mut ::core::ffi::c_int,
    pub(crate) cam_sensorsize: *mut f32,
    pub(crate) cam_intrinsic: *mut f32,
    pub(crate) light_directional: *mut mjtByte,
    pub(crate) light_castshadow: *mut mjtByte,
    pub(crate) light_bulbradius: *mut f32,
    pub(crate) light_active: *mut mjtByte,
    pub(crate) light_attenuation: *mut f32,
    pub(crate) light_cutoff: *mut f32,
    pub(crate) light_exponent: *mut f32,
    pub(crate) light_ambient: *mut f32,
    pub(crate) light_diffuse: *mut f32,
    pub(crate) light_specular: *mut f32,
    pub(crate) flex_flatskin: *mut mjtByte,
    pub(crate) flex_dim: *mut ::core::ffi::c_int,
    pub(crate) flex_matid: *mut ::core::ffi::c_int,
    pub(crate) flex_group: *mut ::core::ffi::c_int,
    pub(crate) flex_interp: *mut ::core::ffi::c_int,
    pub(crate) flex_nodeadr: *mut ::core::ffi::c_int,
    pub(crate) flex_nodenum: *mut ::core::ffi::c_int,
    pub(crate) flex_nodebodyid: *mut ::core::ffi::c_int,
    pub(crate) flex_vertadr: *mut ::core::ffi::c_int,
    pub(crate) flex_vertnum: *mut ::core::ffi::c_int,
    pub(crate) flex_elem: *mut ::core::ffi::c_int,
    pub(crate) flex_elemtexcoord: *mut ::core::ffi::c_int,
    pub(crate) flex_elemlayer: *mut ::core::ffi::c_int,
    pub(crate) flex_elemadr: *mut ::core::ffi::c_int,
    pub(crate) flex_elemnum: *mut ::core::ffi::c_int,
    pub(crate) flex_elemdataadr: *mut ::core::ffi::c_int,
    pub(crate) flex_shell: *mut ::core::ffi::c_int,
    pub(crate) flex_shellnum: *mut ::core::ffi::c_int,
    pub(crate) flex_shelldataadr: *mut ::core::ffi::c_int,
    pub(crate) flex_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) flex_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) flex_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) flex_centered: *mut mjtByte,
    pub(crate) flex_node: *mut mjtNum,
    pub(crate) flex_radius: *mut mjtNum,
    pub(crate) flex_rgba: *mut f32,
    pub(crate) flex_texcoord: *mut f32,
    pub(crate) hfield_pathadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_bvhadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_bvhnum: *mut ::core::ffi::c_int,
    pub(crate) mesh_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_graphadr: *mut ::core::ffi::c_int,
    pub(crate) mesh_pathadr: *mut ::core::ffi::c_int,
    pub(crate) skin_matid: *mut ::core::ffi::c_int,
    pub(crate) skin_group: *mut ::core::ffi::c_int,
    pub(crate) skin_rgba: *mut f32,
    pub(crate) skin_inflate: *mut f32,
    pub(crate) skin_vertadr: *mut ::core::ffi::c_int,
    pub(crate) skin_vertnum: *mut ::core::ffi::c_int,
    pub(crate) skin_texcoordadr: *mut ::core::ffi::c_int,
    pub(crate) skin_faceadr: *mut ::core::ffi::c_int,
    pub(crate) skin_facenum: *mut ::core::ffi::c_int,
    pub(crate) skin_boneadr: *mut ::core::ffi::c_int,
    pub(crate) skin_bonenum: *mut ::core::ffi::c_int,
    pub(crate) skin_vert: *mut f32,
    pub(crate) skin_face: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertadr: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertnum: *mut ::core::ffi::c_int,
    pub(crate) skin_bonebindpos: *mut f32,
    pub(crate) skin_bonebindquat: *mut f32,
    pub(crate) skin_bonebodyid: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertid: *mut ::core::ffi::c_int,
    pub(crate) skin_bonevertweight: *mut f32,
    pub(crate) skin_pathadr: *mut ::core::ffi::c_int,
    pub(crate) tex_pathadr: *mut ::core::ffi::c_int,
    pub(crate) mat_texid: *mut ::core::ffi::c_int,
    pub(crate) mat_texuniform: *mut mjtByte,
    pub(crate) mat_texrepeat: *mut f32,
    pub(crate) mat_emission: *mut f32,
    pub(crate) mat_specular: *mut f32,
    pub(crate) mat_shininess: *mut f32,
    pub(crate) mat_reflectance: *mut f32,
    pub(crate) mat_metallic: *mut f32,
    pub(crate) mat_roughness: *mut f32,
    pub(crate) mat_rgba: *mut f32,
    pub(crate) eq_type: *mut ::core::ffi::c_int,
    pub(crate) eq_obj1id: *mut ::core::ffi::c_int,
    pub(crate) eq_obj2id: *mut ::core::ffi::c_int,
    pub(crate) eq_objtype: *mut ::core::ffi::c_int,
    pub(crate) eq_data: *mut mjtNum,
    pub(crate) tendon_num: *mut ::core::ffi::c_int,
    pub(crate) tendon_matid: *mut ::core::ffi::c_int,
    pub(crate) tendon_group: *mut ::core::ffi::c_int,
    pub(crate) tendon_limited: *mut mjtByte,
    pub(crate) tendon_actfrclimited: *mut mjtByte,
    pub(crate) tendon_width: *mut mjtNum,
    pub(crate) tendon_range: *mut mjtNum,
    pub(crate) tendon_actfrcrange: *mut mjtNum,
    pub(crate) tendon_stiffness: *mut mjtNum,
    pub(crate) tendon_damping: *mut mjtNum,
    pub(crate) tendon_frictionloss: *mut mjtNum,
    pub(crate) tendon_lengthspring: *mut mjtNum,
    pub(crate) tendon_rgba: *mut f32,
    pub(crate) actuator_trntype: *mut ::core::ffi::c_int,
    pub(crate) actuator_dyntype: *mut ::core::ffi::c_int,
    pub(crate) actuator_trnid: *mut ::core::ffi::c_int,
    pub(crate) actuator_actadr: *mut ::core::ffi::c_int,
    pub(crate) actuator_actnum: *mut ::core::ffi::c_int,
    pub(crate) actuator_group: *mut ::core::ffi::c_int,
    pub(crate) actuator_ctrllimited: *mut mjtByte,
    pub(crate) actuator_actlimited: *mut mjtByte,
    pub(crate) actuator_ctrlrange: *mut mjtNum,
    pub(crate) actuator_actrange: *mut mjtNum,
    pub(crate) actuator_cranklength: *mut mjtNum,
    pub(crate) sensor_type: *mut ::core::ffi::c_int,
    pub(crate) sensor_objid: *mut ::core::ffi::c_int,
    pub(crate) sensor_adr: *mut ::core::ffi::c_int,
    pub(crate) name_bodyadr: *mut ::core::ffi::c_int,
    pub(crate) name_jntadr: *mut ::core::ffi::c_int,
    pub(crate) name_geomadr: *mut ::core::ffi::c_int,
    pub(crate) name_siteadr: *mut ::core::ffi::c_int,
    pub(crate) name_camadr: *mut ::core::ffi::c_int,
    pub(crate) name_lightadr: *mut ::core::ffi::c_int,
    pub(crate) name_eqadr: *mut ::core::ffi::c_int,
    pub(crate) name_tendonadr: *mut ::core::ffi::c_int,
    pub(crate) name_actuatoradr: *mut ::core::ffi::c_int,
    pub(crate) names: *mut ::core::ffi::c_char,
    pub(crate) paths: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState___bindgen_ty_1"]
        [::core::mem::size_of::<mjvSceneState___bindgen_ty_1>() - 2416usize];
    ["Alignment of mjvSceneState___bindgen_ty_1"]
        [::core::mem::align_of::<mjvSceneState___bindgen_ty_1>() - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nv"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nv) - 0usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nu"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nu) - 4usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::na"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, na) - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbody"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbody) - 12usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbvh"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbvh) - 16usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nbvhstatic"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nbvhstatic) - 20usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::njnt"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, njnt) - 24usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ngeom"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, ngeom) - 28usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsite"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsite) - 32usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ncam"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, ncam) - 36usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nlight"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nlight) - 40usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nmesh"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nmesh) - 44usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskin"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskin) - 48usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflex"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflex) - 52usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflexvert"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflexvert) - 56usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nflextexcoord"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nflextexcoord) - 60usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinvert"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinvert) - 64usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinface"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinface) - 68usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinbone"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinbone) - 72usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nskinbonevert"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nskinbonevert) - 76usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nmat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nmat) - 80usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::neq"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, neq) - 84usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ntendon"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, ntendon) - 88usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::ntree"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, ntree) - 92usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nwrap"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nwrap) - 96usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsensor"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsensor) - 100usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nnames"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nnames) - 104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::npaths"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, npaths) - 108usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::nsensordata"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, nsensordata) - 112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::narena"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, narena) - 116usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::opt"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, opt) - 120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::vis"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, vis) - 424usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::stat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, stat) - 1056usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_parentid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_parentid) - 1112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_rootid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_rootid) - 1120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_weldid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_weldid) - 1128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_mocapid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_mocapid) - 1136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_jntnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_jntnum) - 1144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_jntadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_jntadr) - 1152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_dofnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_dofnum) - 1160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_dofadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_dofadr) - 1168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_geomnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_geomnum) - 1176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_geomadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_geomadr) - 1184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_iquat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_iquat) - 1192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_mass"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_mass) - 1200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_inertia"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_inertia) - 1208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_bvhadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_bvhadr) - 1216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::body_bvhnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, body_bvhnum) - 1224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_depth"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_depth) - 1232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_child"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_child) - 1240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_nodeid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_nodeid) - 1248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::bvh_aabb"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, bvh_aabb) - 1256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_type"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_type) - 1264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_bodyid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_bodyid) - 1272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::jnt_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, jnt_group) - 1280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_type"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_type) - 1288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_bodyid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_bodyid) - 1296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_contype"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_contype) - 1304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_conaffinity"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_conaffinity) - 1312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_dataid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_dataid) - 1320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_matid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_matid) - 1328usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_group) - 1336usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_size"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_size) - 1344usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_aabb"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_aabb) - 1352usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_rbound"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_rbound) - 1360usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::geom_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, geom_rgba) - 1368usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_type"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_type) - 1376usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_bodyid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_bodyid) - 1384usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_matid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_matid) - 1392usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_group) - 1400usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_size"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_size) - 1408usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::site_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, site_rgba) - 1416usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_orthographic"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_orthographic) - 1424usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_fovy"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_fovy) - 1432usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_ipd"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_ipd) - 1440usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_resolution"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_resolution) - 1448usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_sensorsize"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_sensorsize) - 1456usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::cam_intrinsic"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, cam_intrinsic) - 1464usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_directional"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_directional) - 1472usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_castshadow"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_castshadow) - 1480usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_bulbradius"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_bulbradius) - 1488usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_active"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_active) - 1496usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_attenuation"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_attenuation) - 1504usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_cutoff"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_cutoff) - 1512usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_exponent"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_exponent) - 1520usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_ambient"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_ambient) - 1528usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_diffuse"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_diffuse) - 1536usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::light_specular"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, light_specular) - 1544usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_flatskin"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_flatskin) - 1552usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_dim"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_dim) - 1560usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_matid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_matid) - 1568usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_group) - 1576usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_interp"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_interp) - 1584usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_nodeadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_nodeadr) - 1592usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_nodenum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_nodenum) - 1600usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_nodebodyid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_nodebodyid) - 1608usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_vertadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_vertadr) - 1616usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_vertnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_vertnum) - 1624usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elem"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elem) - 1632usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemtexcoord"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemtexcoord) - 1640usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemlayer"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemlayer) - 1648usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemadr) - 1656usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemnum) - 1664usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_elemdataadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_elemdataadr) - 1672usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shell"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shell) - 1680usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shellnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shellnum) - 1688usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_shelldataadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_shelldataadr) - 1696usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_texcoordadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_texcoordadr) - 1704usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_bvhadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_bvhadr) - 1712usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_bvhnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_bvhnum) - 1720usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_centered"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_centered) - 1728usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_node"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_node) - 1736usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_radius"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_radius) - 1744usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_rgba) - 1752usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::flex_texcoord"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, flex_texcoord) - 1760usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::hfield_pathadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, hfield_pathadr) - 1768usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_bvhadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_bvhadr) - 1776usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_bvhnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_bvhnum) - 1784usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_texcoordadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_texcoordadr) - 1792usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_graphadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_graphadr) - 1800usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mesh_pathadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mesh_pathadr) - 1808usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_matid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_matid) - 1816usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_group) - 1824usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_rgba) - 1832usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_inflate"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_inflate) - 1840usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vertadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vertadr) - 1848usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vertnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vertnum) - 1856usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_texcoordadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_texcoordadr) - 1864usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_faceadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_faceadr) - 1872usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_facenum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_facenum) - 1880usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_boneadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_boneadr) - 1888usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonenum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonenum) - 1896usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_vert"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_vert) - 1904usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_face"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_face) - 1912usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertadr) - 1920usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertnum) - 1928usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebindpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebindpos) - 1936usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebindquat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebindquat) - 1944usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonebodyid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonebodyid) - 1952usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertid) - 1960usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_bonevertweight"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_bonevertweight) - 1968usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::skin_pathadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, skin_pathadr) - 1976usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tex_pathadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tex_pathadr) - 1984usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texid) - 1992usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texuniform"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texuniform) - 2000usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_texrepeat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_texrepeat) - 2008usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_emission"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_emission) - 2016usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_specular"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_specular) - 2024usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_shininess"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_shininess) - 2032usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_reflectance"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_reflectance) - 2040usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_metallic"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_metallic) - 2048usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_roughness"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_roughness) - 2056usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::mat_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, mat_rgba) - 2064usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_type"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_type) - 2072usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_obj1id"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_obj1id) - 2080usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_obj2id"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_obj2id) - 2088usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_objtype"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_objtype) - 2096usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::eq_data"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, eq_data) - 2104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_num"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_num) - 2112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_matid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_matid) - 2120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_group) - 2128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_limited"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_limited) - 2136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_actfrclimited"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_actfrclimited) - 2144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_width"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_width) - 2152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_range"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_range) - 2160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_actfrcrange"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_actfrcrange) - 2168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_stiffness"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_stiffness) - 2176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_damping"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_damping) - 2184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_frictionloss"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_frictionloss) - 2192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_lengthspring"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_lengthspring) - 2200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::tendon_rgba"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, tendon_rgba) - 2208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_trntype"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_trntype) - 2216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_dyntype"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_dyntype) - 2224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_trnid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_trnid) - 2232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actadr) - 2240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actnum) - 2248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_group"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_group) - 2256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_ctrllimited"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_ctrllimited) - 2264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actlimited"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actlimited) - 2272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_ctrlrange"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_ctrlrange) - 2280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_actrange"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_actrange) - 2288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::actuator_cranklength"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, actuator_cranklength) - 2296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_type"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_type) - 2304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_objid"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_objid) - 2312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::sensor_adr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, sensor_adr) - 2320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_bodyadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_bodyadr) - 2328usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_jntadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_jntadr) - 2336usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_geomadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_geomadr) - 2344usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_siteadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_siteadr) - 2352usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_camadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_camadr) - 2360usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_lightadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_lightadr) - 2368usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_eqadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_eqadr) - 2376usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_tendonadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_tendonadr) - 2384usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::name_actuatoradr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, name_actuatoradr) - 2392usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::names"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, names) - 2400usize];
    ["Offset of field: mjvSceneState___bindgen_ty_1::paths"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_1, paths) - 2408usize];
};
impl Default for mjvSceneState___bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvSceneState___bindgen_ty_2 {
    pub(crate) warning: [mjWarningStat; 8usize],
    pub(crate) nefc: ::core::ffi::c_int,
    pub(crate) ncon: ::core::ffi::c_int,
    pub(crate) nisland: ::core::ffi::c_int,
    pub(crate) time: mjtNum,
    pub(crate) act: *mut mjtNum,
    pub(crate) ctrl: *mut mjtNum,
    pub(crate) xfrc_applied: *mut mjtNum,
    pub(crate) eq_active: *mut mjtByte,
    pub(crate) sensordata: *mut mjtNum,
    pub(crate) xpos: *mut mjtNum,
    pub(crate) xquat: *mut mjtNum,
    pub(crate) xmat: *mut mjtNum,
    pub(crate) xipos: *mut mjtNum,
    pub(crate) ximat: *mut mjtNum,
    pub(crate) xanchor: *mut mjtNum,
    pub(crate) xaxis: *mut mjtNum,
    pub(crate) geom_xpos: *mut mjtNum,
    pub(crate) geom_xmat: *mut mjtNum,
    pub(crate) site_xpos: *mut mjtNum,
    pub(crate) site_xmat: *mut mjtNum,
    pub(crate) cam_xpos: *mut mjtNum,
    pub(crate) cam_xmat: *mut mjtNum,
    pub(crate) light_xpos: *mut mjtNum,
    pub(crate) light_xdir: *mut mjtNum,
    pub(crate) subtree_com: *mut mjtNum,
    pub(crate) ten_wrapadr: *mut ::core::ffi::c_int,
    pub(crate) ten_wrapnum: *mut ::core::ffi::c_int,
    pub(crate) wrap_obj: *mut ::core::ffi::c_int,
    pub(crate) ten_length: *mut mjtNum,
    pub(crate) wrap_xpos: *mut mjtNum,
    pub(crate) bvh_aabb_dyn: *mut mjtNum,
    pub(crate) bvh_active: *mut mjtByte,
    pub(crate) island_dofadr: *mut ::core::ffi::c_int,
    pub(crate) island_dofind: *mut ::core::ffi::c_int,
    pub(crate) dof_island: *mut ::core::ffi::c_int,
    pub(crate) efc_island: *mut ::core::ffi::c_int,
    pub(crate) tendon_efcadr: *mut ::core::ffi::c_int,
    pub(crate) flexvert_xpos: *mut mjtNum,
    pub(crate) contact: *mut mjContact,
    pub(crate) efc_force: *mut mjtNum,
    pub(crate) arena: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState___bindgen_ty_2"]
        [::core::mem::size_of::<mjvSceneState___bindgen_ty_2>() - 384usize];
    ["Alignment of mjvSceneState___bindgen_ty_2"]
        [::core::mem::align_of::<mjvSceneState___bindgen_ty_2>() - 8usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::warning"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, warning) - 0usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::nefc"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, nefc) - 64usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ncon"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ncon) - 68usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::nisland"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, nisland) - 72usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::time"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, time) - 80usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::act"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, act) - 88usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ctrl"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ctrl) - 96usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xfrc_applied"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xfrc_applied) - 104usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::eq_active"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, eq_active) - 112usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::sensordata"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, sensordata) - 120usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xpos) - 128usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xquat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xquat) - 136usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xmat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xmat) - 144usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xipos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xipos) - 152usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ximat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ximat) - 160usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xanchor"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xanchor) - 168usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::xaxis"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, xaxis) - 176usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::geom_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, geom_xpos) - 184usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::geom_xmat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, geom_xmat) - 192usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::site_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, site_xpos) - 200usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::site_xmat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, site_xmat) - 208usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::cam_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, cam_xpos) - 216usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::cam_xmat"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, cam_xmat) - 224usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::light_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, light_xpos) - 232usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::light_xdir"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, light_xdir) - 240usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::subtree_com"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, subtree_com) - 248usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_wrapadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_wrapadr) - 256usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_wrapnum"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_wrapnum) - 264usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::wrap_obj"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, wrap_obj) - 272usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::ten_length"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, ten_length) - 280usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::wrap_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, wrap_xpos) - 288usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::bvh_aabb_dyn"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, bvh_aabb_dyn) - 296usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::bvh_active"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, bvh_active) - 304usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::island_dofadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, island_dofadr) - 312usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::island_dofind"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, island_dofind) - 320usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::dof_island"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, dof_island) - 328usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::efc_island"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, efc_island) - 336usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::tendon_efcadr"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, tendon_efcadr) - 344usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::flexvert_xpos"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, flexvert_xpos) - 352usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::contact"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, contact) - 360usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::efc_force"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, efc_force) - 368usize];
    ["Offset of field: mjvSceneState___bindgen_ty_2::arena"]
        [::core::mem::offset_of!(mjvSceneState___bindgen_ty_2, arena) - 376usize];
};
impl Default for mjvSceneState___bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjvSceneState"][::core::mem::size_of::<mjvSceneState>() - 12000usize];
    ["Alignment of mjvSceneState"][::core::mem::align_of::<mjvSceneState>() - 8usize];
    ["Offset of field: mjvSceneState::nbuffer"]
        [::core::mem::offset_of!(mjvSceneState, nbuffer) - 0usize];
    ["Offset of field: mjvSceneState::buffer"]
        [::core::mem::offset_of!(mjvSceneState, buffer) - 8usize];
    ["Offset of field: mjvSceneState::maxgeom"]
        [::core::mem::offset_of!(mjvSceneState, maxgeom) - 16usize];
    ["Offset of field: mjvSceneState::scratch"]
        [::core::mem::offset_of!(mjvSceneState, scratch) - 24usize];
    ["Offset of field: mjvSceneState::model"]
        [::core::mem::offset_of!(mjvSceneState, model) - 9200usize];
    ["Offset of field: mjvSceneState::data"]
        [::core::mem::offset_of!(mjvSceneState, data) - 11616usize];
};
impl Default for mjvSceneState {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjResource {
    pub(crate) name: *mut ::core::ffi::c_char,
    pub(crate) data: *mut ::core::ffi::c_void,
    pub(crate) timestamp: [::core::ffi::c_char; 512usize],
    pub(crate) provider: *const mjpResourceProvider,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjResource"][::core::mem::size_of::<mjResource>() - 536usize];
    ["Alignment of mjResource"][::core::mem::align_of::<mjResource>() - 8usize];
    ["Offset of field: mjResource::name"][::core::mem::offset_of!(mjResource, name) - 0usize];
    ["Offset of field: mjResource::data"][::core::mem::offset_of!(mjResource, data) - 8usize];
    ["Offset of field: mjResource::timestamp"]
        [::core::mem::offset_of!(mjResource, timestamp) - 16usize];
    ["Offset of field: mjResource::provider"]
        [::core::mem::offset_of!(mjResource, provider) - 528usize];
};
impl Default for mjResource {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjfOpenResource =
    ::core::option::Option<unsafe extern "C" fn(resource: *mut mjResource) -> ::core::ffi::c_int>;
pub type mjfReadResource = ::core::option::Option<
    unsafe extern "C" fn(
        resource: *mut mjResource,
        buffer: *mut *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
pub type mjfCloseResource = ::core::option::Option<unsafe extern "C" fn(resource: *mut mjResource)>;
pub type mjfGetResourceDir = ::core::option::Option<
    unsafe extern "C" fn(
        resource: *mut mjResource,
        dir: *mut *const ::core::ffi::c_char,
        ndir: *mut ::core::ffi::c_int,
    ),
>;
pub type mjfResourceModified = ::core::option::Option<
    unsafe extern "C" fn(
        resource: *const mjResource,
        timestamp: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjpResourceProvider {
    pub(crate) prefix: *const ::core::ffi::c_char,
    pub(crate) open: mjfOpenResource,
    pub(crate) read: mjfReadResource,
    pub(crate) close: mjfCloseResource,
    pub(crate) getdir: mjfGetResourceDir,
    pub(crate) modified: mjfResourceModified,
    pub(crate) data: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjpResourceProvider"][::core::mem::size_of::<mjpResourceProvider>() - 56usize];
    ["Alignment of mjpResourceProvider"][::core::mem::align_of::<mjpResourceProvider>() - 8usize];
    ["Offset of field: mjpResourceProvider::prefix"]
        [::core::mem::offset_of!(mjpResourceProvider, prefix) - 0usize];
    ["Offset of field: mjpResourceProvider::open"]
        [::core::mem::offset_of!(mjpResourceProvider, open) - 8usize];
    ["Offset of field: mjpResourceProvider::read"]
        [::core::mem::offset_of!(mjpResourceProvider, read) - 16usize];
    ["Offset of field: mjpResourceProvider::close"]
        [::core::mem::offset_of!(mjpResourceProvider, close) - 24usize];
    ["Offset of field: mjpResourceProvider::getdir"]
        [::core::mem::offset_of!(mjpResourceProvider, getdir) - 32usize];
    ["Offset of field: mjpResourceProvider::modified"]
        [::core::mem::offset_of!(mjpResourceProvider, modified) - 40usize];
    ["Offset of field: mjpResourceProvider::data"]
        [::core::mem::offset_of!(mjpResourceProvider, data) - 48usize];
};
impl Default for mjpResourceProvider {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl mjtPluginCapabilityBit {
    pub const ACTUATOR: mjtPluginCapabilityBit = mjtPluginCapabilityBit(1);
    pub const SENSOR: mjtPluginCapabilityBit = mjtPluginCapabilityBit(2);
    pub const PASSIVE: mjtPluginCapabilityBit = mjtPluginCapabilityBit(4);
    pub const SDF: mjtPluginCapabilityBit = mjtPluginCapabilityBit(8);
}
impl ::core::ops::BitOr<mjtPluginCapabilityBit> for mjtPluginCapabilityBit {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        mjtPluginCapabilityBit(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for mjtPluginCapabilityBit {
    #[inline]
    fn bitor_assign(&mut self, rhs: mjtPluginCapabilityBit) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<mjtPluginCapabilityBit> for mjtPluginCapabilityBit {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        mjtPluginCapabilityBit(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for mjtPluginCapabilityBit {
    #[inline]
    fn bitand_assign(&mut self, rhs: mjtPluginCapabilityBit) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtPluginCapabilityBit(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjpPlugin {
    pub(crate) name: *const ::core::ffi::c_char,
    pub(crate) nattribute: ::core::ffi::c_int,
    pub(crate) attributes: *const *const ::core::ffi::c_char,
    pub(crate) capabilityflags: ::core::ffi::c_int,
    pub(crate) needstage: ::core::ffi::c_int,
    pub(crate) nstate: ::core::option::Option<
        unsafe extern "C" fn(m: *const mjModel, instance: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub(crate) nsensordata: ::core::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            instance: ::core::ffi::c_int,
            sensor_id: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub(crate) init: ::core::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub(crate) destroy:
        ::core::option::Option<unsafe extern "C" fn(d: *mut mjData, instance: ::core::ffi::c_int)>,
    pub(crate) copy: ::core::option::Option<
        unsafe extern "C" fn(
            dest: *mut mjData,
            m: *const mjModel,
            src: *const mjData,
            instance: ::core::ffi::c_int,
        ),
    >,
    pub(crate) reset: ::core::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            plugin_state: *mut mjtNum,
            plugin_data: *mut ::core::ffi::c_void,
            instance: ::core::ffi::c_int,
        ),
    >,
    pub(crate) compute: ::core::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::core::ffi::c_int,
            capability_bit: ::core::ffi::c_int,
        ),
    >,
    pub(crate) advance: ::core::option::Option<
        unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, instance: ::core::ffi::c_int),
    >,
    pub(crate) visualize: ::core::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            opt: *const mjvOption,
            scn: *mut mjvScene,
            instance: ::core::ffi::c_int,
        ),
    >,
    pub(crate) actuator_act_dot: ::core::option::Option<
        unsafe extern "C" fn(m: *const mjModel, d: *mut mjData, instance: ::core::ffi::c_int),
    >,
    pub(crate) sdf_distance: ::core::option::Option<
        unsafe extern "C" fn(
            point: *const [mjtNum; 3usize],
            d: *const mjData,
            instance: ::core::ffi::c_int,
        ) -> mjtNum,
    >,
    pub(crate) sdf_gradient: ::core::option::Option<
        unsafe extern "C" fn(
            gradient: *mut [mjtNum; 3usize],
            point: *const [mjtNum; 3usize],
            d: *const mjData,
            instance: ::core::ffi::c_int,
        ),
    >,
    pub(crate) sdf_staticdistance: ::core::option::Option<
        unsafe extern "C" fn(point: *const [mjtNum; 3usize], attributes: *const mjtNum) -> mjtNum,
    >,
    pub(crate) sdf_attribute: ::core::option::Option<
        unsafe extern "C" fn(
            attribute: *mut [mjtNum; 0usize],
            name: *mut [*const ::core::ffi::c_char; 0usize],
            value: *mut [*const ::core::ffi::c_char; 0usize],
        ),
    >,
    pub(crate) sdf_aabb: ::core::option::Option<
        unsafe extern "C" fn(aabb: *mut [mjtNum; 6usize], attributes: *const mjtNum),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjpPlugin"][::core::mem::size_of::<mjpPlugin>() - 152usize];
    ["Alignment of mjpPlugin"][::core::mem::align_of::<mjpPlugin>() - 8usize];
    ["Offset of field: mjpPlugin::name"][::core::mem::offset_of!(mjpPlugin, name) - 0usize];
    ["Offset of field: mjpPlugin::nattribute"]
        [::core::mem::offset_of!(mjpPlugin, nattribute) - 8usize];
    ["Offset of field: mjpPlugin::attributes"]
        [::core::mem::offset_of!(mjpPlugin, attributes) - 16usize];
    ["Offset of field: mjpPlugin::capabilityflags"]
        [::core::mem::offset_of!(mjpPlugin, capabilityflags) - 24usize];
    ["Offset of field: mjpPlugin::needstage"]
        [::core::mem::offset_of!(mjpPlugin, needstage) - 28usize];
    ["Offset of field: mjpPlugin::nstate"][::core::mem::offset_of!(mjpPlugin, nstate) - 32usize];
    ["Offset of field: mjpPlugin::nsensordata"]
        [::core::mem::offset_of!(mjpPlugin, nsensordata) - 40usize];
    ["Offset of field: mjpPlugin::init"][::core::mem::offset_of!(mjpPlugin, init) - 48usize];
    ["Offset of field: mjpPlugin::destroy"][::core::mem::offset_of!(mjpPlugin, destroy) - 56usize];
    ["Offset of field: mjpPlugin::copy"][::core::mem::offset_of!(mjpPlugin, copy) - 64usize];
    ["Offset of field: mjpPlugin::reset"][::core::mem::offset_of!(mjpPlugin, reset) - 72usize];
    ["Offset of field: mjpPlugin::compute"][::core::mem::offset_of!(mjpPlugin, compute) - 80usize];
    ["Offset of field: mjpPlugin::advance"][::core::mem::offset_of!(mjpPlugin, advance) - 88usize];
    ["Offset of field: mjpPlugin::visualize"]
        [::core::mem::offset_of!(mjpPlugin, visualize) - 96usize];
    ["Offset of field: mjpPlugin::actuator_act_dot"]
        [::core::mem::offset_of!(mjpPlugin, actuator_act_dot) - 104usize];
    ["Offset of field: mjpPlugin::sdf_distance"]
        [::core::mem::offset_of!(mjpPlugin, sdf_distance) - 112usize];
    ["Offset of field: mjpPlugin::sdf_gradient"]
        [::core::mem::offset_of!(mjpPlugin, sdf_gradient) - 120usize];
    ["Offset of field: mjpPlugin::sdf_staticdistance"]
        [::core::mem::offset_of!(mjpPlugin, sdf_staticdistance) - 128usize];
    ["Offset of field: mjpPlugin::sdf_attribute"]
        [::core::mem::offset_of!(mjpPlugin, sdf_attribute) - 136usize];
    ["Offset of field: mjpPlugin::sdf_aabb"]
        [::core::mem::offset_of!(mjpPlugin, sdf_aabb) - 144usize];
};
impl Default for mjpPlugin {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjfPluginLibraryLoadCallback = ::core::option::Option<
    unsafe extern "C" fn(
        filename: *const ::core::ffi::c_char,
        first: ::core::ffi::c_int,
        count: ::core::ffi::c_int,
    ),
>;
impl mjtGridPos {
    pub const TOPLEFT: mjtGridPos = mjtGridPos(0);
    pub const TOPRIGHT: mjtGridPos = mjtGridPos(1);
    pub const BOTTOMLEFT: mjtGridPos = mjtGridPos(2);
    pub const BOTTOMRIGHT: mjtGridPos = mjtGridPos(3);
    pub const TOP: mjtGridPos = mjtGridPos(4);
    pub const BOTTOM: mjtGridPos = mjtGridPos(5);
    pub const LEFT: mjtGridPos = mjtGridPos(6);
    pub const RIGHT: mjtGridPos = mjtGridPos(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtGridPos(pub(crate) ::core::ffi::c_uint);
impl mjtFramebuffer {
    pub const WINDOW: mjtFramebuffer = mjtFramebuffer(0);
    pub const OFFSCREEN: mjtFramebuffer = mjtFramebuffer(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtFramebuffer(pub(crate) ::core::ffi::c_uint);
impl mjtDepthMap {
    pub const ZERONEAR: mjtDepthMap = mjtDepthMap(0);
    pub const ZEROFAR: mjtDepthMap = mjtDepthMap(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtDepthMap(pub(crate) ::core::ffi::c_uint);
impl mjtFontScale {
    pub const X50: mjtFontScale = mjtFontScale(50);
    pub const X100: mjtFontScale = mjtFontScale(100);
    pub const X150: mjtFontScale = mjtFontScale(150);
    pub const X200: mjtFontScale = mjtFontScale(200);
    pub const X250: mjtFontScale = mjtFontScale(250);
    pub const X300: mjtFontScale = mjtFontScale(300);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtFontScale(pub(crate) ::core::ffi::c_uint);
impl mjtFont {
    pub const NORMAL: mjtFont = mjtFont(0);
    pub const SHADOW: mjtFont = mjtFont(1);
    pub const BIG: mjtFont = mjtFont(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtFont(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjrRect {
    pub(crate) left: ::core::ffi::c_int,
    pub(crate) bottom: ::core::ffi::c_int,
    pub(crate) width: ::core::ffi::c_int,
    pub(crate) height: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjrRect"][::core::mem::size_of::<mjrRect>() - 16usize];
    ["Alignment of mjrRect"][::core::mem::align_of::<mjrRect>() - 4usize];
    ["Offset of field: mjrRect::left"][::core::mem::offset_of!(mjrRect, left) - 0usize];
    ["Offset of field: mjrRect::bottom"][::core::mem::offset_of!(mjrRect, bottom) - 4usize];
    ["Offset of field: mjrRect::width"][::core::mem::offset_of!(mjrRect, width) - 8usize];
    ["Offset of field: mjrRect::height"][::core::mem::offset_of!(mjrRect, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjrContext {
    pub(crate) lineWidth: f32,
    pub(crate) shadowClip: f32,
    pub(crate) shadowScale: f32,
    pub(crate) fogStart: f32,
    pub(crate) fogEnd: f32,
    pub(crate) fogRGBA: [f32; 4usize],
    pub(crate) shadowSize: ::core::ffi::c_int,
    pub(crate) offWidth: ::core::ffi::c_int,
    pub(crate) offHeight: ::core::ffi::c_int,
    pub(crate) offSamples: ::core::ffi::c_int,
    pub(crate) fontScale: ::core::ffi::c_int,
    pub(crate) auxWidth: [::core::ffi::c_int; 10usize],
    pub(crate) auxHeight: [::core::ffi::c_int; 10usize],
    pub(crate) auxSamples: [::core::ffi::c_int; 10usize],
    pub(crate) offFBO: ::core::ffi::c_uint,
    pub(crate) offFBO_r: ::core::ffi::c_uint,
    pub(crate) offColor: ::core::ffi::c_uint,
    pub(crate) offColor_r: ::core::ffi::c_uint,
    pub(crate) offDepthStencil: ::core::ffi::c_uint,
    pub(crate) offDepthStencil_r: ::core::ffi::c_uint,
    pub(crate) shadowFBO: ::core::ffi::c_uint,
    pub(crate) shadowTex: ::core::ffi::c_uint,
    pub(crate) auxFBO: [::core::ffi::c_uint; 10usize],
    pub(crate) auxFBO_r: [::core::ffi::c_uint; 10usize],
    pub(crate) auxColor: [::core::ffi::c_uint; 10usize],
    pub(crate) auxColor_r: [::core::ffi::c_uint; 10usize],
    pub(crate) mat_texid: [::core::ffi::c_int; 10000usize],
    pub(crate) mat_texuniform: [::core::ffi::c_int; 1000usize],
    pub(crate) mat_texrepeat: [f32; 2000usize],
    pub(crate) ntexture: ::core::ffi::c_int,
    pub(crate) textureType: [::core::ffi::c_int; 1000usize],
    pub(crate) texture: [::core::ffi::c_uint; 1000usize],
    pub(crate) basePlane: ::core::ffi::c_uint,
    pub(crate) baseMesh: ::core::ffi::c_uint,
    pub(crate) baseHField: ::core::ffi::c_uint,
    pub(crate) baseBuiltin: ::core::ffi::c_uint,
    pub(crate) baseFontNormal: ::core::ffi::c_uint,
    pub(crate) baseFontShadow: ::core::ffi::c_uint,
    pub(crate) baseFontBig: ::core::ffi::c_uint,
    pub(crate) rangePlane: ::core::ffi::c_int,
    pub(crate) rangeMesh: ::core::ffi::c_int,
    pub(crate) rangeHField: ::core::ffi::c_int,
    pub(crate) rangeBuiltin: ::core::ffi::c_int,
    pub(crate) rangeFont: ::core::ffi::c_int,
    pub(crate) nskin: ::core::ffi::c_int,
    pub(crate) skinvertVBO: *mut ::core::ffi::c_uint,
    pub(crate) skinnormalVBO: *mut ::core::ffi::c_uint,
    pub(crate) skintexcoordVBO: *mut ::core::ffi::c_uint,
    pub(crate) skinfaceVBO: *mut ::core::ffi::c_uint,
    pub(crate) charWidth: [::core::ffi::c_int; 127usize],
    pub(crate) charWidthBig: [::core::ffi::c_int; 127usize],
    pub(crate) charHeight: ::core::ffi::c_int,
    pub(crate) charHeightBig: ::core::ffi::c_int,
    pub(crate) glInitialized: ::core::ffi::c_int,
    pub(crate) windowAvailable: ::core::ffi::c_int,
    pub(crate) windowSamples: ::core::ffi::c_int,
    pub(crate) windowStereo: ::core::ffi::c_int,
    pub(crate) windowDoublebuffer: ::core::ffi::c_int,
    pub(crate) currentBuffer: ::core::ffi::c_int,
    pub(crate) readPixelFormat: ::core::ffi::c_int,
    pub(crate) readDepthMap: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjrContext"][::core::mem::size_of::<mjrContext>() - 61512usize];
    ["Alignment of mjrContext"][::core::mem::align_of::<mjrContext>() - 8usize];
    ["Offset of field: mjrContext::lineWidth"]
        [::core::mem::offset_of!(mjrContext, lineWidth) - 0usize];
    ["Offset of field: mjrContext::shadowClip"]
        [::core::mem::offset_of!(mjrContext, shadowClip) - 4usize];
    ["Offset of field: mjrContext::shadowScale"]
        [::core::mem::offset_of!(mjrContext, shadowScale) - 8usize];
    ["Offset of field: mjrContext::fogStart"]
        [::core::mem::offset_of!(mjrContext, fogStart) - 12usize];
    ["Offset of field: mjrContext::fogEnd"][::core::mem::offset_of!(mjrContext, fogEnd) - 16usize];
    ["Offset of field: mjrContext::fogRGBA"]
        [::core::mem::offset_of!(mjrContext, fogRGBA) - 20usize];
    ["Offset of field: mjrContext::shadowSize"]
        [::core::mem::offset_of!(mjrContext, shadowSize) - 36usize];
    ["Offset of field: mjrContext::offWidth"]
        [::core::mem::offset_of!(mjrContext, offWidth) - 40usize];
    ["Offset of field: mjrContext::offHeight"]
        [::core::mem::offset_of!(mjrContext, offHeight) - 44usize];
    ["Offset of field: mjrContext::offSamples"]
        [::core::mem::offset_of!(mjrContext, offSamples) - 48usize];
    ["Offset of field: mjrContext::fontScale"]
        [::core::mem::offset_of!(mjrContext, fontScale) - 52usize];
    ["Offset of field: mjrContext::auxWidth"]
        [::core::mem::offset_of!(mjrContext, auxWidth) - 56usize];
    ["Offset of field: mjrContext::auxHeight"]
        [::core::mem::offset_of!(mjrContext, auxHeight) - 96usize];
    ["Offset of field: mjrContext::auxSamples"]
        [::core::mem::offset_of!(mjrContext, auxSamples) - 136usize];
    ["Offset of field: mjrContext::offFBO"][::core::mem::offset_of!(mjrContext, offFBO) - 176usize];
    ["Offset of field: mjrContext::offFBO_r"]
        [::core::mem::offset_of!(mjrContext, offFBO_r) - 180usize];
    ["Offset of field: mjrContext::offColor"]
        [::core::mem::offset_of!(mjrContext, offColor) - 184usize];
    ["Offset of field: mjrContext::offColor_r"]
        [::core::mem::offset_of!(mjrContext, offColor_r) - 188usize];
    ["Offset of field: mjrContext::offDepthStencil"]
        [::core::mem::offset_of!(mjrContext, offDepthStencil) - 192usize];
    ["Offset of field: mjrContext::offDepthStencil_r"]
        [::core::mem::offset_of!(mjrContext, offDepthStencil_r) - 196usize];
    ["Offset of field: mjrContext::shadowFBO"]
        [::core::mem::offset_of!(mjrContext, shadowFBO) - 200usize];
    ["Offset of field: mjrContext::shadowTex"]
        [::core::mem::offset_of!(mjrContext, shadowTex) - 204usize];
    ["Offset of field: mjrContext::auxFBO"][::core::mem::offset_of!(mjrContext, auxFBO) - 208usize];
    ["Offset of field: mjrContext::auxFBO_r"]
        [::core::mem::offset_of!(mjrContext, auxFBO_r) - 248usize];
    ["Offset of field: mjrContext::auxColor"]
        [::core::mem::offset_of!(mjrContext, auxColor) - 288usize];
    ["Offset of field: mjrContext::auxColor_r"]
        [::core::mem::offset_of!(mjrContext, auxColor_r) - 328usize];
    ["Offset of field: mjrContext::mat_texid"]
        [::core::mem::offset_of!(mjrContext, mat_texid) - 368usize];
    ["Offset of field: mjrContext::mat_texuniform"]
        [::core::mem::offset_of!(mjrContext, mat_texuniform) - 40368usize];
    ["Offset of field: mjrContext::mat_texrepeat"]
        [::core::mem::offset_of!(mjrContext, mat_texrepeat) - 44368usize];
    ["Offset of field: mjrContext::ntexture"]
        [::core::mem::offset_of!(mjrContext, ntexture) - 52368usize];
    ["Offset of field: mjrContext::textureType"]
        [::core::mem::offset_of!(mjrContext, textureType) - 52372usize];
    ["Offset of field: mjrContext::texture"]
        [::core::mem::offset_of!(mjrContext, texture) - 56372usize];
    ["Offset of field: mjrContext::basePlane"]
        [::core::mem::offset_of!(mjrContext, basePlane) - 60372usize];
    ["Offset of field: mjrContext::baseMesh"]
        [::core::mem::offset_of!(mjrContext, baseMesh) - 60376usize];
    ["Offset of field: mjrContext::baseHField"]
        [::core::mem::offset_of!(mjrContext, baseHField) - 60380usize];
    ["Offset of field: mjrContext::baseBuiltin"]
        [::core::mem::offset_of!(mjrContext, baseBuiltin) - 60384usize];
    ["Offset of field: mjrContext::baseFontNormal"]
        [::core::mem::offset_of!(mjrContext, baseFontNormal) - 60388usize];
    ["Offset of field: mjrContext::baseFontShadow"]
        [::core::mem::offset_of!(mjrContext, baseFontShadow) - 60392usize];
    ["Offset of field: mjrContext::baseFontBig"]
        [::core::mem::offset_of!(mjrContext, baseFontBig) - 60396usize];
    ["Offset of field: mjrContext::rangePlane"]
        [::core::mem::offset_of!(mjrContext, rangePlane) - 60400usize];
    ["Offset of field: mjrContext::rangeMesh"]
        [::core::mem::offset_of!(mjrContext, rangeMesh) - 60404usize];
    ["Offset of field: mjrContext::rangeHField"]
        [::core::mem::offset_of!(mjrContext, rangeHField) - 60408usize];
    ["Offset of field: mjrContext::rangeBuiltin"]
        [::core::mem::offset_of!(mjrContext, rangeBuiltin) - 60412usize];
    ["Offset of field: mjrContext::rangeFont"]
        [::core::mem::offset_of!(mjrContext, rangeFont) - 60416usize];
    ["Offset of field: mjrContext::nskin"][::core::mem::offset_of!(mjrContext, nskin) - 60420usize];
    ["Offset of field: mjrContext::skinvertVBO"]
        [::core::mem::offset_of!(mjrContext, skinvertVBO) - 60424usize];
    ["Offset of field: mjrContext::skinnormalVBO"]
        [::core::mem::offset_of!(mjrContext, skinnormalVBO) - 60432usize];
    ["Offset of field: mjrContext::skintexcoordVBO"]
        [::core::mem::offset_of!(mjrContext, skintexcoordVBO) - 60440usize];
    ["Offset of field: mjrContext::skinfaceVBO"]
        [::core::mem::offset_of!(mjrContext, skinfaceVBO) - 60448usize];
    ["Offset of field: mjrContext::charWidth"]
        [::core::mem::offset_of!(mjrContext, charWidth) - 60456usize];
    ["Offset of field: mjrContext::charWidthBig"]
        [::core::mem::offset_of!(mjrContext, charWidthBig) - 60964usize];
    ["Offset of field: mjrContext::charHeight"]
        [::core::mem::offset_of!(mjrContext, charHeight) - 61472usize];
    ["Offset of field: mjrContext::charHeightBig"]
        [::core::mem::offset_of!(mjrContext, charHeightBig) - 61476usize];
    ["Offset of field: mjrContext::glInitialized"]
        [::core::mem::offset_of!(mjrContext, glInitialized) - 61480usize];
    ["Offset of field: mjrContext::windowAvailable"]
        [::core::mem::offset_of!(mjrContext, windowAvailable) - 61484usize];
    ["Offset of field: mjrContext::windowSamples"]
        [::core::mem::offset_of!(mjrContext, windowSamples) - 61488usize];
    ["Offset of field: mjrContext::windowStereo"]
        [::core::mem::offset_of!(mjrContext, windowStereo) - 61492usize];
    ["Offset of field: mjrContext::windowDoublebuffer"]
        [::core::mem::offset_of!(mjrContext, windowDoublebuffer) - 61496usize];
    ["Offset of field: mjrContext::currentBuffer"]
        [::core::mem::offset_of!(mjrContext, currentBuffer) - 61500usize];
    ["Offset of field: mjrContext::readPixelFormat"]
        [::core::mem::offset_of!(mjrContext, readPixelFormat) - 61504usize];
    ["Offset of field: mjrContext::readDepthMap"]
        [::core::mem::offset_of!(mjrContext, readDepthMap) - 61508usize];
};
impl Default for mjrContext {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjString = ::core::ffi::c_void;
pub type mjStringVec = ::core::ffi::c_void;
pub type mjIntVec = ::core::ffi::c_void;
pub type mjIntVecVec = ::core::ffi::c_void;
pub type mjFloatVec = ::core::ffi::c_void;
pub type mjFloatVecVec = ::core::ffi::c_void;
pub type mjDoubleVec = ::core::ffi::c_void;
pub type mjByteVec = ::core::ffi::c_void;
impl mjtGeomInertia {
    pub const VOLUME: mjtGeomInertia = mjtGeomInertia(0);
    pub const SHELL: mjtGeomInertia = mjtGeomInertia(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtGeomInertia(pub(crate) ::core::ffi::c_uint);
impl mjtMeshInertia {
    pub const INERTIA_CONVEX: mjtMeshInertia = mjtMeshInertia(0);
    pub const INERTIA_EXACT: mjtMeshInertia = mjtMeshInertia(1);
    pub const INERTIA_LEGACY: mjtMeshInertia = mjtMeshInertia(2);
    pub const INERTIA_SHELL: mjtMeshInertia = mjtMeshInertia(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtMeshInertia(pub(crate) ::core::ffi::c_uint);
impl mjtBuiltin {
    pub const NONE: mjtBuiltin = mjtBuiltin(0);
    pub const GRADIENT: mjtBuiltin = mjtBuiltin(1);
    pub const CHECKER: mjtBuiltin = mjtBuiltin(2);
    pub const FLAT: mjtBuiltin = mjtBuiltin(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtBuiltin(pub(crate) ::core::ffi::c_uint);
impl mjtMark {
    pub const NONE: mjtMark = mjtMark(0);
    pub const EDGE: mjtMark = mjtMark(1);
    pub const CROSS: mjtMark = mjtMark(2);
    pub const RANDOM: mjtMark = mjtMark(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtMark(pub(crate) ::core::ffi::c_uint);
impl mjtLimited {
    pub const FALSE: mjtLimited = mjtLimited(0);
    pub const TRUE: mjtLimited = mjtLimited(1);
    pub const AUTO: mjtLimited = mjtLimited(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtLimited(pub(crate) ::core::ffi::c_uint);
impl mjtAlignFree {
    pub const FALSE: mjtAlignFree = mjtAlignFree(0);
    pub const TRUE: mjtAlignFree = mjtAlignFree(1);
    pub const AUTO: mjtAlignFree = mjtAlignFree(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtAlignFree(pub(crate) ::core::ffi::c_uint);
impl mjtInertiaFromGeom {
    pub const FALSE: mjtInertiaFromGeom = mjtInertiaFromGeom(0);
    pub const TRUE: mjtInertiaFromGeom = mjtInertiaFromGeom(1);
    pub const AUTO: mjtInertiaFromGeom = mjtInertiaFromGeom(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtInertiaFromGeom(pub(crate) ::core::ffi::c_uint);
impl mjtOrientation {
    pub const QUAT: mjtOrientation = mjtOrientation(0);
    pub const AXISANGLE: mjtOrientation = mjtOrientation(1);
    pub const XYAXES: mjtOrientation = mjtOrientation(2);
    pub const ZAXIS: mjtOrientation = mjtOrientation(3);
    pub const EULER: mjtOrientation = mjtOrientation(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtOrientation(pub(crate) ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsElement {
    pub(crate) elemtype: mjtObj,
    pub(crate) signature: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsElement"][::core::mem::size_of::<mjsElement>() - 16usize];
    ["Alignment of mjsElement"][::core::mem::align_of::<mjsElement>() - 8usize];
    ["Offset of field: mjsElement::elemtype"]
        [::core::mem::offset_of!(mjsElement, elemtype) - 0usize];
    ["Offset of field: mjsElement::signature"]
        [::core::mem::offset_of!(mjsElement, signature) - 8usize];
};
impl Default for mjsElement {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjsCompiler {
    pub(crate) autolimits: mjtByte,
    pub(crate) boundmass: f64,
    pub(crate) boundinertia: f64,
    pub(crate) settotalmass: f64,
    pub(crate) balanceinertia: mjtByte,
    pub(crate) fitaabb: mjtByte,
    pub(crate) degree: mjtByte,
    pub(crate) eulerseq: [::core::ffi::c_char; 3usize],
    pub(crate) discardvisual: mjtByte,
    pub(crate) usethread: mjtByte,
    pub(crate) fusestatic: mjtByte,
    pub(crate) inertiafromgeom: ::core::ffi::c_int,
    pub(crate) inertiagrouprange: [::core::ffi::c_int; 2usize],
    pub(crate) saveinertial: mjtByte,
    pub(crate) alignfree: ::core::ffi::c_int,
    pub(crate) LRopt: mjLROpt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsCompiler"][::core::mem::size_of::<mjsCompiler>() - 136usize];
    ["Alignment of mjsCompiler"][::core::mem::align_of::<mjsCompiler>() - 8usize];
    ["Offset of field: mjsCompiler::autolimits"]
        [::core::mem::offset_of!(mjsCompiler, autolimits) - 0usize];
    ["Offset of field: mjsCompiler::boundmass"]
        [::core::mem::offset_of!(mjsCompiler, boundmass) - 8usize];
    ["Offset of field: mjsCompiler::boundinertia"]
        [::core::mem::offset_of!(mjsCompiler, boundinertia) - 16usize];
    ["Offset of field: mjsCompiler::settotalmass"]
        [::core::mem::offset_of!(mjsCompiler, settotalmass) - 24usize];
    ["Offset of field: mjsCompiler::balanceinertia"]
        [::core::mem::offset_of!(mjsCompiler, balanceinertia) - 32usize];
    ["Offset of field: mjsCompiler::fitaabb"]
        [::core::mem::offset_of!(mjsCompiler, fitaabb) - 33usize];
    ["Offset of field: mjsCompiler::degree"]
        [::core::mem::offset_of!(mjsCompiler, degree) - 34usize];
    ["Offset of field: mjsCompiler::eulerseq"]
        [::core::mem::offset_of!(mjsCompiler, eulerseq) - 35usize];
    ["Offset of field: mjsCompiler::discardvisual"]
        [::core::mem::offset_of!(mjsCompiler, discardvisual) - 38usize];
    ["Offset of field: mjsCompiler::usethread"]
        [::core::mem::offset_of!(mjsCompiler, usethread) - 39usize];
    ["Offset of field: mjsCompiler::fusestatic"]
        [::core::mem::offset_of!(mjsCompiler, fusestatic) - 40usize];
    ["Offset of field: mjsCompiler::inertiafromgeom"]
        [::core::mem::offset_of!(mjsCompiler, inertiafromgeom) - 44usize];
    ["Offset of field: mjsCompiler::inertiagrouprange"]
        [::core::mem::offset_of!(mjsCompiler, inertiagrouprange) - 48usize];
    ["Offset of field: mjsCompiler::saveinertial"]
        [::core::mem::offset_of!(mjsCompiler, saveinertial) - 56usize];
    ["Offset of field: mjsCompiler::alignfree"]
        [::core::mem::offset_of!(mjsCompiler, alignfree) - 60usize];
    ["Offset of field: mjsCompiler::LRopt"][::core::mem::offset_of!(mjsCompiler, LRopt) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjSpec {
    pub(crate) element: *mut mjsElement,
    pub(crate) modelname: *mut mjString,
    pub(crate) compiler: mjsCompiler,
    pub(crate) strippath: mjtByte,
    pub(crate) meshdir: *mut mjString,
    pub(crate) texturedir: *mut mjString,
    pub(crate) option: mjOption,
    pub(crate) visual: mjVisual,
    pub(crate) stat: mjStatistic,
    pub(crate) memory: usize,
    pub(crate) nemax: ::core::ffi::c_int,
    pub(crate) nuserdata: ::core::ffi::c_int,
    pub(crate) nuser_body: ::core::ffi::c_int,
    pub(crate) nuser_jnt: ::core::ffi::c_int,
    pub(crate) nuser_geom: ::core::ffi::c_int,
    pub(crate) nuser_site: ::core::ffi::c_int,
    pub(crate) nuser_cam: ::core::ffi::c_int,
    pub(crate) nuser_tendon: ::core::ffi::c_int,
    pub(crate) nuser_actuator: ::core::ffi::c_int,
    pub(crate) nuser_sensor: ::core::ffi::c_int,
    pub(crate) nkey: ::core::ffi::c_int,
    pub(crate) njmax: ::core::ffi::c_int,
    pub(crate) nconmax: ::core::ffi::c_int,
    pub(crate) nstack: usize,
    pub(crate) comment: *mut mjString,
    pub(crate) modelfiledir: *mut mjString,
    pub(crate) hasImplicitPluginElem: mjtByte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjSpec"][::core::mem::size_of::<mjSpec>() - 1264usize];
    ["Alignment of mjSpec"][::core::mem::align_of::<mjSpec>() - 8usize];
    ["Offset of field: mjSpec::element"][::core::mem::offset_of!(mjSpec, element) - 0usize];
    ["Offset of field: mjSpec::modelname"][::core::mem::offset_of!(mjSpec, modelname) - 8usize];
    ["Offset of field: mjSpec::compiler"][::core::mem::offset_of!(mjSpec, compiler) - 16usize];
    ["Offset of field: mjSpec::strippath"][::core::mem::offset_of!(mjSpec, strippath) - 152usize];
    ["Offset of field: mjSpec::meshdir"][::core::mem::offset_of!(mjSpec, meshdir) - 160usize];
    ["Offset of field: mjSpec::texturedir"][::core::mem::offset_of!(mjSpec, texturedir) - 168usize];
    ["Offset of field: mjSpec::option"][::core::mem::offset_of!(mjSpec, option) - 176usize];
    ["Offset of field: mjSpec::visual"][::core::mem::offset_of!(mjSpec, visual) - 480usize];
    ["Offset of field: mjSpec::stat"][::core::mem::offset_of!(mjSpec, stat) - 1112usize];
    ["Offset of field: mjSpec::memory"][::core::mem::offset_of!(mjSpec, memory) - 1168usize];
    ["Offset of field: mjSpec::nemax"][::core::mem::offset_of!(mjSpec, nemax) - 1176usize];
    ["Offset of field: mjSpec::nuserdata"][::core::mem::offset_of!(mjSpec, nuserdata) - 1180usize];
    ["Offset of field: mjSpec::nuser_body"]
        [::core::mem::offset_of!(mjSpec, nuser_body) - 1184usize];
    ["Offset of field: mjSpec::nuser_jnt"][::core::mem::offset_of!(mjSpec, nuser_jnt) - 1188usize];
    ["Offset of field: mjSpec::nuser_geom"]
        [::core::mem::offset_of!(mjSpec, nuser_geom) - 1192usize];
    ["Offset of field: mjSpec::nuser_site"]
        [::core::mem::offset_of!(mjSpec, nuser_site) - 1196usize];
    ["Offset of field: mjSpec::nuser_cam"][::core::mem::offset_of!(mjSpec, nuser_cam) - 1200usize];
    ["Offset of field: mjSpec::nuser_tendon"]
        [::core::mem::offset_of!(mjSpec, nuser_tendon) - 1204usize];
    ["Offset of field: mjSpec::nuser_actuator"]
        [::core::mem::offset_of!(mjSpec, nuser_actuator) - 1208usize];
    ["Offset of field: mjSpec::nuser_sensor"]
        [::core::mem::offset_of!(mjSpec, nuser_sensor) - 1212usize];
    ["Offset of field: mjSpec::nkey"][::core::mem::offset_of!(mjSpec, nkey) - 1216usize];
    ["Offset of field: mjSpec::njmax"][::core::mem::offset_of!(mjSpec, njmax) - 1220usize];
    ["Offset of field: mjSpec::nconmax"][::core::mem::offset_of!(mjSpec, nconmax) - 1224usize];
    ["Offset of field: mjSpec::nstack"][::core::mem::offset_of!(mjSpec, nstack) - 1232usize];
    ["Offset of field: mjSpec::comment"][::core::mem::offset_of!(mjSpec, comment) - 1240usize];
    ["Offset of field: mjSpec::modelfiledir"]
        [::core::mem::offset_of!(mjSpec, modelfiledir) - 1248usize];
    ["Offset of field: mjSpec::hasImplicitPluginElem"]
        [::core::mem::offset_of!(mjSpec, hasImplicitPluginElem) - 1256usize];
};
impl Default for mjSpec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsOrientation {
    pub(crate) type_: mjtOrientation,
    pub(crate) axisangle: [f64; 4usize],
    pub(crate) xyaxes: [f64; 6usize],
    pub(crate) zaxis: [f64; 3usize],
    pub(crate) euler: [f64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsOrientation"][::core::mem::size_of::<mjsOrientation>() - 136usize];
    ["Alignment of mjsOrientation"][::core::mem::align_of::<mjsOrientation>() - 8usize];
    ["Offset of field: mjsOrientation::type_"]
        [::core::mem::offset_of!(mjsOrientation, type_) - 0usize];
    ["Offset of field: mjsOrientation::axisangle"]
        [::core::mem::offset_of!(mjsOrientation, axisangle) - 8usize];
    ["Offset of field: mjsOrientation::xyaxes"]
        [::core::mem::offset_of!(mjsOrientation, xyaxes) - 40usize];
    ["Offset of field: mjsOrientation::zaxis"]
        [::core::mem::offset_of!(mjsOrientation, zaxis) - 88usize];
    ["Offset of field: mjsOrientation::euler"]
        [::core::mem::offset_of!(mjsOrientation, euler) - 112usize];
};
impl Default for mjsOrientation {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsPlugin {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) plugin_name: *mut mjString,
    pub(crate) active: mjtByte,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsPlugin"][::core::mem::size_of::<mjsPlugin>() - 40usize];
    ["Alignment of mjsPlugin"][::core::mem::align_of::<mjsPlugin>() - 8usize];
    ["Offset of field: mjsPlugin::element"][::core::mem::offset_of!(mjsPlugin, element) - 0usize];
    ["Offset of field: mjsPlugin::name"][::core::mem::offset_of!(mjsPlugin, name) - 8usize];
    ["Offset of field: mjsPlugin::plugin_name"]
        [::core::mem::offset_of!(mjsPlugin, plugin_name) - 16usize];
    ["Offset of field: mjsPlugin::active"][::core::mem::offset_of!(mjsPlugin, active) - 24usize];
    ["Offset of field: mjsPlugin::info"][::core::mem::offset_of!(mjsPlugin, info) - 32usize];
};
impl Default for mjsPlugin {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsBody {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) childclass: *mut mjString,
    pub(crate) pos: [f64; 3usize],
    pub(crate) quat: [f64; 4usize],
    pub(crate) alt: mjsOrientation,
    pub(crate) mass: f64,
    pub(crate) ipos: [f64; 3usize],
    pub(crate) iquat: [f64; 4usize],
    pub(crate) inertia: [f64; 3usize],
    pub(crate) ialt: mjsOrientation,
    pub(crate) fullinertia: [f64; 6usize],
    pub(crate) mocap: mjtByte,
    pub(crate) gravcomp: f64,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) explicitinertial: mjtByte,
    pub(crate) plugin: mjsPlugin,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsBody"][::core::mem::size_of::<mjsBody>() - 568usize];
    ["Alignment of mjsBody"][::core::mem::align_of::<mjsBody>() - 8usize];
    ["Offset of field: mjsBody::element"][::core::mem::offset_of!(mjsBody, element) - 0usize];
    ["Offset of field: mjsBody::name"][::core::mem::offset_of!(mjsBody, name) - 8usize];
    ["Offset of field: mjsBody::childclass"]
        [::core::mem::offset_of!(mjsBody, childclass) - 16usize];
    ["Offset of field: mjsBody::pos"][::core::mem::offset_of!(mjsBody, pos) - 24usize];
    ["Offset of field: mjsBody::quat"][::core::mem::offset_of!(mjsBody, quat) - 48usize];
    ["Offset of field: mjsBody::alt"][::core::mem::offset_of!(mjsBody, alt) - 80usize];
    ["Offset of field: mjsBody::mass"][::core::mem::offset_of!(mjsBody, mass) - 216usize];
    ["Offset of field: mjsBody::ipos"][::core::mem::offset_of!(mjsBody, ipos) - 224usize];
    ["Offset of field: mjsBody::iquat"][::core::mem::offset_of!(mjsBody, iquat) - 248usize];
    ["Offset of field: mjsBody::inertia"][::core::mem::offset_of!(mjsBody, inertia) - 280usize];
    ["Offset of field: mjsBody::ialt"][::core::mem::offset_of!(mjsBody, ialt) - 304usize];
    ["Offset of field: mjsBody::fullinertia"]
        [::core::mem::offset_of!(mjsBody, fullinertia) - 440usize];
    ["Offset of field: mjsBody::mocap"][::core::mem::offset_of!(mjsBody, mocap) - 488usize];
    ["Offset of field: mjsBody::gravcomp"][::core::mem::offset_of!(mjsBody, gravcomp) - 496usize];
    ["Offset of field: mjsBody::userdata"][::core::mem::offset_of!(mjsBody, userdata) - 504usize];
    ["Offset of field: mjsBody::explicitinertial"]
        [::core::mem::offset_of!(mjsBody, explicitinertial) - 512usize];
    ["Offset of field: mjsBody::plugin"][::core::mem::offset_of!(mjsBody, plugin) - 520usize];
    ["Offset of field: mjsBody::info"][::core::mem::offset_of!(mjsBody, info) - 560usize];
};
impl Default for mjsBody {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsFrame {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) childclass: *mut mjString,
    pub(crate) pos: [f64; 3usize],
    pub(crate) quat: [f64; 4usize],
    pub(crate) alt: mjsOrientation,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsFrame"][::core::mem::size_of::<mjsFrame>() - 224usize];
    ["Alignment of mjsFrame"][::core::mem::align_of::<mjsFrame>() - 8usize];
    ["Offset of field: mjsFrame::element"][::core::mem::offset_of!(mjsFrame, element) - 0usize];
    ["Offset of field: mjsFrame::name"][::core::mem::offset_of!(mjsFrame, name) - 8usize];
    ["Offset of field: mjsFrame::childclass"]
        [::core::mem::offset_of!(mjsFrame, childclass) - 16usize];
    ["Offset of field: mjsFrame::pos"][::core::mem::offset_of!(mjsFrame, pos) - 24usize];
    ["Offset of field: mjsFrame::quat"][::core::mem::offset_of!(mjsFrame, quat) - 48usize];
    ["Offset of field: mjsFrame::alt"][::core::mem::offset_of!(mjsFrame, alt) - 80usize];
    ["Offset of field: mjsFrame::info"][::core::mem::offset_of!(mjsFrame, info) - 216usize];
};
impl Default for mjsFrame {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsJoint {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) type_: mjtJoint,
    pub(crate) pos: [f64; 3usize],
    pub(crate) axis: [f64; 3usize],
    pub(crate) ref_: f64,
    pub(crate) align: ::core::ffi::c_int,
    pub(crate) stiffness: f64,
    pub(crate) springref: f64,
    pub(crate) springdamper: [f64; 2usize],
    pub(crate) limited: ::core::ffi::c_int,
    pub(crate) range: [f64; 2usize],
    pub(crate) margin: f64,
    pub(crate) solref_limit: [mjtNum; 2usize],
    pub(crate) solimp_limit: [mjtNum; 5usize],
    pub(crate) actfrclimited: ::core::ffi::c_int,
    pub(crate) actfrcrange: [f64; 2usize],
    pub(crate) armature: f64,
    pub(crate) damping: f64,
    pub(crate) frictionloss: f64,
    pub(crate) solref_friction: [mjtNum; 2usize],
    pub(crate) solimp_friction: [mjtNum; 5usize],
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) actgravcomp: mjtByte,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsJoint"][::core::mem::size_of::<mjsJoint>() - 336usize];
    ["Alignment of mjsJoint"][::core::mem::align_of::<mjsJoint>() - 8usize];
    ["Offset of field: mjsJoint::element"][::core::mem::offset_of!(mjsJoint, element) - 0usize];
    ["Offset of field: mjsJoint::name"][::core::mem::offset_of!(mjsJoint, name) - 8usize];
    ["Offset of field: mjsJoint::type_"][::core::mem::offset_of!(mjsJoint, type_) - 16usize];
    ["Offset of field: mjsJoint::pos"][::core::mem::offset_of!(mjsJoint, pos) - 24usize];
    ["Offset of field: mjsJoint::axis"][::core::mem::offset_of!(mjsJoint, axis) - 48usize];
    ["Offset of field: mjsJoint::ref_"][::core::mem::offset_of!(mjsJoint, ref_) - 72usize];
    ["Offset of field: mjsJoint::align"][::core::mem::offset_of!(mjsJoint, align) - 80usize];
    ["Offset of field: mjsJoint::stiffness"]
        [::core::mem::offset_of!(mjsJoint, stiffness) - 88usize];
    ["Offset of field: mjsJoint::springref"]
        [::core::mem::offset_of!(mjsJoint, springref) - 96usize];
    ["Offset of field: mjsJoint::springdamper"]
        [::core::mem::offset_of!(mjsJoint, springdamper) - 104usize];
    ["Offset of field: mjsJoint::limited"][::core::mem::offset_of!(mjsJoint, limited) - 120usize];
    ["Offset of field: mjsJoint::range"][::core::mem::offset_of!(mjsJoint, range) - 128usize];
    ["Offset of field: mjsJoint::margin"][::core::mem::offset_of!(mjsJoint, margin) - 144usize];
    ["Offset of field: mjsJoint::solref_limit"]
        [::core::mem::offset_of!(mjsJoint, solref_limit) - 152usize];
    ["Offset of field: mjsJoint::solimp_limit"]
        [::core::mem::offset_of!(mjsJoint, solimp_limit) - 168usize];
    ["Offset of field: mjsJoint::actfrclimited"]
        [::core::mem::offset_of!(mjsJoint, actfrclimited) - 208usize];
    ["Offset of field: mjsJoint::actfrcrange"]
        [::core::mem::offset_of!(mjsJoint, actfrcrange) - 216usize];
    ["Offset of field: mjsJoint::armature"][::core::mem::offset_of!(mjsJoint, armature) - 232usize];
    ["Offset of field: mjsJoint::damping"][::core::mem::offset_of!(mjsJoint, damping) - 240usize];
    ["Offset of field: mjsJoint::frictionloss"]
        [::core::mem::offset_of!(mjsJoint, frictionloss) - 248usize];
    ["Offset of field: mjsJoint::solref_friction"]
        [::core::mem::offset_of!(mjsJoint, solref_friction) - 256usize];
    ["Offset of field: mjsJoint::solimp_friction"]
        [::core::mem::offset_of!(mjsJoint, solimp_friction) - 272usize];
    ["Offset of field: mjsJoint::group"][::core::mem::offset_of!(mjsJoint, group) - 312usize];
    ["Offset of field: mjsJoint::actgravcomp"]
        [::core::mem::offset_of!(mjsJoint, actgravcomp) - 316usize];
    ["Offset of field: mjsJoint::userdata"][::core::mem::offset_of!(mjsJoint, userdata) - 320usize];
    ["Offset of field: mjsJoint::info"][::core::mem::offset_of!(mjsJoint, info) - 328usize];
};
impl Default for mjsJoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsGeom {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) type_: mjtGeom,
    pub(crate) pos: [f64; 3usize],
    pub(crate) quat: [f64; 4usize],
    pub(crate) alt: mjsOrientation,
    pub(crate) fromto: [f64; 6usize],
    pub(crate) size: [f64; 3usize],
    pub(crate) contype: ::core::ffi::c_int,
    pub(crate) conaffinity: ::core::ffi::c_int,
    pub(crate) condim: ::core::ffi::c_int,
    pub(crate) priority: ::core::ffi::c_int,
    pub(crate) friction: [f64; 3usize],
    pub(crate) solmix: f64,
    pub(crate) solref: [mjtNum; 2usize],
    pub(crate) solimp: [mjtNum; 5usize],
    pub(crate) margin: f64,
    pub(crate) gap: f64,
    pub(crate) mass: f64,
    pub(crate) density: f64,
    pub(crate) typeinertia: mjtGeomInertia,
    pub(crate) fluid_ellipsoid: mjtNum,
    pub(crate) fluid_coefs: [mjtNum; 5usize],
    pub(crate) material: *mut mjString,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) hfieldname: *mut mjString,
    pub(crate) meshname: *mut mjString,
    pub(crate) fitscale: f64,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) plugin: mjsPlugin,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsGeom"][::core::mem::size_of::<mjsGeom>() - 592usize];
    ["Alignment of mjsGeom"][::core::mem::align_of::<mjsGeom>() - 8usize];
    ["Offset of field: mjsGeom::element"][::core::mem::offset_of!(mjsGeom, element) - 0usize];
    ["Offset of field: mjsGeom::name"][::core::mem::offset_of!(mjsGeom, name) - 8usize];
    ["Offset of field: mjsGeom::type_"][::core::mem::offset_of!(mjsGeom, type_) - 16usize];
    ["Offset of field: mjsGeom::pos"][::core::mem::offset_of!(mjsGeom, pos) - 24usize];
    ["Offset of field: mjsGeom::quat"][::core::mem::offset_of!(mjsGeom, quat) - 48usize];
    ["Offset of field: mjsGeom::alt"][::core::mem::offset_of!(mjsGeom, alt) - 80usize];
    ["Offset of field: mjsGeom::fromto"][::core::mem::offset_of!(mjsGeom, fromto) - 216usize];
    ["Offset of field: mjsGeom::size"][::core::mem::offset_of!(mjsGeom, size) - 264usize];
    ["Offset of field: mjsGeom::contype"][::core::mem::offset_of!(mjsGeom, contype) - 288usize];
    ["Offset of field: mjsGeom::conaffinity"]
        [::core::mem::offset_of!(mjsGeom, conaffinity) - 292usize];
    ["Offset of field: mjsGeom::condim"][::core::mem::offset_of!(mjsGeom, condim) - 296usize];
    ["Offset of field: mjsGeom::priority"][::core::mem::offset_of!(mjsGeom, priority) - 300usize];
    ["Offset of field: mjsGeom::friction"][::core::mem::offset_of!(mjsGeom, friction) - 304usize];
    ["Offset of field: mjsGeom::solmix"][::core::mem::offset_of!(mjsGeom, solmix) - 328usize];
    ["Offset of field: mjsGeom::solref"][::core::mem::offset_of!(mjsGeom, solref) - 336usize];
    ["Offset of field: mjsGeom::solimp"][::core::mem::offset_of!(mjsGeom, solimp) - 352usize];
    ["Offset of field: mjsGeom::margin"][::core::mem::offset_of!(mjsGeom, margin) - 392usize];
    ["Offset of field: mjsGeom::gap"][::core::mem::offset_of!(mjsGeom, gap) - 400usize];
    ["Offset of field: mjsGeom::mass"][::core::mem::offset_of!(mjsGeom, mass) - 408usize];
    ["Offset of field: mjsGeom::density"][::core::mem::offset_of!(mjsGeom, density) - 416usize];
    ["Offset of field: mjsGeom::typeinertia"]
        [::core::mem::offset_of!(mjsGeom, typeinertia) - 424usize];
    ["Offset of field: mjsGeom::fluid_ellipsoid"]
        [::core::mem::offset_of!(mjsGeom, fluid_ellipsoid) - 432usize];
    ["Offset of field: mjsGeom::fluid_coefs"]
        [::core::mem::offset_of!(mjsGeom, fluid_coefs) - 440usize];
    ["Offset of field: mjsGeom::material"][::core::mem::offset_of!(mjsGeom, material) - 480usize];
    ["Offset of field: mjsGeom::rgba"][::core::mem::offset_of!(mjsGeom, rgba) - 488usize];
    ["Offset of field: mjsGeom::group"][::core::mem::offset_of!(mjsGeom, group) - 504usize];
    ["Offset of field: mjsGeom::hfieldname"]
        [::core::mem::offset_of!(mjsGeom, hfieldname) - 512usize];
    ["Offset of field: mjsGeom::meshname"][::core::mem::offset_of!(mjsGeom, meshname) - 520usize];
    ["Offset of field: mjsGeom::fitscale"][::core::mem::offset_of!(mjsGeom, fitscale) - 528usize];
    ["Offset of field: mjsGeom::userdata"][::core::mem::offset_of!(mjsGeom, userdata) - 536usize];
    ["Offset of field: mjsGeom::plugin"][::core::mem::offset_of!(mjsGeom, plugin) - 544usize];
    ["Offset of field: mjsGeom::info"][::core::mem::offset_of!(mjsGeom, info) - 584usize];
};
impl Default for mjsGeom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSite {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) pos: [f64; 3usize],
    pub(crate) quat: [f64; 4usize],
    pub(crate) alt: mjsOrientation,
    pub(crate) fromto: [f64; 6usize],
    pub(crate) size: [f64; 3usize],
    pub(crate) type_: mjtGeom,
    pub(crate) material: *mut mjString,
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSite"][::core::mem::size_of::<mjsSite>() - 336usize];
    ["Alignment of mjsSite"][::core::mem::align_of::<mjsSite>() - 8usize];
    ["Offset of field: mjsSite::element"][::core::mem::offset_of!(mjsSite, element) - 0usize];
    ["Offset of field: mjsSite::name"][::core::mem::offset_of!(mjsSite, name) - 8usize];
    ["Offset of field: mjsSite::pos"][::core::mem::offset_of!(mjsSite, pos) - 16usize];
    ["Offset of field: mjsSite::quat"][::core::mem::offset_of!(mjsSite, quat) - 40usize];
    ["Offset of field: mjsSite::alt"][::core::mem::offset_of!(mjsSite, alt) - 72usize];
    ["Offset of field: mjsSite::fromto"][::core::mem::offset_of!(mjsSite, fromto) - 208usize];
    ["Offset of field: mjsSite::size"][::core::mem::offset_of!(mjsSite, size) - 256usize];
    ["Offset of field: mjsSite::type_"][::core::mem::offset_of!(mjsSite, type_) - 280usize];
    ["Offset of field: mjsSite::material"][::core::mem::offset_of!(mjsSite, material) - 288usize];
    ["Offset of field: mjsSite::group"][::core::mem::offset_of!(mjsSite, group) - 296usize];
    ["Offset of field: mjsSite::rgba"][::core::mem::offset_of!(mjsSite, rgba) - 300usize];
    ["Offset of field: mjsSite::userdata"][::core::mem::offset_of!(mjsSite, userdata) - 320usize];
    ["Offset of field: mjsSite::info"][::core::mem::offset_of!(mjsSite, info) - 328usize];
};
impl Default for mjsSite {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsCamera {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) pos: [f64; 3usize],
    pub(crate) quat: [f64; 4usize],
    pub(crate) alt: mjsOrientation,
    pub(crate) mode: mjtCamLight,
    pub(crate) targetbody: *mut mjString,
    pub(crate) orthographic: ::core::ffi::c_int,
    pub(crate) fovy: f64,
    pub(crate) ipd: f64,
    pub(crate) intrinsic: [f32; 4usize],
    pub(crate) sensor_size: [f32; 2usize],
    pub(crate) resolution: [f32; 2usize],
    pub(crate) focal_length: [f32; 2usize],
    pub(crate) focal_pixel: [f32; 2usize],
    pub(crate) principal_length: [f32; 2usize],
    pub(crate) principal_pixel: [f32; 2usize],
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsCamera"][::core::mem::size_of::<mjsCamera>() - 328usize];
    ["Alignment of mjsCamera"][::core::mem::align_of::<mjsCamera>() - 8usize];
    ["Offset of field: mjsCamera::element"][::core::mem::offset_of!(mjsCamera, element) - 0usize];
    ["Offset of field: mjsCamera::name"][::core::mem::offset_of!(mjsCamera, name) - 8usize];
    ["Offset of field: mjsCamera::pos"][::core::mem::offset_of!(mjsCamera, pos) - 16usize];
    ["Offset of field: mjsCamera::quat"][::core::mem::offset_of!(mjsCamera, quat) - 40usize];
    ["Offset of field: mjsCamera::alt"][::core::mem::offset_of!(mjsCamera, alt) - 72usize];
    ["Offset of field: mjsCamera::mode"][::core::mem::offset_of!(mjsCamera, mode) - 208usize];
    ["Offset of field: mjsCamera::targetbody"]
        [::core::mem::offset_of!(mjsCamera, targetbody) - 216usize];
    ["Offset of field: mjsCamera::orthographic"]
        [::core::mem::offset_of!(mjsCamera, orthographic) - 224usize];
    ["Offset of field: mjsCamera::fovy"][::core::mem::offset_of!(mjsCamera, fovy) - 232usize];
    ["Offset of field: mjsCamera::ipd"][::core::mem::offset_of!(mjsCamera, ipd) - 240usize];
    ["Offset of field: mjsCamera::intrinsic"]
        [::core::mem::offset_of!(mjsCamera, intrinsic) - 248usize];
    ["Offset of field: mjsCamera::sensor_size"]
        [::core::mem::offset_of!(mjsCamera, sensor_size) - 264usize];
    ["Offset of field: mjsCamera::resolution"]
        [::core::mem::offset_of!(mjsCamera, resolution) - 272usize];
    ["Offset of field: mjsCamera::focal_length"]
        [::core::mem::offset_of!(mjsCamera, focal_length) - 280usize];
    ["Offset of field: mjsCamera::focal_pixel"]
        [::core::mem::offset_of!(mjsCamera, focal_pixel) - 288usize];
    ["Offset of field: mjsCamera::principal_length"]
        [::core::mem::offset_of!(mjsCamera, principal_length) - 296usize];
    ["Offset of field: mjsCamera::principal_pixel"]
        [::core::mem::offset_of!(mjsCamera, principal_pixel) - 304usize];
    ["Offset of field: mjsCamera::userdata"]
        [::core::mem::offset_of!(mjsCamera, userdata) - 312usize];
    ["Offset of field: mjsCamera::info"][::core::mem::offset_of!(mjsCamera, info) - 320usize];
};
impl Default for mjsCamera {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsLight {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) pos: [f64; 3usize],
    pub(crate) dir: [f64; 3usize],
    pub(crate) mode: mjtCamLight,
    pub(crate) targetbody: *mut mjString,
    pub(crate) active: mjtByte,
    pub(crate) directional: mjtByte,
    pub(crate) castshadow: mjtByte,
    pub(crate) bulbradius: f64,
    pub(crate) attenuation: [f32; 3usize],
    pub(crate) cutoff: f32,
    pub(crate) exponent: f32,
    pub(crate) ambient: [f32; 3usize],
    pub(crate) diffuse: [f32; 3usize],
    pub(crate) specular: [f32; 3usize],
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsLight"][::core::mem::size_of::<mjsLight>() - 160usize];
    ["Alignment of mjsLight"][::core::mem::align_of::<mjsLight>() - 8usize];
    ["Offset of field: mjsLight::element"][::core::mem::offset_of!(mjsLight, element) - 0usize];
    ["Offset of field: mjsLight::name"][::core::mem::offset_of!(mjsLight, name) - 8usize];
    ["Offset of field: mjsLight::pos"][::core::mem::offset_of!(mjsLight, pos) - 16usize];
    ["Offset of field: mjsLight::dir"][::core::mem::offset_of!(mjsLight, dir) - 40usize];
    ["Offset of field: mjsLight::mode"][::core::mem::offset_of!(mjsLight, mode) - 64usize];
    ["Offset of field: mjsLight::targetbody"]
        [::core::mem::offset_of!(mjsLight, targetbody) - 72usize];
    ["Offset of field: mjsLight::active"][::core::mem::offset_of!(mjsLight, active) - 80usize];
    ["Offset of field: mjsLight::directional"]
        [::core::mem::offset_of!(mjsLight, directional) - 81usize];
    ["Offset of field: mjsLight::castshadow"]
        [::core::mem::offset_of!(mjsLight, castshadow) - 82usize];
    ["Offset of field: mjsLight::bulbradius"]
        [::core::mem::offset_of!(mjsLight, bulbradius) - 88usize];
    ["Offset of field: mjsLight::attenuation"]
        [::core::mem::offset_of!(mjsLight, attenuation) - 96usize];
    ["Offset of field: mjsLight::cutoff"][::core::mem::offset_of!(mjsLight, cutoff) - 108usize];
    ["Offset of field: mjsLight::exponent"][::core::mem::offset_of!(mjsLight, exponent) - 112usize];
    ["Offset of field: mjsLight::ambient"][::core::mem::offset_of!(mjsLight, ambient) - 116usize];
    ["Offset of field: mjsLight::diffuse"][::core::mem::offset_of!(mjsLight, diffuse) - 128usize];
    ["Offset of field: mjsLight::specular"][::core::mem::offset_of!(mjsLight, specular) - 140usize];
    ["Offset of field: mjsLight::info"][::core::mem::offset_of!(mjsLight, info) - 152usize];
};
impl Default for mjsLight {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsFlex {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) contype: ::core::ffi::c_int,
    pub(crate) conaffinity: ::core::ffi::c_int,
    pub(crate) condim: ::core::ffi::c_int,
    pub(crate) priority: ::core::ffi::c_int,
    pub(crate) friction: [f64; 3usize],
    pub(crate) solmix: f64,
    pub(crate) solref: [mjtNum; 2usize],
    pub(crate) solimp: [mjtNum; 5usize],
    pub(crate) margin: f64,
    pub(crate) gap: f64,
    pub(crate) dim: ::core::ffi::c_int,
    pub(crate) radius: f64,
    pub(crate) internal: mjtByte,
    pub(crate) flatskin: mjtByte,
    pub(crate) selfcollide: ::core::ffi::c_int,
    pub(crate) activelayers: ::core::ffi::c_int,
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) edgestiffness: f64,
    pub(crate) edgedamping: f64,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) material: *mut mjString,
    pub(crate) young: f64,
    pub(crate) poisson: f64,
    pub(crate) damping: f64,
    pub(crate) thickness: f64,
    pub(crate) nodebody: *mut mjStringVec,
    pub(crate) vertbody: *mut mjStringVec,
    pub(crate) node: *mut mjDoubleVec,
    pub(crate) vert: *mut mjDoubleVec,
    pub(crate) elem: *mut mjIntVec,
    pub(crate) texcoord: *mut mjFloatVec,
    pub(crate) elemtexcoord: *mut mjIntVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsFlex"][::core::mem::size_of::<mjsFlex>() - 304usize];
    ["Alignment of mjsFlex"][::core::mem::align_of::<mjsFlex>() - 8usize];
    ["Offset of field: mjsFlex::element"][::core::mem::offset_of!(mjsFlex, element) - 0usize];
    ["Offset of field: mjsFlex::name"][::core::mem::offset_of!(mjsFlex, name) - 8usize];
    ["Offset of field: mjsFlex::contype"][::core::mem::offset_of!(mjsFlex, contype) - 16usize];
    ["Offset of field: mjsFlex::conaffinity"]
        [::core::mem::offset_of!(mjsFlex, conaffinity) - 20usize];
    ["Offset of field: mjsFlex::condim"][::core::mem::offset_of!(mjsFlex, condim) - 24usize];
    ["Offset of field: mjsFlex::priority"][::core::mem::offset_of!(mjsFlex, priority) - 28usize];
    ["Offset of field: mjsFlex::friction"][::core::mem::offset_of!(mjsFlex, friction) - 32usize];
    ["Offset of field: mjsFlex::solmix"][::core::mem::offset_of!(mjsFlex, solmix) - 56usize];
    ["Offset of field: mjsFlex::solref"][::core::mem::offset_of!(mjsFlex, solref) - 64usize];
    ["Offset of field: mjsFlex::solimp"][::core::mem::offset_of!(mjsFlex, solimp) - 80usize];
    ["Offset of field: mjsFlex::margin"][::core::mem::offset_of!(mjsFlex, margin) - 120usize];
    ["Offset of field: mjsFlex::gap"][::core::mem::offset_of!(mjsFlex, gap) - 128usize];
    ["Offset of field: mjsFlex::dim"][::core::mem::offset_of!(mjsFlex, dim) - 136usize];
    ["Offset of field: mjsFlex::radius"][::core::mem::offset_of!(mjsFlex, radius) - 144usize];
    ["Offset of field: mjsFlex::internal"][::core::mem::offset_of!(mjsFlex, internal) - 152usize];
    ["Offset of field: mjsFlex::flatskin"][::core::mem::offset_of!(mjsFlex, flatskin) - 153usize];
    ["Offset of field: mjsFlex::selfcollide"]
        [::core::mem::offset_of!(mjsFlex, selfcollide) - 156usize];
    ["Offset of field: mjsFlex::activelayers"]
        [::core::mem::offset_of!(mjsFlex, activelayers) - 160usize];
    ["Offset of field: mjsFlex::group"][::core::mem::offset_of!(mjsFlex, group) - 164usize];
    ["Offset of field: mjsFlex::edgestiffness"]
        [::core::mem::offset_of!(mjsFlex, edgestiffness) - 168usize];
    ["Offset of field: mjsFlex::edgedamping"]
        [::core::mem::offset_of!(mjsFlex, edgedamping) - 176usize];
    ["Offset of field: mjsFlex::rgba"][::core::mem::offset_of!(mjsFlex, rgba) - 184usize];
    ["Offset of field: mjsFlex::material"][::core::mem::offset_of!(mjsFlex, material) - 200usize];
    ["Offset of field: mjsFlex::young"][::core::mem::offset_of!(mjsFlex, young) - 208usize];
    ["Offset of field: mjsFlex::poisson"][::core::mem::offset_of!(mjsFlex, poisson) - 216usize];
    ["Offset of field: mjsFlex::damping"][::core::mem::offset_of!(mjsFlex, damping) - 224usize];
    ["Offset of field: mjsFlex::thickness"][::core::mem::offset_of!(mjsFlex, thickness) - 232usize];
    ["Offset of field: mjsFlex::nodebody"][::core::mem::offset_of!(mjsFlex, nodebody) - 240usize];
    ["Offset of field: mjsFlex::vertbody"][::core::mem::offset_of!(mjsFlex, vertbody) - 248usize];
    ["Offset of field: mjsFlex::node"][::core::mem::offset_of!(mjsFlex, node) - 256usize];
    ["Offset of field: mjsFlex::vert"][::core::mem::offset_of!(mjsFlex, vert) - 264usize];
    ["Offset of field: mjsFlex::elem"][::core::mem::offset_of!(mjsFlex, elem) - 272usize];
    ["Offset of field: mjsFlex::texcoord"][::core::mem::offset_of!(mjsFlex, texcoord) - 280usize];
    ["Offset of field: mjsFlex::elemtexcoord"]
        [::core::mem::offset_of!(mjsFlex, elemtexcoord) - 288usize];
    ["Offset of field: mjsFlex::info"][::core::mem::offset_of!(mjsFlex, info) - 296usize];
};
impl Default for mjsFlex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsMesh {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) content_type: *mut mjString,
    pub(crate) file: *mut mjString,
    pub(crate) refpos: [f64; 3usize],
    pub(crate) refquat: [f64; 4usize],
    pub(crate) scale: [f64; 3usize],
    pub(crate) inertia: mjtMeshInertia,
    pub(crate) smoothnormal: mjtByte,
    pub(crate) maxhullvert: ::core::ffi::c_int,
    pub(crate) uservert: *mut mjFloatVec,
    pub(crate) usernormal: *mut mjFloatVec,
    pub(crate) usertexcoord: *mut mjFloatVec,
    pub(crate) userface: *mut mjIntVec,
    pub(crate) userfacetexcoord: *mut mjIntVec,
    pub(crate) plugin: mjsPlugin,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsMesh"][::core::mem::size_of::<mjsMesh>() - 216usize];
    ["Alignment of mjsMesh"][::core::mem::align_of::<mjsMesh>() - 8usize];
    ["Offset of field: mjsMesh::element"][::core::mem::offset_of!(mjsMesh, element) - 0usize];
    ["Offset of field: mjsMesh::name"][::core::mem::offset_of!(mjsMesh, name) - 8usize];
    ["Offset of field: mjsMesh::content_type"]
        [::core::mem::offset_of!(mjsMesh, content_type) - 16usize];
    ["Offset of field: mjsMesh::file"][::core::mem::offset_of!(mjsMesh, file) - 24usize];
    ["Offset of field: mjsMesh::refpos"][::core::mem::offset_of!(mjsMesh, refpos) - 32usize];
    ["Offset of field: mjsMesh::refquat"][::core::mem::offset_of!(mjsMesh, refquat) - 56usize];
    ["Offset of field: mjsMesh::scale"][::core::mem::offset_of!(mjsMesh, scale) - 88usize];
    ["Offset of field: mjsMesh::inertia"][::core::mem::offset_of!(mjsMesh, inertia) - 112usize];
    ["Offset of field: mjsMesh::smoothnormal"]
        [::core::mem::offset_of!(mjsMesh, smoothnormal) - 116usize];
    ["Offset of field: mjsMesh::maxhullvert"]
        [::core::mem::offset_of!(mjsMesh, maxhullvert) - 120usize];
    ["Offset of field: mjsMesh::uservert"][::core::mem::offset_of!(mjsMesh, uservert) - 128usize];
    ["Offset of field: mjsMesh::usernormal"]
        [::core::mem::offset_of!(mjsMesh, usernormal) - 136usize];
    ["Offset of field: mjsMesh::usertexcoord"]
        [::core::mem::offset_of!(mjsMesh, usertexcoord) - 144usize];
    ["Offset of field: mjsMesh::userface"][::core::mem::offset_of!(mjsMesh, userface) - 152usize];
    ["Offset of field: mjsMesh::userfacetexcoord"]
        [::core::mem::offset_of!(mjsMesh, userfacetexcoord) - 160usize];
    ["Offset of field: mjsMesh::plugin"][::core::mem::offset_of!(mjsMesh, plugin) - 168usize];
    ["Offset of field: mjsMesh::info"][::core::mem::offset_of!(mjsMesh, info) - 208usize];
};
impl Default for mjsMesh {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsHField {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) content_type: *mut mjString,
    pub(crate) file: *mut mjString,
    pub(crate) size: [f64; 4usize],
    pub(crate) nrow: ::core::ffi::c_int,
    pub(crate) ncol: ::core::ffi::c_int,
    pub(crate) userdata: *mut mjFloatVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsHField"][::core::mem::size_of::<mjsHField>() - 88usize];
    ["Alignment of mjsHField"][::core::mem::align_of::<mjsHField>() - 8usize];
    ["Offset of field: mjsHField::element"][::core::mem::offset_of!(mjsHField, element) - 0usize];
    ["Offset of field: mjsHField::name"][::core::mem::offset_of!(mjsHField, name) - 8usize];
    ["Offset of field: mjsHField::content_type"]
        [::core::mem::offset_of!(mjsHField, content_type) - 16usize];
    ["Offset of field: mjsHField::file"][::core::mem::offset_of!(mjsHField, file) - 24usize];
    ["Offset of field: mjsHField::size"][::core::mem::offset_of!(mjsHField, size) - 32usize];
    ["Offset of field: mjsHField::nrow"][::core::mem::offset_of!(mjsHField, nrow) - 64usize];
    ["Offset of field: mjsHField::ncol"][::core::mem::offset_of!(mjsHField, ncol) - 68usize];
    ["Offset of field: mjsHField::userdata"]
        [::core::mem::offset_of!(mjsHField, userdata) - 72usize];
    ["Offset of field: mjsHField::info"][::core::mem::offset_of!(mjsHField, info) - 80usize];
};
impl Default for mjsHField {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSkin {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) file: *mut mjString,
    pub(crate) material: *mut mjString,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) inflate: f32,
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) vert: *mut mjFloatVec,
    pub(crate) texcoord: *mut mjFloatVec,
    pub(crate) face: *mut mjIntVec,
    pub(crate) bodyname: *mut mjStringVec,
    pub(crate) bindpos: *mut mjFloatVec,
    pub(crate) bindquat: *mut mjFloatVec,
    pub(crate) vertid: *mut mjIntVecVec,
    pub(crate) vertweight: *mut mjFloatVecVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSkin"][::core::mem::size_of::<mjsSkin>() - 128usize];
    ["Alignment of mjsSkin"][::core::mem::align_of::<mjsSkin>() - 8usize];
    ["Offset of field: mjsSkin::element"][::core::mem::offset_of!(mjsSkin, element) - 0usize];
    ["Offset of field: mjsSkin::name"][::core::mem::offset_of!(mjsSkin, name) - 8usize];
    ["Offset of field: mjsSkin::file"][::core::mem::offset_of!(mjsSkin, file) - 16usize];
    ["Offset of field: mjsSkin::material"][::core::mem::offset_of!(mjsSkin, material) - 24usize];
    ["Offset of field: mjsSkin::rgba"][::core::mem::offset_of!(mjsSkin, rgba) - 32usize];
    ["Offset of field: mjsSkin::inflate"][::core::mem::offset_of!(mjsSkin, inflate) - 48usize];
    ["Offset of field: mjsSkin::group"][::core::mem::offset_of!(mjsSkin, group) - 52usize];
    ["Offset of field: mjsSkin::vert"][::core::mem::offset_of!(mjsSkin, vert) - 56usize];
    ["Offset of field: mjsSkin::texcoord"][::core::mem::offset_of!(mjsSkin, texcoord) - 64usize];
    ["Offset of field: mjsSkin::face"][::core::mem::offset_of!(mjsSkin, face) - 72usize];
    ["Offset of field: mjsSkin::bodyname"][::core::mem::offset_of!(mjsSkin, bodyname) - 80usize];
    ["Offset of field: mjsSkin::bindpos"][::core::mem::offset_of!(mjsSkin, bindpos) - 88usize];
    ["Offset of field: mjsSkin::bindquat"][::core::mem::offset_of!(mjsSkin, bindquat) - 96usize];
    ["Offset of field: mjsSkin::vertid"][::core::mem::offset_of!(mjsSkin, vertid) - 104usize];
    ["Offset of field: mjsSkin::vertweight"]
        [::core::mem::offset_of!(mjsSkin, vertweight) - 112usize];
    ["Offset of field: mjsSkin::info"][::core::mem::offset_of!(mjsSkin, info) - 120usize];
};
impl Default for mjsSkin {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTexture {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) type_: mjtTexture,
    pub(crate) builtin: ::core::ffi::c_int,
    pub(crate) mark: ::core::ffi::c_int,
    pub(crate) rgb1: [f64; 3usize],
    pub(crate) rgb2: [f64; 3usize],
    pub(crate) markrgb: [f64; 3usize],
    pub(crate) random: f64,
    pub(crate) height: ::core::ffi::c_int,
    pub(crate) width: ::core::ffi::c_int,
    pub(crate) nchannel: ::core::ffi::c_int,
    pub(crate) content_type: *mut mjString,
    pub(crate) file: *mut mjString,
    pub(crate) gridsize: [::core::ffi::c_int; 2usize],
    pub(crate) gridlayout: [::core::ffi::c_char; 13usize],
    pub(crate) cubefiles: *mut mjStringVec,
    pub(crate) data: *mut mjByteVec,
    pub(crate) hflip: mjtByte,
    pub(crate) vflip: mjtByte,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTexture"][::core::mem::size_of::<mjsTexture>() - 200usize];
    ["Alignment of mjsTexture"][::core::mem::align_of::<mjsTexture>() - 8usize];
    ["Offset of field: mjsTexture::element"][::core::mem::offset_of!(mjsTexture, element) - 0usize];
    ["Offset of field: mjsTexture::name"][::core::mem::offset_of!(mjsTexture, name) - 8usize];
    ["Offset of field: mjsTexture::type_"][::core::mem::offset_of!(mjsTexture, type_) - 16usize];
    ["Offset of field: mjsTexture::builtin"]
        [::core::mem::offset_of!(mjsTexture, builtin) - 20usize];
    ["Offset of field: mjsTexture::mark"][::core::mem::offset_of!(mjsTexture, mark) - 24usize];
    ["Offset of field: mjsTexture::rgb1"][::core::mem::offset_of!(mjsTexture, rgb1) - 32usize];
    ["Offset of field: mjsTexture::rgb2"][::core::mem::offset_of!(mjsTexture, rgb2) - 56usize];
    ["Offset of field: mjsTexture::markrgb"]
        [::core::mem::offset_of!(mjsTexture, markrgb) - 80usize];
    ["Offset of field: mjsTexture::random"][::core::mem::offset_of!(mjsTexture, random) - 104usize];
    ["Offset of field: mjsTexture::height"][::core::mem::offset_of!(mjsTexture, height) - 112usize];
    ["Offset of field: mjsTexture::width"][::core::mem::offset_of!(mjsTexture, width) - 116usize];
    ["Offset of field: mjsTexture::nchannel"]
        [::core::mem::offset_of!(mjsTexture, nchannel) - 120usize];
    ["Offset of field: mjsTexture::content_type"]
        [::core::mem::offset_of!(mjsTexture, content_type) - 128usize];
    ["Offset of field: mjsTexture::file"][::core::mem::offset_of!(mjsTexture, file) - 136usize];
    ["Offset of field: mjsTexture::gridsize"]
        [::core::mem::offset_of!(mjsTexture, gridsize) - 144usize];
    ["Offset of field: mjsTexture::gridlayout"]
        [::core::mem::offset_of!(mjsTexture, gridlayout) - 152usize];
    ["Offset of field: mjsTexture::cubefiles"]
        [::core::mem::offset_of!(mjsTexture, cubefiles) - 168usize];
    ["Offset of field: mjsTexture::data"][::core::mem::offset_of!(mjsTexture, data) - 176usize];
    ["Offset of field: mjsTexture::hflip"][::core::mem::offset_of!(mjsTexture, hflip) - 184usize];
    ["Offset of field: mjsTexture::vflip"][::core::mem::offset_of!(mjsTexture, vflip) - 185usize];
    ["Offset of field: mjsTexture::info"][::core::mem::offset_of!(mjsTexture, info) - 192usize];
};
impl Default for mjsTexture {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsMaterial {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) textures: *mut mjStringVec,
    pub(crate) texuniform: mjtByte,
    pub(crate) texrepeat: [f32; 2usize],
    pub(crate) emission: f32,
    pub(crate) specular: f32,
    pub(crate) shininess: f32,
    pub(crate) reflectance: f32,
    pub(crate) metallic: f32,
    pub(crate) roughness: f32,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsMaterial"][::core::mem::size_of::<mjsMaterial>() - 88usize];
    ["Alignment of mjsMaterial"][::core::mem::align_of::<mjsMaterial>() - 8usize];
    ["Offset of field: mjsMaterial::element"]
        [::core::mem::offset_of!(mjsMaterial, element) - 0usize];
    ["Offset of field: mjsMaterial::name"][::core::mem::offset_of!(mjsMaterial, name) - 8usize];
    ["Offset of field: mjsMaterial::textures"]
        [::core::mem::offset_of!(mjsMaterial, textures) - 16usize];
    ["Offset of field: mjsMaterial::texuniform"]
        [::core::mem::offset_of!(mjsMaterial, texuniform) - 24usize];
    ["Offset of field: mjsMaterial::texrepeat"]
        [::core::mem::offset_of!(mjsMaterial, texrepeat) - 28usize];
    ["Offset of field: mjsMaterial::emission"]
        [::core::mem::offset_of!(mjsMaterial, emission) - 36usize];
    ["Offset of field: mjsMaterial::specular"]
        [::core::mem::offset_of!(mjsMaterial, specular) - 40usize];
    ["Offset of field: mjsMaterial::shininess"]
        [::core::mem::offset_of!(mjsMaterial, shininess) - 44usize];
    ["Offset of field: mjsMaterial::reflectance"]
        [::core::mem::offset_of!(mjsMaterial, reflectance) - 48usize];
    ["Offset of field: mjsMaterial::metallic"]
        [::core::mem::offset_of!(mjsMaterial, metallic) - 52usize];
    ["Offset of field: mjsMaterial::roughness"]
        [::core::mem::offset_of!(mjsMaterial, roughness) - 56usize];
    ["Offset of field: mjsMaterial::rgba"][::core::mem::offset_of!(mjsMaterial, rgba) - 60usize];
    ["Offset of field: mjsMaterial::info"][::core::mem::offset_of!(mjsMaterial, info) - 80usize];
};
impl Default for mjsMaterial {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsPair {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) geomname1: *mut mjString,
    pub(crate) geomname2: *mut mjString,
    pub(crate) condim: ::core::ffi::c_int,
    pub(crate) solref: [mjtNum; 2usize],
    pub(crate) solreffriction: [mjtNum; 2usize],
    pub(crate) solimp: [mjtNum; 5usize],
    pub(crate) margin: f64,
    pub(crate) gap: f64,
    pub(crate) friction: [f64; 5usize],
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsPair"][::core::mem::size_of::<mjsPair>() - 176usize];
    ["Alignment of mjsPair"][::core::mem::align_of::<mjsPair>() - 8usize];
    ["Offset of field: mjsPair::element"][::core::mem::offset_of!(mjsPair, element) - 0usize];
    ["Offset of field: mjsPair::name"][::core::mem::offset_of!(mjsPair, name) - 8usize];
    ["Offset of field: mjsPair::geomname1"][::core::mem::offset_of!(mjsPair, geomname1) - 16usize];
    ["Offset of field: mjsPair::geomname2"][::core::mem::offset_of!(mjsPair, geomname2) - 24usize];
    ["Offset of field: mjsPair::condim"][::core::mem::offset_of!(mjsPair, condim) - 32usize];
    ["Offset of field: mjsPair::solref"][::core::mem::offset_of!(mjsPair, solref) - 40usize];
    ["Offset of field: mjsPair::solreffriction"]
        [::core::mem::offset_of!(mjsPair, solreffriction) - 56usize];
    ["Offset of field: mjsPair::solimp"][::core::mem::offset_of!(mjsPair, solimp) - 72usize];
    ["Offset of field: mjsPair::margin"][::core::mem::offset_of!(mjsPair, margin) - 112usize];
    ["Offset of field: mjsPair::gap"][::core::mem::offset_of!(mjsPair, gap) - 120usize];
    ["Offset of field: mjsPair::friction"][::core::mem::offset_of!(mjsPair, friction) - 128usize];
    ["Offset of field: mjsPair::info"][::core::mem::offset_of!(mjsPair, info) - 168usize];
};
impl Default for mjsPair {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsExclude {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) bodyname1: *mut mjString,
    pub(crate) bodyname2: *mut mjString,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsExclude"][::core::mem::size_of::<mjsExclude>() - 40usize];
    ["Alignment of mjsExclude"][::core::mem::align_of::<mjsExclude>() - 8usize];
    ["Offset of field: mjsExclude::element"][::core::mem::offset_of!(mjsExclude, element) - 0usize];
    ["Offset of field: mjsExclude::name"][::core::mem::offset_of!(mjsExclude, name) - 8usize];
    ["Offset of field: mjsExclude::bodyname1"]
        [::core::mem::offset_of!(mjsExclude, bodyname1) - 16usize];
    ["Offset of field: mjsExclude::bodyname2"]
        [::core::mem::offset_of!(mjsExclude, bodyname2) - 24usize];
    ["Offset of field: mjsExclude::info"][::core::mem::offset_of!(mjsExclude, info) - 32usize];
};
impl Default for mjsExclude {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsEquality {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) type_: mjtEq,
    pub(crate) data: [f64; 11usize],
    pub(crate) active: mjtByte,
    pub(crate) name1: *mut mjString,
    pub(crate) name2: *mut mjString,
    pub(crate) objtype: mjtObj,
    pub(crate) solref: [mjtNum; 2usize],
    pub(crate) solimp: [mjtNum; 5usize],
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsEquality"][::core::mem::size_of::<mjsEquality>() - 208usize];
    ["Alignment of mjsEquality"][::core::mem::align_of::<mjsEquality>() - 8usize];
    ["Offset of field: mjsEquality::element"]
        [::core::mem::offset_of!(mjsEquality, element) - 0usize];
    ["Offset of field: mjsEquality::name"][::core::mem::offset_of!(mjsEquality, name) - 8usize];
    ["Offset of field: mjsEquality::type_"][::core::mem::offset_of!(mjsEquality, type_) - 16usize];
    ["Offset of field: mjsEquality::data"][::core::mem::offset_of!(mjsEquality, data) - 24usize];
    ["Offset of field: mjsEquality::active"]
        [::core::mem::offset_of!(mjsEquality, active) - 112usize];
    ["Offset of field: mjsEquality::name1"][::core::mem::offset_of!(mjsEquality, name1) - 120usize];
    ["Offset of field: mjsEquality::name2"][::core::mem::offset_of!(mjsEquality, name2) - 128usize];
    ["Offset of field: mjsEquality::objtype"]
        [::core::mem::offset_of!(mjsEquality, objtype) - 136usize];
    ["Offset of field: mjsEquality::solref"]
        [::core::mem::offset_of!(mjsEquality, solref) - 144usize];
    ["Offset of field: mjsEquality::solimp"]
        [::core::mem::offset_of!(mjsEquality, solimp) - 160usize];
    ["Offset of field: mjsEquality::info"][::core::mem::offset_of!(mjsEquality, info) - 200usize];
};
impl Default for mjsEquality {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTendon {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) stiffness: f64,
    pub(crate) springlength: [f64; 2usize],
    pub(crate) damping: f64,
    pub(crate) frictionloss: f64,
    pub(crate) solref_friction: [mjtNum; 2usize],
    pub(crate) solimp_friction: [mjtNum; 5usize],
    pub(crate) armature: f64,
    pub(crate) limited: ::core::ffi::c_int,
    pub(crate) actfrclimited: ::core::ffi::c_int,
    pub(crate) range: [f64; 2usize],
    pub(crate) actfrcrange: [f64; 2usize],
    pub(crate) margin: f64,
    pub(crate) solref_limit: [mjtNum; 2usize],
    pub(crate) solimp_limit: [mjtNum; 5usize],
    pub(crate) material: *mut mjString,
    pub(crate) width: f64,
    pub(crate) rgba: [f32; 4usize],
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTendon"][::core::mem::size_of::<mjsTendon>() - 280usize];
    ["Alignment of mjsTendon"][::core::mem::align_of::<mjsTendon>() - 8usize];
    ["Offset of field: mjsTendon::element"][::core::mem::offset_of!(mjsTendon, element) - 0usize];
    ["Offset of field: mjsTendon::name"][::core::mem::offset_of!(mjsTendon, name) - 8usize];
    ["Offset of field: mjsTendon::stiffness"]
        [::core::mem::offset_of!(mjsTendon, stiffness) - 16usize];
    ["Offset of field: mjsTendon::springlength"]
        [::core::mem::offset_of!(mjsTendon, springlength) - 24usize];
    ["Offset of field: mjsTendon::damping"][::core::mem::offset_of!(mjsTendon, damping) - 40usize];
    ["Offset of field: mjsTendon::frictionloss"]
        [::core::mem::offset_of!(mjsTendon, frictionloss) - 48usize];
    ["Offset of field: mjsTendon::solref_friction"]
        [::core::mem::offset_of!(mjsTendon, solref_friction) - 56usize];
    ["Offset of field: mjsTendon::solimp_friction"]
        [::core::mem::offset_of!(mjsTendon, solimp_friction) - 72usize];
    ["Offset of field: mjsTendon::armature"]
        [::core::mem::offset_of!(mjsTendon, armature) - 112usize];
    ["Offset of field: mjsTendon::limited"][::core::mem::offset_of!(mjsTendon, limited) - 120usize];
    ["Offset of field: mjsTendon::actfrclimited"]
        [::core::mem::offset_of!(mjsTendon, actfrclimited) - 124usize];
    ["Offset of field: mjsTendon::range"][::core::mem::offset_of!(mjsTendon, range) - 128usize];
    ["Offset of field: mjsTendon::actfrcrange"]
        [::core::mem::offset_of!(mjsTendon, actfrcrange) - 144usize];
    ["Offset of field: mjsTendon::margin"][::core::mem::offset_of!(mjsTendon, margin) - 160usize];
    ["Offset of field: mjsTendon::solref_limit"]
        [::core::mem::offset_of!(mjsTendon, solref_limit) - 168usize];
    ["Offset of field: mjsTendon::solimp_limit"]
        [::core::mem::offset_of!(mjsTendon, solimp_limit) - 184usize];
    ["Offset of field: mjsTendon::material"]
        [::core::mem::offset_of!(mjsTendon, material) - 224usize];
    ["Offset of field: mjsTendon::width"][::core::mem::offset_of!(mjsTendon, width) - 232usize];
    ["Offset of field: mjsTendon::rgba"][::core::mem::offset_of!(mjsTendon, rgba) - 240usize];
    ["Offset of field: mjsTendon::group"][::core::mem::offset_of!(mjsTendon, group) - 256usize];
    ["Offset of field: mjsTendon::userdata"]
        [::core::mem::offset_of!(mjsTendon, userdata) - 264usize];
    ["Offset of field: mjsTendon::info"][::core::mem::offset_of!(mjsTendon, info) - 272usize];
};
impl Default for mjsTendon {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsWrap {
    pub(crate) element: *mut mjsElement,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsWrap"][::core::mem::size_of::<mjsWrap>() - 16usize];
    ["Alignment of mjsWrap"][::core::mem::align_of::<mjsWrap>() - 8usize];
    ["Offset of field: mjsWrap::element"][::core::mem::offset_of!(mjsWrap, element) - 0usize];
    ["Offset of field: mjsWrap::info"][::core::mem::offset_of!(mjsWrap, info) - 8usize];
};
impl Default for mjsWrap {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsActuator {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) gaintype: mjtGain,
    pub(crate) gainprm: [f64; 10usize],
    pub(crate) biastype: mjtBias,
    pub(crate) biasprm: [f64; 10usize],
    pub(crate) dyntype: mjtDyn,
    pub(crate) dynprm: [f64; 10usize],
    pub(crate) actdim: ::core::ffi::c_int,
    pub(crate) actearly: mjtByte,
    pub(crate) trntype: mjtTrn,
    pub(crate) gear: [f64; 6usize],
    pub(crate) target: *mut mjString,
    pub(crate) refsite: *mut mjString,
    pub(crate) slidersite: *mut mjString,
    pub(crate) cranklength: f64,
    pub(crate) lengthrange: [f64; 2usize],
    pub(crate) inheritrange: f64,
    pub(crate) ctrllimited: ::core::ffi::c_int,
    pub(crate) ctrlrange: [f64; 2usize],
    pub(crate) forcelimited: ::core::ffi::c_int,
    pub(crate) forcerange: [f64; 2usize],
    pub(crate) actlimited: ::core::ffi::c_int,
    pub(crate) actrange: [f64; 2usize],
    pub(crate) group: ::core::ffi::c_int,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) plugin: mjsPlugin,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsActuator"][::core::mem::size_of::<mjsActuator>() - 536usize];
    ["Alignment of mjsActuator"][::core::mem::align_of::<mjsActuator>() - 8usize];
    ["Offset of field: mjsActuator::element"]
        [::core::mem::offset_of!(mjsActuator, element) - 0usize];
    ["Offset of field: mjsActuator::name"][::core::mem::offset_of!(mjsActuator, name) - 8usize];
    ["Offset of field: mjsActuator::gaintype"]
        [::core::mem::offset_of!(mjsActuator, gaintype) - 16usize];
    ["Offset of field: mjsActuator::gainprm"]
        [::core::mem::offset_of!(mjsActuator, gainprm) - 24usize];
    ["Offset of field: mjsActuator::biastype"]
        [::core::mem::offset_of!(mjsActuator, biastype) - 104usize];
    ["Offset of field: mjsActuator::biasprm"]
        [::core::mem::offset_of!(mjsActuator, biasprm) - 112usize];
    ["Offset of field: mjsActuator::dyntype"]
        [::core::mem::offset_of!(mjsActuator, dyntype) - 192usize];
    ["Offset of field: mjsActuator::dynprm"]
        [::core::mem::offset_of!(mjsActuator, dynprm) - 200usize];
    ["Offset of field: mjsActuator::actdim"]
        [::core::mem::offset_of!(mjsActuator, actdim) - 280usize];
    ["Offset of field: mjsActuator::actearly"]
        [::core::mem::offset_of!(mjsActuator, actearly) - 284usize];
    ["Offset of field: mjsActuator::trntype"]
        [::core::mem::offset_of!(mjsActuator, trntype) - 288usize];
    ["Offset of field: mjsActuator::gear"][::core::mem::offset_of!(mjsActuator, gear) - 296usize];
    ["Offset of field: mjsActuator::target"]
        [::core::mem::offset_of!(mjsActuator, target) - 344usize];
    ["Offset of field: mjsActuator::refsite"]
        [::core::mem::offset_of!(mjsActuator, refsite) - 352usize];
    ["Offset of field: mjsActuator::slidersite"]
        [::core::mem::offset_of!(mjsActuator, slidersite) - 360usize];
    ["Offset of field: mjsActuator::cranklength"]
        [::core::mem::offset_of!(mjsActuator, cranklength) - 368usize];
    ["Offset of field: mjsActuator::lengthrange"]
        [::core::mem::offset_of!(mjsActuator, lengthrange) - 376usize];
    ["Offset of field: mjsActuator::inheritrange"]
        [::core::mem::offset_of!(mjsActuator, inheritrange) - 392usize];
    ["Offset of field: mjsActuator::ctrllimited"]
        [::core::mem::offset_of!(mjsActuator, ctrllimited) - 400usize];
    ["Offset of field: mjsActuator::ctrlrange"]
        [::core::mem::offset_of!(mjsActuator, ctrlrange) - 408usize];
    ["Offset of field: mjsActuator::forcelimited"]
        [::core::mem::offset_of!(mjsActuator, forcelimited) - 424usize];
    ["Offset of field: mjsActuator::forcerange"]
        [::core::mem::offset_of!(mjsActuator, forcerange) - 432usize];
    ["Offset of field: mjsActuator::actlimited"]
        [::core::mem::offset_of!(mjsActuator, actlimited) - 448usize];
    ["Offset of field: mjsActuator::actrange"]
        [::core::mem::offset_of!(mjsActuator, actrange) - 456usize];
    ["Offset of field: mjsActuator::group"][::core::mem::offset_of!(mjsActuator, group) - 472usize];
    ["Offset of field: mjsActuator::userdata"]
        [::core::mem::offset_of!(mjsActuator, userdata) - 480usize];
    ["Offset of field: mjsActuator::plugin"]
        [::core::mem::offset_of!(mjsActuator, plugin) - 488usize];
    ["Offset of field: mjsActuator::info"][::core::mem::offset_of!(mjsActuator, info) - 528usize];
};
impl Default for mjsActuator {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsSensor {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) type_: mjtSensor,
    pub(crate) objtype: mjtObj,
    pub(crate) objname: *mut mjString,
    pub(crate) reftype: mjtObj,
    pub(crate) refname: *mut mjString,
    pub(crate) datatype: mjtDataType,
    pub(crate) needstage: mjtStage,
    pub(crate) dim: ::core::ffi::c_int,
    pub(crate) cutoff: f64,
    pub(crate) noise: f64,
    pub(crate) userdata: *mut mjDoubleVec,
    pub(crate) plugin: mjsPlugin,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsSensor"][::core::mem::size_of::<mjsSensor>() - 136usize];
    ["Alignment of mjsSensor"][::core::mem::align_of::<mjsSensor>() - 8usize];
    ["Offset of field: mjsSensor::element"][::core::mem::offset_of!(mjsSensor, element) - 0usize];
    ["Offset of field: mjsSensor::name"][::core::mem::offset_of!(mjsSensor, name) - 8usize];
    ["Offset of field: mjsSensor::type_"][::core::mem::offset_of!(mjsSensor, type_) - 16usize];
    ["Offset of field: mjsSensor::objtype"][::core::mem::offset_of!(mjsSensor, objtype) - 20usize];
    ["Offset of field: mjsSensor::objname"][::core::mem::offset_of!(mjsSensor, objname) - 24usize];
    ["Offset of field: mjsSensor::reftype"][::core::mem::offset_of!(mjsSensor, reftype) - 32usize];
    ["Offset of field: mjsSensor::refname"][::core::mem::offset_of!(mjsSensor, refname) - 40usize];
    ["Offset of field: mjsSensor::datatype"]
        [::core::mem::offset_of!(mjsSensor, datatype) - 48usize];
    ["Offset of field: mjsSensor::needstage"]
        [::core::mem::offset_of!(mjsSensor, needstage) - 52usize];
    ["Offset of field: mjsSensor::dim"][::core::mem::offset_of!(mjsSensor, dim) - 56usize];
    ["Offset of field: mjsSensor::cutoff"][::core::mem::offset_of!(mjsSensor, cutoff) - 64usize];
    ["Offset of field: mjsSensor::noise"][::core::mem::offset_of!(mjsSensor, noise) - 72usize];
    ["Offset of field: mjsSensor::userdata"]
        [::core::mem::offset_of!(mjsSensor, userdata) - 80usize];
    ["Offset of field: mjsSensor::plugin"][::core::mem::offset_of!(mjsSensor, plugin) - 88usize];
    ["Offset of field: mjsSensor::info"][::core::mem::offset_of!(mjsSensor, info) - 128usize];
};
impl Default for mjsSensor {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsNumeric {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) data: *mut mjDoubleVec,
    pub(crate) size: ::core::ffi::c_int,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsNumeric"][::core::mem::size_of::<mjsNumeric>() - 40usize];
    ["Alignment of mjsNumeric"][::core::mem::align_of::<mjsNumeric>() - 8usize];
    ["Offset of field: mjsNumeric::element"][::core::mem::offset_of!(mjsNumeric, element) - 0usize];
    ["Offset of field: mjsNumeric::name"][::core::mem::offset_of!(mjsNumeric, name) - 8usize];
    ["Offset of field: mjsNumeric::data"][::core::mem::offset_of!(mjsNumeric, data) - 16usize];
    ["Offset of field: mjsNumeric::size"][::core::mem::offset_of!(mjsNumeric, size) - 24usize];
    ["Offset of field: mjsNumeric::info"][::core::mem::offset_of!(mjsNumeric, info) - 32usize];
};
impl Default for mjsNumeric {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsText {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) data: *mut mjString,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsText"][::core::mem::size_of::<mjsText>() - 32usize];
    ["Alignment of mjsText"][::core::mem::align_of::<mjsText>() - 8usize];
    ["Offset of field: mjsText::element"][::core::mem::offset_of!(mjsText, element) - 0usize];
    ["Offset of field: mjsText::name"][::core::mem::offset_of!(mjsText, name) - 8usize];
    ["Offset of field: mjsText::data"][::core::mem::offset_of!(mjsText, data) - 16usize];
    ["Offset of field: mjsText::info"][::core::mem::offset_of!(mjsText, info) - 24usize];
};
impl Default for mjsText {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsTuple {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) objtype: *mut mjIntVec,
    pub(crate) objname: *mut mjStringVec,
    pub(crate) objprm: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsTuple"][::core::mem::size_of::<mjsTuple>() - 48usize];
    ["Alignment of mjsTuple"][::core::mem::align_of::<mjsTuple>() - 8usize];
    ["Offset of field: mjsTuple::element"][::core::mem::offset_of!(mjsTuple, element) - 0usize];
    ["Offset of field: mjsTuple::name"][::core::mem::offset_of!(mjsTuple, name) - 8usize];
    ["Offset of field: mjsTuple::objtype"][::core::mem::offset_of!(mjsTuple, objtype) - 16usize];
    ["Offset of field: mjsTuple::objname"][::core::mem::offset_of!(mjsTuple, objname) - 24usize];
    ["Offset of field: mjsTuple::objprm"][::core::mem::offset_of!(mjsTuple, objprm) - 32usize];
    ["Offset of field: mjsTuple::info"][::core::mem::offset_of!(mjsTuple, info) - 40usize];
};
impl Default for mjsTuple {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsKey {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) time: f64,
    pub(crate) qpos: *mut mjDoubleVec,
    pub(crate) qvel: *mut mjDoubleVec,
    pub(crate) act: *mut mjDoubleVec,
    pub(crate) mpos: *mut mjDoubleVec,
    pub(crate) mquat: *mut mjDoubleVec,
    pub(crate) ctrl: *mut mjDoubleVec,
    pub(crate) info: *mut mjString,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsKey"][::core::mem::size_of::<mjsKey>() - 80usize];
    ["Alignment of mjsKey"][::core::mem::align_of::<mjsKey>() - 8usize];
    ["Offset of field: mjsKey::element"][::core::mem::offset_of!(mjsKey, element) - 0usize];
    ["Offset of field: mjsKey::name"][::core::mem::offset_of!(mjsKey, name) - 8usize];
    ["Offset of field: mjsKey::time"][::core::mem::offset_of!(mjsKey, time) - 16usize];
    ["Offset of field: mjsKey::qpos"][::core::mem::offset_of!(mjsKey, qpos) - 24usize];
    ["Offset of field: mjsKey::qvel"][::core::mem::offset_of!(mjsKey, qvel) - 32usize];
    ["Offset of field: mjsKey::act"][::core::mem::offset_of!(mjsKey, act) - 40usize];
    ["Offset of field: mjsKey::mpos"][::core::mem::offset_of!(mjsKey, mpos) - 48usize];
    ["Offset of field: mjsKey::mquat"][::core::mem::offset_of!(mjsKey, mquat) - 56usize];
    ["Offset of field: mjsKey::ctrl"][::core::mem::offset_of!(mjsKey, ctrl) - 64usize];
    ["Offset of field: mjsKey::info"][::core::mem::offset_of!(mjsKey, info) - 72usize];
};
impl Default for mjsKey {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjsDefault {
    pub(crate) element: *mut mjsElement,
    pub(crate) name: *mut mjString,
    pub(crate) joint: *mut mjsJoint,
    pub(crate) geom: *mut mjsGeom,
    pub(crate) site: *mut mjsSite,
    pub(crate) camera: *mut mjsCamera,
    pub(crate) light: *mut mjsLight,
    pub(crate) flex: *mut mjsFlex,
    pub(crate) mesh: *mut mjsMesh,
    pub(crate) material: *mut mjsMaterial,
    pub(crate) pair: *mut mjsPair,
    pub(crate) equality: *mut mjsEquality,
    pub(crate) tendon: *mut mjsTendon,
    pub(crate) actuator: *mut mjsActuator,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjsDefault"][::core::mem::size_of::<mjsDefault>() - 112usize];
    ["Alignment of mjsDefault"][::core::mem::align_of::<mjsDefault>() - 8usize];
    ["Offset of field: mjsDefault::element"][::core::mem::offset_of!(mjsDefault, element) - 0usize];
    ["Offset of field: mjsDefault::name"][::core::mem::offset_of!(mjsDefault, name) - 8usize];
    ["Offset of field: mjsDefault::joint"][::core::mem::offset_of!(mjsDefault, joint) - 16usize];
    ["Offset of field: mjsDefault::geom"][::core::mem::offset_of!(mjsDefault, geom) - 24usize];
    ["Offset of field: mjsDefault::site"][::core::mem::offset_of!(mjsDefault, site) - 32usize];
    ["Offset of field: mjsDefault::camera"][::core::mem::offset_of!(mjsDefault, camera) - 40usize];
    ["Offset of field: mjsDefault::light"][::core::mem::offset_of!(mjsDefault, light) - 48usize];
    ["Offset of field: mjsDefault::flex"][::core::mem::offset_of!(mjsDefault, flex) - 56usize];
    ["Offset of field: mjsDefault::mesh"][::core::mem::offset_of!(mjsDefault, mesh) - 64usize];
    ["Offset of field: mjsDefault::material"]
        [::core::mem::offset_of!(mjsDefault, material) - 72usize];
    ["Offset of field: mjsDefault::pair"][::core::mem::offset_of!(mjsDefault, pair) - 80usize];
    ["Offset of field: mjsDefault::equality"]
        [::core::mem::offset_of!(mjsDefault, equality) - 88usize];
    ["Offset of field: mjsDefault::tendon"][::core::mem::offset_of!(mjsDefault, tendon) - 96usize];
    ["Offset of field: mjsDefault::actuator"]
        [::core::mem::offset_of!(mjsDefault, actuator) - 104usize];
};
impl Default for mjsDefault {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl mjtButton {
    pub const NONE: mjtButton = mjtButton(0);
    pub const LEFT: mjtButton = mjtButton(1);
    pub const RIGHT: mjtButton = mjtButton(2);
    pub const MIDDLE: mjtButton = mjtButton(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtButton(pub(crate) ::core::ffi::c_uint);
impl mjtEvent {
    pub const NONE: mjtEvent = mjtEvent(0);
    pub const MOVE: mjtEvent = mjtEvent(1);
    pub const PRESS: mjtEvent = mjtEvent(2);
    pub const RELEASE: mjtEvent = mjtEvent(3);
    pub const SCROLL: mjtEvent = mjtEvent(4);
    pub const KEY: mjtEvent = mjtEvent(5);
    pub const RESIZE: mjtEvent = mjtEvent(6);
    pub const REDRAW: mjtEvent = mjtEvent(7);
    pub const FILESDROP: mjtEvent = mjtEvent(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtEvent(pub(crate) ::core::ffi::c_uint);
pub const mjNITEM: usize = mjtItem::mjNITEM.0 as usize;
impl mjtItem {
    pub const END: mjtItem = mjtItem(-2);
    pub const SECTION: mjtItem = mjtItem(-1);
    pub const SEPARATOR: mjtItem = mjtItem(0);
    pub const STATIC: mjtItem = mjtItem(1);
    pub const BUTTON: mjtItem = mjtItem(2);
    pub const CHECKINT: mjtItem = mjtItem(3);
    pub const CHECKBYTE: mjtItem = mjtItem(4);
    pub const RADIO: mjtItem = mjtItem(5);
    pub const RADIOLINE: mjtItem = mjtItem(6);
    pub const SELECT: mjtItem = mjtItem(7);
    pub const SLIDERINT: mjtItem = mjtItem(8);
    pub const SLIDERNUM: mjtItem = mjtItem(9);
    pub const EDITINT: mjtItem = mjtItem(10);
    pub const EDITNUM: mjtItem = mjtItem(11);
    pub const EDITFLOAT: mjtItem = mjtItem(12);
    pub const EDITTXT: mjtItem = mjtItem(13);
    pub(crate) const mjNITEM: mjtItem = mjtItem(14);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtItem(pub(crate) ::core::ffi::c_int);
impl mjtSection {
    pub const CLOSED: mjtSection = mjtSection(0);
    pub const OPEN: mjtSection = mjtSection(1);
    pub const FIXED: mjtSection = mjtSection(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct mjtSection(pub(crate) ::core::ffi::c_uint);
pub type mjfItemEnable = ::core::option::Option<
    unsafe extern "C" fn(
        category: ::core::ffi::c_int,
        data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiState {
    pub(crate) nrect: ::core::ffi::c_int,
    pub(crate) rect: [mjrRect; 25usize],
    pub(crate) userdata: *mut ::core::ffi::c_void,
    pub(crate) type_: ::core::ffi::c_int,
    pub(crate) left: ::core::ffi::c_int,
    pub(crate) right: ::core::ffi::c_int,
    pub(crate) middle: ::core::ffi::c_int,
    pub(crate) doubleclick: ::core::ffi::c_int,
    pub(crate) button: ::core::ffi::c_int,
    pub(crate) buttontime: f64,
    pub(crate) x: f64,
    pub(crate) y: f64,
    pub(crate) dx: f64,
    pub(crate) dy: f64,
    pub(crate) sx: f64,
    pub(crate) sy: f64,
    pub(crate) control: ::core::ffi::c_int,
    pub(crate) shift: ::core::ffi::c_int,
    pub(crate) alt: ::core::ffi::c_int,
    pub(crate) key: ::core::ffi::c_int,
    pub(crate) keytime: f64,
    pub(crate) mouserect: ::core::ffi::c_int,
    pub(crate) dragrect: ::core::ffi::c_int,
    pub(crate) dragbutton: ::core::ffi::c_int,
    pub(crate) dropcount: ::core::ffi::c_int,
    pub(crate) droppaths: *mut *const ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiState"][::core::mem::size_of::<mjuiState>() - 544usize];
    ["Alignment of mjuiState"][::core::mem::align_of::<mjuiState>() - 8usize];
    ["Offset of field: mjuiState::nrect"][::core::mem::offset_of!(mjuiState, nrect) - 0usize];
    ["Offset of field: mjuiState::rect"][::core::mem::offset_of!(mjuiState, rect) - 4usize];
    ["Offset of field: mjuiState::userdata"]
        [::core::mem::offset_of!(mjuiState, userdata) - 408usize];
    ["Offset of field: mjuiState::type_"][::core::mem::offset_of!(mjuiState, type_) - 416usize];
    ["Offset of field: mjuiState::left"][::core::mem::offset_of!(mjuiState, left) - 420usize];
    ["Offset of field: mjuiState::right"][::core::mem::offset_of!(mjuiState, right) - 424usize];
    ["Offset of field: mjuiState::middle"][::core::mem::offset_of!(mjuiState, middle) - 428usize];
    ["Offset of field: mjuiState::doubleclick"]
        [::core::mem::offset_of!(mjuiState, doubleclick) - 432usize];
    ["Offset of field: mjuiState::button"][::core::mem::offset_of!(mjuiState, button) - 436usize];
    ["Offset of field: mjuiState::buttontime"]
        [::core::mem::offset_of!(mjuiState, buttontime) - 440usize];
    ["Offset of field: mjuiState::x"][::core::mem::offset_of!(mjuiState, x) - 448usize];
    ["Offset of field: mjuiState::y"][::core::mem::offset_of!(mjuiState, y) - 456usize];
    ["Offset of field: mjuiState::dx"][::core::mem::offset_of!(mjuiState, dx) - 464usize];
    ["Offset of field: mjuiState::dy"][::core::mem::offset_of!(mjuiState, dy) - 472usize];
    ["Offset of field: mjuiState::sx"][::core::mem::offset_of!(mjuiState, sx) - 480usize];
    ["Offset of field: mjuiState::sy"][::core::mem::offset_of!(mjuiState, sy) - 488usize];
    ["Offset of field: mjuiState::control"][::core::mem::offset_of!(mjuiState, control) - 496usize];
    ["Offset of field: mjuiState::shift"][::core::mem::offset_of!(mjuiState, shift) - 500usize];
    ["Offset of field: mjuiState::alt"][::core::mem::offset_of!(mjuiState, alt) - 504usize];
    ["Offset of field: mjuiState::key"][::core::mem::offset_of!(mjuiState, key) - 508usize];
    ["Offset of field: mjuiState::keytime"][::core::mem::offset_of!(mjuiState, keytime) - 512usize];
    ["Offset of field: mjuiState::mouserect"]
        [::core::mem::offset_of!(mjuiState, mouserect) - 520usize];
    ["Offset of field: mjuiState::dragrect"]
        [::core::mem::offset_of!(mjuiState, dragrect) - 524usize];
    ["Offset of field: mjuiState::dragbutton"]
        [::core::mem::offset_of!(mjuiState, dragbutton) - 528usize];
    ["Offset of field: mjuiState::dropcount"]
        [::core::mem::offset_of!(mjuiState, dropcount) - 532usize];
    ["Offset of field: mjuiState::droppaths"]
        [::core::mem::offset_of!(mjuiState, droppaths) - 536usize];
};
impl Default for mjuiState {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeSpacing {
    pub(crate) total: ::core::ffi::c_int,
    pub(crate) scroll: ::core::ffi::c_int,
    pub(crate) label: ::core::ffi::c_int,
    pub(crate) section: ::core::ffi::c_int,
    pub(crate) cornersect: ::core::ffi::c_int,
    pub(crate) cornersep: ::core::ffi::c_int,
    pub(crate) itemside: ::core::ffi::c_int,
    pub(crate) itemmid: ::core::ffi::c_int,
    pub(crate) itemver: ::core::ffi::c_int,
    pub(crate) texthor: ::core::ffi::c_int,
    pub(crate) textver: ::core::ffi::c_int,
    pub(crate) linescroll: ::core::ffi::c_int,
    pub(crate) samples: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiThemeSpacing"][::core::mem::size_of::<mjuiThemeSpacing>() - 52usize];
    ["Alignment of mjuiThemeSpacing"][::core::mem::align_of::<mjuiThemeSpacing>() - 4usize];
    ["Offset of field: mjuiThemeSpacing::total"]
        [::core::mem::offset_of!(mjuiThemeSpacing, total) - 0usize];
    ["Offset of field: mjuiThemeSpacing::scroll"]
        [::core::mem::offset_of!(mjuiThemeSpacing, scroll) - 4usize];
    ["Offset of field: mjuiThemeSpacing::label"]
        [::core::mem::offset_of!(mjuiThemeSpacing, label) - 8usize];
    ["Offset of field: mjuiThemeSpacing::section"]
        [::core::mem::offset_of!(mjuiThemeSpacing, section) - 12usize];
    ["Offset of field: mjuiThemeSpacing::cornersect"]
        [::core::mem::offset_of!(mjuiThemeSpacing, cornersect) - 16usize];
    ["Offset of field: mjuiThemeSpacing::cornersep"]
        [::core::mem::offset_of!(mjuiThemeSpacing, cornersep) - 20usize];
    ["Offset of field: mjuiThemeSpacing::itemside"]
        [::core::mem::offset_of!(mjuiThemeSpacing, itemside) - 24usize];
    ["Offset of field: mjuiThemeSpacing::itemmid"]
        [::core::mem::offset_of!(mjuiThemeSpacing, itemmid) - 28usize];
    ["Offset of field: mjuiThemeSpacing::itemver"]
        [::core::mem::offset_of!(mjuiThemeSpacing, itemver) - 32usize];
    ["Offset of field: mjuiThemeSpacing::texthor"]
        [::core::mem::offset_of!(mjuiThemeSpacing, texthor) - 36usize];
    ["Offset of field: mjuiThemeSpacing::textver"]
        [::core::mem::offset_of!(mjuiThemeSpacing, textver) - 40usize];
    ["Offset of field: mjuiThemeSpacing::linescroll"]
        [::core::mem::offset_of!(mjuiThemeSpacing, linescroll) - 44usize];
    ["Offset of field: mjuiThemeSpacing::samples"]
        [::core::mem::offset_of!(mjuiThemeSpacing, samples) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeColor {
    pub(crate) master: [f32; 3usize],
    pub(crate) thumb: [f32; 3usize],
    pub(crate) secttitle: [f32; 3usize],
    pub(crate) secttitle2: [f32; 3usize],
    pub(crate) secttitleuncheck: [f32; 3usize],
    pub(crate) secttitleuncheck2: [f32; 3usize],
    pub(crate) secttitlecheck: [f32; 3usize],
    pub(crate) secttitlecheck2: [f32; 3usize],
    pub(crate) sectfont: [f32; 3usize],
    pub(crate) sectsymbol: [f32; 3usize],
    pub(crate) sectpane: [f32; 3usize],
    pub(crate) separator: [f32; 3usize],
    pub(crate) separator2: [f32; 3usize],
    pub(crate) shortcut: [f32; 3usize],
    pub(crate) fontactive: [f32; 3usize],
    pub(crate) fontinactive: [f32; 3usize],
    pub(crate) decorinactive: [f32; 3usize],
    pub(crate) decorinactive2: [f32; 3usize],
    pub(crate) button: [f32; 3usize],
    pub(crate) check: [f32; 3usize],
    pub(crate) radio: [f32; 3usize],
    pub(crate) select: [f32; 3usize],
    pub(crate) select2: [f32; 3usize],
    pub(crate) slider: [f32; 3usize],
    pub(crate) slider2: [f32; 3usize],
    pub(crate) edit: [f32; 3usize],
    pub(crate) edit2: [f32; 3usize],
    pub(crate) cursor: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiThemeColor"][::core::mem::size_of::<mjuiThemeColor>() - 336usize];
    ["Alignment of mjuiThemeColor"][::core::mem::align_of::<mjuiThemeColor>() - 4usize];
    ["Offset of field: mjuiThemeColor::master"]
        [::core::mem::offset_of!(mjuiThemeColor, master) - 0usize];
    ["Offset of field: mjuiThemeColor::thumb"]
        [::core::mem::offset_of!(mjuiThemeColor, thumb) - 12usize];
    ["Offset of field: mjuiThemeColor::secttitle"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitle) - 24usize];
    ["Offset of field: mjuiThemeColor::secttitle2"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitle2) - 36usize];
    ["Offset of field: mjuiThemeColor::secttitleuncheck"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitleuncheck) - 48usize];
    ["Offset of field: mjuiThemeColor::secttitleuncheck2"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitleuncheck2) - 60usize];
    ["Offset of field: mjuiThemeColor::secttitlecheck"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitlecheck) - 72usize];
    ["Offset of field: mjuiThemeColor::secttitlecheck2"]
        [::core::mem::offset_of!(mjuiThemeColor, secttitlecheck2) - 84usize];
    ["Offset of field: mjuiThemeColor::sectfont"]
        [::core::mem::offset_of!(mjuiThemeColor, sectfont) - 96usize];
    ["Offset of field: mjuiThemeColor::sectsymbol"]
        [::core::mem::offset_of!(mjuiThemeColor, sectsymbol) - 108usize];
    ["Offset of field: mjuiThemeColor::sectpane"]
        [::core::mem::offset_of!(mjuiThemeColor, sectpane) - 120usize];
    ["Offset of field: mjuiThemeColor::separator"]
        [::core::mem::offset_of!(mjuiThemeColor, separator) - 132usize];
    ["Offset of field: mjuiThemeColor::separator2"]
        [::core::mem::offset_of!(mjuiThemeColor, separator2) - 144usize];
    ["Offset of field: mjuiThemeColor::shortcut"]
        [::core::mem::offset_of!(mjuiThemeColor, shortcut) - 156usize];
    ["Offset of field: mjuiThemeColor::fontactive"]
        [::core::mem::offset_of!(mjuiThemeColor, fontactive) - 168usize];
    ["Offset of field: mjuiThemeColor::fontinactive"]
        [::core::mem::offset_of!(mjuiThemeColor, fontinactive) - 180usize];
    ["Offset of field: mjuiThemeColor::decorinactive"]
        [::core::mem::offset_of!(mjuiThemeColor, decorinactive) - 192usize];
    ["Offset of field: mjuiThemeColor::decorinactive2"]
        [::core::mem::offset_of!(mjuiThemeColor, decorinactive2) - 204usize];
    ["Offset of field: mjuiThemeColor::button"]
        [::core::mem::offset_of!(mjuiThemeColor, button) - 216usize];
    ["Offset of field: mjuiThemeColor::check"]
        [::core::mem::offset_of!(mjuiThemeColor, check) - 228usize];
    ["Offset of field: mjuiThemeColor::radio"]
        [::core::mem::offset_of!(mjuiThemeColor, radio) - 240usize];
    ["Offset of field: mjuiThemeColor::select"]
        [::core::mem::offset_of!(mjuiThemeColor, select) - 252usize];
    ["Offset of field: mjuiThemeColor::select2"]
        [::core::mem::offset_of!(mjuiThemeColor, select2) - 264usize];
    ["Offset of field: mjuiThemeColor::slider"]
        [::core::mem::offset_of!(mjuiThemeColor, slider) - 276usize];
    ["Offset of field: mjuiThemeColor::slider2"]
        [::core::mem::offset_of!(mjuiThemeColor, slider2) - 288usize];
    ["Offset of field: mjuiThemeColor::edit"]
        [::core::mem::offset_of!(mjuiThemeColor, edit) - 300usize];
    ["Offset of field: mjuiThemeColor::edit2"]
        [::core::mem::offset_of!(mjuiThemeColor, edit2) - 312usize];
    ["Offset of field: mjuiThemeColor::cursor"]
        [::core::mem::offset_of!(mjuiThemeColor, cursor) - 324usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSingle {
    pub(crate) modifier: ::core::ffi::c_int,
    pub(crate) shortcut: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemSingle"][::core::mem::size_of::<mjuiItemSingle>() - 8usize];
    ["Alignment of mjuiItemSingle"][::core::mem::align_of::<mjuiItemSingle>() - 4usize];
    ["Offset of field: mjuiItemSingle::modifier"]
        [::core::mem::offset_of!(mjuiItemSingle, modifier) - 0usize];
    ["Offset of field: mjuiItemSingle::shortcut"]
        [::core::mem::offset_of!(mjuiItemSingle, shortcut) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiItemMulti {
    pub(crate) nelem: ::core::ffi::c_int,
    pub(crate) name: [[::core::ffi::c_char; 40usize]; 35usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemMulti"][::core::mem::size_of::<mjuiItemMulti>() - 1404usize];
    ["Alignment of mjuiItemMulti"][::core::mem::align_of::<mjuiItemMulti>() - 4usize];
    ["Offset of field: mjuiItemMulti::nelem"]
        [::core::mem::offset_of!(mjuiItemMulti, nelem) - 0usize];
    ["Offset of field: mjuiItemMulti::name"][::core::mem::offset_of!(mjuiItemMulti, name) - 4usize];
};
impl Default for mjuiItemMulti {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSlider {
    pub(crate) range: [f64; 2usize],
    pub(crate) divisions: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemSlider"][::core::mem::size_of::<mjuiItemSlider>() - 24usize];
    ["Alignment of mjuiItemSlider"][::core::mem::align_of::<mjuiItemSlider>() - 8usize];
    ["Offset of field: mjuiItemSlider::range"]
        [::core::mem::offset_of!(mjuiItemSlider, range) - 0usize];
    ["Offset of field: mjuiItemSlider::divisions"]
        [::core::mem::offset_of!(mjuiItemSlider, divisions) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemEdit {
    pub(crate) nelem: ::core::ffi::c_int,
    pub(crate) range: [[f64; 2usize]; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItemEdit"][::core::mem::size_of::<mjuiItemEdit>() - 120usize];
    ["Alignment of mjuiItemEdit"][::core::mem::align_of::<mjuiItemEdit>() - 8usize];
    ["Offset of field: mjuiItemEdit::nelem"][::core::mem::offset_of!(mjuiItemEdit, nelem) - 0usize];
    ["Offset of field: mjuiItemEdit::range"][::core::mem::offset_of!(mjuiItemEdit, range) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiItem {
    pub(crate) type_: ::core::ffi::c_int,
    pub(crate) name: [::core::ffi::c_char; 40usize],
    pub(crate) state: ::core::ffi::c_int,
    pub(crate) pdata: *mut ::core::ffi::c_void,
    pub(crate) sectionid: ::core::ffi::c_int,
    pub(crate) itemid: ::core::ffi::c_int,
    pub(crate) userid: ::core::ffi::c_int,
    pub(crate) __bindgen_anon_1: mjuiItem___bindgen_ty_1,
    pub(crate) rect: mjrRect,
    pub(crate) skip: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mjuiItem___bindgen_ty_1 {
    pub(crate) single: mjuiItemSingle,
    pub(crate) multi: mjuiItemMulti,
    pub(crate) slider: mjuiItemSlider,
    pub(crate) edit: mjuiItemEdit,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItem___bindgen_ty_1"]
        [::core::mem::size_of::<mjuiItem___bindgen_ty_1>() - 1408usize];
    ["Alignment of mjuiItem___bindgen_ty_1"]
        [::core::mem::align_of::<mjuiItem___bindgen_ty_1>() - 8usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::single"]
        [::core::mem::offset_of!(mjuiItem___bindgen_ty_1, single) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::multi"]
        [::core::mem::offset_of!(mjuiItem___bindgen_ty_1, multi) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::slider"]
        [::core::mem::offset_of!(mjuiItem___bindgen_ty_1, slider) - 0usize];
    ["Offset of field: mjuiItem___bindgen_ty_1::edit"]
        [::core::mem::offset_of!(mjuiItem___bindgen_ty_1, edit) - 0usize];
};
impl Default for mjuiItem___bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiItem"][::core::mem::size_of::<mjuiItem>() - 1504usize];
    ["Alignment of mjuiItem"][::core::mem::align_of::<mjuiItem>() - 8usize];
    ["Offset of field: mjuiItem::type_"][::core::mem::offset_of!(mjuiItem, type_) - 0usize];
    ["Offset of field: mjuiItem::name"][::core::mem::offset_of!(mjuiItem, name) - 4usize];
    ["Offset of field: mjuiItem::state"][::core::mem::offset_of!(mjuiItem, state) - 44usize];
    ["Offset of field: mjuiItem::pdata"][::core::mem::offset_of!(mjuiItem, pdata) - 48usize];
    ["Offset of field: mjuiItem::sectionid"]
        [::core::mem::offset_of!(mjuiItem, sectionid) - 56usize];
    ["Offset of field: mjuiItem::itemid"][::core::mem::offset_of!(mjuiItem, itemid) - 60usize];
    ["Offset of field: mjuiItem::userid"][::core::mem::offset_of!(mjuiItem, userid) - 64usize];
    ["Offset of field: mjuiItem::rect"][::core::mem::offset_of!(mjuiItem, rect) - 1480usize];
    ["Offset of field: mjuiItem::skip"][::core::mem::offset_of!(mjuiItem, skip) - 1496usize];
};
impl Default for mjuiItem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiSection {
    pub(crate) name: [::core::ffi::c_char; 40usize],
    pub(crate) state: ::core::ffi::c_int,
    pub(crate) modifier: ::core::ffi::c_int,
    pub(crate) shortcut: ::core::ffi::c_int,
    pub(crate) checkbox: ::core::ffi::c_int,
    pub(crate) nitem: ::core::ffi::c_int,
    pub(crate) item: [mjuiItem; 200usize],
    pub(crate) rtitle: mjrRect,
    pub(crate) rcontent: mjrRect,
    pub(crate) lastclick: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiSection"][::core::mem::size_of::<mjuiSection>() - 300904usize];
    ["Alignment of mjuiSection"][::core::mem::align_of::<mjuiSection>() - 8usize];
    ["Offset of field: mjuiSection::name"][::core::mem::offset_of!(mjuiSection, name) - 0usize];
    ["Offset of field: mjuiSection::state"][::core::mem::offset_of!(mjuiSection, state) - 40usize];
    ["Offset of field: mjuiSection::modifier"]
        [::core::mem::offset_of!(mjuiSection, modifier) - 44usize];
    ["Offset of field: mjuiSection::shortcut"]
        [::core::mem::offset_of!(mjuiSection, shortcut) - 48usize];
    ["Offset of field: mjuiSection::checkbox"]
        [::core::mem::offset_of!(mjuiSection, checkbox) - 52usize];
    ["Offset of field: mjuiSection::nitem"][::core::mem::offset_of!(mjuiSection, nitem) - 56usize];
    ["Offset of field: mjuiSection::item"][::core::mem::offset_of!(mjuiSection, item) - 64usize];
    ["Offset of field: mjuiSection::rtitle"]
        [::core::mem::offset_of!(mjuiSection, rtitle) - 300864usize];
    ["Offset of field: mjuiSection::rcontent"]
        [::core::mem::offset_of!(mjuiSection, rcontent) - 300880usize];
    ["Offset of field: mjuiSection::lastclick"]
        [::core::mem::offset_of!(mjuiSection, lastclick) - 300896usize];
};
impl Default for mjuiSection {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjUI {
    pub(crate) spacing: mjuiThemeSpacing,
    pub(crate) color: mjuiThemeColor,
    pub(crate) predicate: mjfItemEnable,
    pub(crate) userdata: *mut ::core::ffi::c_void,
    pub(crate) rectid: ::core::ffi::c_int,
    pub(crate) auxid: ::core::ffi::c_int,
    pub(crate) radiocol: ::core::ffi::c_int,
    pub(crate) width: ::core::ffi::c_int,
    pub(crate) height: ::core::ffi::c_int,
    pub(crate) maxheight: ::core::ffi::c_int,
    pub(crate) scroll: ::core::ffi::c_int,
    pub(crate) mousesect: ::core::ffi::c_int,
    pub(crate) mouseitem: ::core::ffi::c_int,
    pub(crate) mousehelp: ::core::ffi::c_int,
    pub(crate) mouseclicks: ::core::ffi::c_int,
    pub(crate) mousesectcheck: ::core::ffi::c_int,
    pub(crate) editsect: ::core::ffi::c_int,
    pub(crate) edititem: ::core::ffi::c_int,
    pub(crate) editcursor: ::core::ffi::c_int,
    pub(crate) editscroll: ::core::ffi::c_int,
    pub(crate) edittext: [::core::ffi::c_char; 300usize],
    pub(crate) editchanged: *mut mjuiItem,
    pub(crate) nsect: ::core::ffi::c_int,
    pub(crate) sect: [mjuiSection; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjUI"][::core::mem::size_of::<mjUI>() - 3009832usize];
    ["Alignment of mjUI"][::core::mem::align_of::<mjUI>() - 8usize];
    ["Offset of field: mjUI::spacing"][::core::mem::offset_of!(mjUI, spacing) - 0usize];
    ["Offset of field: mjUI::color"][::core::mem::offset_of!(mjUI, color) - 52usize];
    ["Offset of field: mjUI::predicate"][::core::mem::offset_of!(mjUI, predicate) - 392usize];
    ["Offset of field: mjUI::userdata"][::core::mem::offset_of!(mjUI, userdata) - 400usize];
    ["Offset of field: mjUI::rectid"][::core::mem::offset_of!(mjUI, rectid) - 408usize];
    ["Offset of field: mjUI::auxid"][::core::mem::offset_of!(mjUI, auxid) - 412usize];
    ["Offset of field: mjUI::radiocol"][::core::mem::offset_of!(mjUI, radiocol) - 416usize];
    ["Offset of field: mjUI::width"][::core::mem::offset_of!(mjUI, width) - 420usize];
    ["Offset of field: mjUI::height"][::core::mem::offset_of!(mjUI, height) - 424usize];
    ["Offset of field: mjUI::maxheight"][::core::mem::offset_of!(mjUI, maxheight) - 428usize];
    ["Offset of field: mjUI::scroll"][::core::mem::offset_of!(mjUI, scroll) - 432usize];
    ["Offset of field: mjUI::mousesect"][::core::mem::offset_of!(mjUI, mousesect) - 436usize];
    ["Offset of field: mjUI::mouseitem"][::core::mem::offset_of!(mjUI, mouseitem) - 440usize];
    ["Offset of field: mjUI::mousehelp"][::core::mem::offset_of!(mjUI, mousehelp) - 444usize];
    ["Offset of field: mjUI::mouseclicks"][::core::mem::offset_of!(mjUI, mouseclicks) - 448usize];
    ["Offset of field: mjUI::mousesectcheck"]
        [::core::mem::offset_of!(mjUI, mousesectcheck) - 452usize];
    ["Offset of field: mjUI::editsect"][::core::mem::offset_of!(mjUI, editsect) - 456usize];
    ["Offset of field: mjUI::edititem"][::core::mem::offset_of!(mjUI, edititem) - 460usize];
    ["Offset of field: mjUI::editcursor"][::core::mem::offset_of!(mjUI, editcursor) - 464usize];
    ["Offset of field: mjUI::editscroll"][::core::mem::offset_of!(mjUI, editscroll) - 468usize];
    ["Offset of field: mjUI::edittext"][::core::mem::offset_of!(mjUI, edittext) - 472usize];
    ["Offset of field: mjUI::editchanged"][::core::mem::offset_of!(mjUI, editchanged) - 776usize];
    ["Offset of field: mjUI::nsect"][::core::mem::offset_of!(mjUI, nsect) - 784usize];
    ["Offset of field: mjUI::sect"][::core::mem::offset_of!(mjUI, sect) - 792usize];
};
impl Default for mjUI {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiDef {
    pub(crate) type_: ::core::ffi::c_int,
    pub(crate) name: [::core::ffi::c_char; 40usize],
    pub(crate) state: ::core::ffi::c_int,
    pub(crate) pdata: *mut ::core::ffi::c_void,
    pub(crate) other: [::core::ffi::c_char; 300usize],
    pub(crate) otherint: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mjuiDef"][::core::mem::size_of::<mjuiDef>() - 360usize];
    ["Alignment of mjuiDef"][::core::mem::align_of::<mjuiDef>() - 8usize];
    ["Offset of field: mjuiDef::type_"][::core::mem::offset_of!(mjuiDef, type_) - 0usize];
    ["Offset of field: mjuiDef::name"][::core::mem::offset_of!(mjuiDef, name) - 4usize];
    ["Offset of field: mjuiDef::state"][::core::mem::offset_of!(mjuiDef, state) - 44usize];
    ["Offset of field: mjuiDef::pdata"][::core::mem::offset_of!(mjuiDef, pdata) - 48usize];
    ["Offset of field: mjuiDef::other"][::core::mem::offset_of!(mjuiDef, other) - 56usize];
    ["Offset of field: mjuiDef::otherint"][::core::mem::offset_of!(mjuiDef, otherint) - 356usize];
};
impl Default for mjuiDef {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static mut mju_user_error:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const ::core::ffi::c_char)>;
    pub static mut mju_user_warning:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const ::core::ffi::c_char)>;
    pub static mut mju_user_malloc:
        ::core::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::core::ffi::c_void>;
    pub static mut mju_user_free:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>;
    pub static mut mjcb_passive: mjfGeneric;
    pub static mut mjcb_control: mjfGeneric;
    pub static mut mjcb_contactfilter: mjfConFilt;
    pub static mut mjcb_sensor: mjfSensor;
    pub static mut mjcb_time: mjfTime;
    pub static mut mjcb_act_dyn: mjfAct;
    pub static mut mjcb_act_gain: mjfAct;
    pub static mut mjcb_act_bias: mjfAct;
    pub static mut mjCOLLISIONFUNC: [[mjfCollision; 9usize]; 9usize];
    pub static mut mjDISABLESTRING: [*const ::core::ffi::c_char; 17usize];
    pub static mut mjENABLESTRING: [*const ::core::ffi::c_char; 6usize];
    pub static mut mjTIMERSTRING: [*const ::core::ffi::c_char; 15usize];
    pub static mut mjLABELSTRING: [*const ::core::ffi::c_char; 17usize];
    pub static mut mjFRAMESTRING: [*const ::core::ffi::c_char; 8usize];
    pub static mut mjVISSTRING: [[*const ::core::ffi::c_char; 3usize]; 32usize];
    pub static mut mjRNDSTRING: [[*const ::core::ffi::c_char; 3usize]; 10usize];
    pub fn mj_defaultVFS(vfs: *mut mjVFS);
    pub fn mj_addFileVFS(
        vfs: *mut mjVFS,
        directory: *const ::core::ffi::c_char,
        filename: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn mj_addBufferVFS(
        vfs: *mut mjVFS,
        name: *const ::core::ffi::c_char,
        buffer: *const ::core::ffi::c_void,
        nbuffer: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_deleteFileVFS(
        vfs: *mut mjVFS,
        filename: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn mj_deleteVFS(vfs: *mut mjVFS);
    pub fn mj_loadXML(
        filename: *const ::core::ffi::c_char,
        vfs: *const mjVFS,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> *mut mjModel;
    pub fn mj_parseXML(
        filename: *const ::core::ffi::c_char,
        vfs: *const mjVFS,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> *mut mjSpec;
    pub fn mj_parseXMLString(
        xml: *const ::core::ffi::c_char,
        vfs: *const mjVFS,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> *mut mjSpec;
    pub fn mj_compile(s: *mut mjSpec, vfs: *const mjVFS) -> *mut mjModel;
    pub fn mj_recompile(
        s: *mut mjSpec,
        vfs: *const mjVFS,
        m: *mut mjModel,
        d: *mut mjData,
    ) -> ::core::ffi::c_int;
    pub fn mj_saveLastXML(
        filename: *const ::core::ffi::c_char,
        m: *const mjModel,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_freeLastXML();
    pub fn mj_saveXMLString(
        s: *const mjSpec,
        xml: *mut ::core::ffi::c_char,
        xml_sz: ::core::ffi::c_int,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_saveXML(
        s: *const mjSpec,
        filename: *const ::core::ffi::c_char,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_step(m: *const mjModel, d: *mut mjData);
    pub fn mj_step1(m: *const mjModel, d: *mut mjData);
    pub fn mj_step2(m: *const mjModel, d: *mut mjData);
    pub fn mj_forward(m: *const mjModel, d: *mut mjData);
    pub fn mj_inverse(m: *const mjModel, d: *mut mjData);
    pub fn mj_forwardSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::core::ffi::c_int,
        skipsensor: ::core::ffi::c_int,
    );
    pub fn mj_inverseSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::core::ffi::c_int,
        skipsensor: ::core::ffi::c_int,
    );
    pub fn mj_defaultLROpt(opt: *mut mjLROpt);
    pub fn mj_defaultSolRefImp(solref: *mut mjtNum, solimp: *mut mjtNum);
    pub fn mj_defaultOption(opt: *mut mjOption);
    pub fn mj_defaultVisual(vis: *mut mjVisual);
    pub fn mj_copyModel(dest: *mut mjModel, src: *const mjModel) -> *mut mjModel;
    pub fn mj_saveModel(
        m: *const mjModel,
        filename: *const ::core::ffi::c_char,
        buffer: *mut ::core::ffi::c_void,
        buffer_sz: ::core::ffi::c_int,
    );
    pub fn mj_loadModel(filename: *const ::core::ffi::c_char, vfs: *const mjVFS) -> *mut mjModel;
    pub fn mj_deleteModel(m: *mut mjModel);
    pub fn mj_sizeModel(m: *const mjModel) -> ::core::ffi::c_int;
    pub fn mj_makeData(m: *const mjModel) -> *mut mjData;
    pub fn mj_copyData(dest: *mut mjData, m: *const mjModel, src: *const mjData) -> *mut mjData;
    pub fn mj_resetData(m: *const mjModel, d: *mut mjData);
    pub fn mj_resetDataDebug(m: *const mjModel, d: *mut mjData, debug_value: ::core::ffi::c_uchar);
    pub fn mj_resetDataKeyframe(m: *const mjModel, d: *mut mjData, key: ::core::ffi::c_int);
    pub fn mj_markStack(d: *mut mjData);
    pub fn mj_freeStack(d: *mut mjData);
    pub fn mj_stackAllocByte(
        d: *mut mjData,
        bytes: usize,
        alignment: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn mj_stackAllocNum(d: *mut mjData, size: usize) -> *mut mjtNum;
    pub fn mj_stackAllocInt(d: *mut mjData, size: usize) -> *mut ::core::ffi::c_int;
    pub fn mj_deleteData(d: *mut mjData);
    pub fn mj_resetCallbacks();
    pub fn mj_setConst(m: *mut mjModel, d: *mut mjData);
    pub fn mj_setLengthRange(
        m: *mut mjModel,
        d: *mut mjData,
        index: ::core::ffi::c_int,
        opt: *const mjLROpt,
        error: *mut ::core::ffi::c_char,
        error_sz: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_makeSpec() -> *mut mjSpec;
    pub fn mj_copySpec(s: *const mjSpec) -> *mut mjSpec;
    pub fn mj_deleteSpec(s: *mut mjSpec);
    pub fn mjs_activatePlugin(
        s: *mut mjSpec,
        name: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn mjs_setDeepCopy(s: *mut mjSpec, deepcopy: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn mj_printFormattedModel(
        m: *const mjModel,
        filename: *const ::core::ffi::c_char,
        float_format: *const ::core::ffi::c_char,
    );
    pub fn mj_printModel(m: *const mjModel, filename: *const ::core::ffi::c_char);
    pub fn mj_printFormattedData(
        m: *const mjModel,
        d: *const mjData,
        filename: *const ::core::ffi::c_char,
        float_format: *const ::core::ffi::c_char,
    );
    pub fn mj_printData(m: *const mjModel, d: *const mjData, filename: *const ::core::ffi::c_char);
    pub fn mju_printMat(mat: *const mjtNum, nr: ::core::ffi::c_int, nc: ::core::ffi::c_int);
    pub fn mju_printMatSparse(
        mat: *const mjtNum,
        nr: ::core::ffi::c_int,
        rownnz: *const ::core::ffi::c_int,
        rowadr: *const ::core::ffi::c_int,
        colind: *const ::core::ffi::c_int,
    );
    pub fn mj_printSchema(
        filename: *const ::core::ffi::c_char,
        buffer: *mut ::core::ffi::c_char,
        buffer_sz: ::core::ffi::c_int,
        flg_html: ::core::ffi::c_int,
        flg_pad: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mj_fwdPosition(m: *const mjModel, d: *mut mjData);
    pub fn mj_fwdVelocity(m: *const mjModel, d: *mut mjData);
    pub fn mj_fwdActuation(m: *const mjModel, d: *mut mjData);
    pub fn mj_fwdAcceleration(m: *const mjModel, d: *mut mjData);
    pub fn mj_fwdConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_Euler(m: *const mjModel, d: *mut mjData);
    pub fn mj_RungeKutta(m: *const mjModel, d: *mut mjData, N: ::core::ffi::c_int);
    pub fn mj_implicit(m: *const mjModel, d: *mut mjData);
    pub fn mj_invPosition(m: *const mjModel, d: *mut mjData);
    pub fn mj_invVelocity(m: *const mjModel, d: *mut mjData);
    pub fn mj_invConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_compareFwdInv(m: *const mjModel, d: *mut mjData);
    pub fn mj_sensorPos(m: *const mjModel, d: *mut mjData);
    pub fn mj_sensorVel(m: *const mjModel, d: *mut mjData);
    pub fn mj_sensorAcc(m: *const mjModel, d: *mut mjData);
    pub fn mj_energyPos(m: *const mjModel, d: *mut mjData);
    pub fn mj_energyVel(m: *const mjModel, d: *mut mjData);
    pub fn mj_checkPos(m: *const mjModel, d: *mut mjData);
    pub fn mj_checkVel(m: *const mjModel, d: *mut mjData);
    pub fn mj_checkAcc(m: *const mjModel, d: *mut mjData);
    pub fn mj_kinematics(m: *const mjModel, d: *mut mjData);
    pub fn mj_comPos(m: *const mjModel, d: *mut mjData);
    pub fn mj_camlight(m: *const mjModel, d: *mut mjData);
    pub fn mj_flex(m: *const mjModel, d: *mut mjData);
    pub fn mj_tendon(m: *const mjModel, d: *mut mjData);
    pub fn mj_transmission(m: *const mjModel, d: *mut mjData);
    pub fn mj_crb(m: *const mjModel, d: *mut mjData);
    pub fn mj_factorM(m: *const mjModel, d: *mut mjData);
    pub fn mj_solveM(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mj_solveM2(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        sqrtInvD: *const mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mj_comVel(m: *const mjModel, d: *mut mjData);
    pub fn mj_passive(m: *const mjModel, d: *mut mjData);
    pub fn mj_subtreeVel(m: *const mjModel, d: *mut mjData);
    pub fn mj_rne(
        m: *const mjModel,
        d: *mut mjData,
        flg_acc: ::core::ffi::c_int,
        result: *mut mjtNum,
    );
    pub fn mj_rnePostConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_collision(m: *const mjModel, d: *mut mjData);
    pub fn mj_makeConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_island(m: *const mjModel, d: *mut mjData);
    pub fn mj_projectConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_referenceConstraint(m: *const mjModel, d: *mut mjData);
    pub fn mj_constraintUpdate(
        m: *const mjModel,
        d: *mut mjData,
        jar: *const mjtNum,
        cost: *mut [mjtNum; 1usize],
        flg_coneHessian: ::core::ffi::c_int,
    );
    pub fn mj_stateSize(m: *const mjModel, spec: ::core::ffi::c_uint) -> ::core::ffi::c_int;
    pub fn mj_getState(
        m: *const mjModel,
        d: *const mjData,
        state: *mut mjtNum,
        spec: ::core::ffi::c_uint,
    );
    pub fn mj_setState(
        m: *const mjModel,
        d: *mut mjData,
        state: *const mjtNum,
        spec: ::core::ffi::c_uint,
    );
    pub fn mj_setKeyframe(m: *mut mjModel, d: *const mjData, k: ::core::ffi::c_int);
    pub fn mj_addContact(
        m: *const mjModel,
        d: *mut mjData,
        con: *const mjContact,
    ) -> ::core::ffi::c_int;
    pub fn mj_isPyramidal(m: *const mjModel) -> ::core::ffi::c_int;
    pub fn mj_isSparse(m: *const mjModel) -> ::core::ffi::c_int;
    pub fn mj_isDual(m: *const mjModel) -> ::core::ffi::c_int;
    pub fn mj_mulJacVec(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
    pub fn mj_mulJacTVec(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
    pub fn mj_jac(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        point: *const [mjtNum; 3usize],
        body: ::core::ffi::c_int,
    );
    pub fn mj_jacBody(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::core::ffi::c_int,
    );
    pub fn mj_jacBodyCom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::core::ffi::c_int,
    );
    pub fn mj_jacSubtreeCom(
        m: *const mjModel,
        d: *mut mjData,
        jacp: *mut mjtNum,
        body: ::core::ffi::c_int,
    );
    pub fn mj_jacGeom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        geom: ::core::ffi::c_int,
    );
    pub fn mj_jacSite(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        site: ::core::ffi::c_int,
    );
    pub fn mj_jacPointAxis(
        m: *const mjModel,
        d: *mut mjData,
        jacPoint: *mut mjtNum,
        jacAxis: *mut mjtNum,
        point: *const [mjtNum; 3usize],
        axis: *const [mjtNum; 3usize],
        body: ::core::ffi::c_int,
    );
    pub fn mj_jacDot(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        point: *const [mjtNum; 3usize],
        body: ::core::ffi::c_int,
    );
    pub fn mj_angmomMat(
        m: *const mjModel,
        d: *mut mjData,
        mat: *mut mjtNum,
        body: ::core::ffi::c_int,
    );
    pub fn mj_name2id(
        m: *const mjModel,
        type_: ::core::ffi::c_int,
        name: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn mj_id2name(
        m: *const mjModel,
        type_: ::core::ffi::c_int,
        id: ::core::ffi::c_int,
    ) -> *const ::core::ffi::c_char;
    pub fn mj_fullM(m: *const mjModel, dst: *mut mjtNum, M: *const mjtNum);
    pub fn mj_mulM(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
    pub fn mj_mulM2(m: *const mjModel, d: *const mjData, res: *mut mjtNum, vec: *const mjtNum);
    pub fn mj_addM(
        m: *const mjModel,
        d: *mut mjData,
        dst: *mut mjtNum,
        rownnz: *mut ::core::ffi::c_int,
        rowadr: *mut ::core::ffi::c_int,
        colind: *mut ::core::ffi::c_int,
    );
    pub fn mj_applyFT(
        m: *const mjModel,
        d: *mut mjData,
        force: *const [mjtNum; 3usize],
        torque: *const [mjtNum; 3usize],
        point: *const [mjtNum; 3usize],
        body: ::core::ffi::c_int,
        qfrc_target: *mut mjtNum,
    );
    pub fn mj_objectVelocity(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::core::ffi::c_int,
        objid: ::core::ffi::c_int,
        res: *mut [mjtNum; 6usize],
        flg_local: ::core::ffi::c_int,
    );
    pub fn mj_objectAcceleration(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::core::ffi::c_int,
        objid: ::core::ffi::c_int,
        res: *mut [mjtNum; 6usize],
        flg_local: ::core::ffi::c_int,
    );
    pub fn mj_geomDistance(
        m: *const mjModel,
        d: *const mjData,
        geom1: ::core::ffi::c_int,
        geom2: ::core::ffi::c_int,
        distmax: mjtNum,
        fromto: *mut [mjtNum; 6usize],
    ) -> mjtNum;
    pub fn mj_contactForce(
        m: *const mjModel,
        d: *const mjData,
        id: ::core::ffi::c_int,
        result: *mut [mjtNum; 6usize],
    );
    pub fn mj_differentiatePos(
        m: *const mjModel,
        qvel: *mut mjtNum,
        dt: mjtNum,
        qpos1: *const mjtNum,
        qpos2: *const mjtNum,
    );
    pub fn mj_integratePos(m: *const mjModel, qpos: *mut mjtNum, qvel: *const mjtNum, dt: mjtNum);
    pub fn mj_normalizeQuat(m: *const mjModel, qpos: *mut mjtNum);
    pub fn mj_local2Global(
        d: *mut mjData,
        xpos: *mut [mjtNum; 3usize],
        xmat: *mut [mjtNum; 9usize],
        pos: *const [mjtNum; 3usize],
        quat: *const [mjtNum; 4usize],
        body: ::core::ffi::c_int,
        sameframe: mjtByte,
    );
    pub fn mj_getTotalmass(m: *const mjModel) -> mjtNum;
    pub fn mj_setTotalmass(m: *mut mjModel, newmass: mjtNum);
    pub fn mj_getPluginConfig(
        m: *const mjModel,
        plugin_id: ::core::ffi::c_int,
        attrib: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
    pub fn mj_loadPluginLibrary(path: *const ::core::ffi::c_char);
    pub fn mj_loadAllPluginLibraries(
        directory: *const ::core::ffi::c_char,
        callback: mjfPluginLibraryLoadCallback,
    );
    pub fn mj_version() -> ::core::ffi::c_int;
    pub fn mj_versionString() -> *const ::core::ffi::c_char;
    pub fn mj_multiRay(
        m: *const mjModel,
        d: *mut mjData,
        pnt: *const [mjtNum; 3usize],
        vec: *const mjtNum,
        geomgroup: *const mjtByte,
        flg_static: mjtByte,
        bodyexclude: ::core::ffi::c_int,
        geomid: *mut ::core::ffi::c_int,
        dist: *mut mjtNum,
        nray: ::core::ffi::c_int,
        cutoff: mjtNum,
    );
    pub fn mj_ray(
        m: *const mjModel,
        d: *const mjData,
        pnt: *const [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
        geomgroup: *const mjtByte,
        flg_static: mjtByte,
        bodyexclude: ::core::ffi::c_int,
        geomid: *mut [::core::ffi::c_int; 1usize],
    ) -> mjtNum;
    pub fn mj_rayHfield(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::core::ffi::c_int,
        pnt: *const [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
    ) -> mjtNum;
    pub fn mj_rayMesh(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::core::ffi::c_int,
        pnt: *const [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
    ) -> mjtNum;
    pub fn mju_rayGeom(
        pos: *const [mjtNum; 3usize],
        mat: *const [mjtNum; 9usize],
        size: *const [mjtNum; 3usize],
        pnt: *const [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
        geomtype: ::core::ffi::c_int,
    ) -> mjtNum;
    pub fn mju_rayFlex(
        m: *const mjModel,
        d: *const mjData,
        flex_layer: ::core::ffi::c_int,
        flg_vert: mjtByte,
        flg_edge: mjtByte,
        flg_face: mjtByte,
        flg_skin: mjtByte,
        flexid: ::core::ffi::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        vertid: *mut [::core::ffi::c_int; 1usize],
    ) -> mjtNum;
    pub fn mju_raySkin(
        nface: ::core::ffi::c_int,
        nvert: ::core::ffi::c_int,
        face: *const ::core::ffi::c_int,
        vert: *const f32,
        pnt: *const [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
        vertid: *mut [::core::ffi::c_int; 1usize],
    ) -> mjtNum;
    pub fn mjv_defaultCamera(cam: *mut mjvCamera);
    pub fn mjv_defaultFreeCamera(m: *const mjModel, cam: *mut mjvCamera);
    pub fn mjv_defaultPerturb(pert: *mut mjvPerturb);
    pub fn mjv_room2model(
        modelpos: *mut [mjtNum; 3usize],
        modelquat: *mut [mjtNum; 4usize],
        roompos: *const [mjtNum; 3usize],
        roomquat: *const [mjtNum; 4usize],
        scn: *const mjvScene,
    );
    pub fn mjv_model2room(
        roompos: *mut [mjtNum; 3usize],
        roomquat: *mut [mjtNum; 4usize],
        modelpos: *const [mjtNum; 3usize],
        modelquat: *const [mjtNum; 4usize],
        scn: *const mjvScene,
    );
    pub fn mjv_cameraInModel(
        headpos: *mut [mjtNum; 3usize],
        forward: *mut [mjtNum; 3usize],
        up: *mut [mjtNum; 3usize],
        scn: *const mjvScene,
    );
    pub fn mjv_cameraInRoom(
        headpos: *mut [mjtNum; 3usize],
        forward: *mut [mjtNum; 3usize],
        up: *mut [mjtNum; 3usize],
        scn: *const mjvScene,
    );
    pub fn mjv_frustumHeight(scn: *const mjvScene) -> mjtNum;
    pub fn mjv_alignToCamera(
        res: *mut [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
        forward: *const [mjtNum; 3usize],
    );
    pub fn mjv_moveCamera(
        m: *const mjModel,
        action: ::core::ffi::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        cam: *mut mjvCamera,
    );
    pub fn mjv_moveCameraFromState(
        scnstate: *const mjvSceneState,
        action: ::core::ffi::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        cam: *mut mjvCamera,
    );
    pub fn mjv_movePerturb(
        m: *const mjModel,
        d: *const mjData,
        action: ::core::ffi::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
    pub fn mjv_movePerturbFromState(
        scnstate: *const mjvSceneState,
        action: ::core::ffi::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
    pub fn mjv_moveModel(
        m: *const mjModel,
        action: ::core::ffi::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        roomup: *const [mjtNum; 3usize],
        scn: *mut mjvScene,
    );
    pub fn mjv_initPerturb(
        m: *const mjModel,
        d: *mut mjData,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
    pub fn mjv_applyPerturbPose(
        m: *const mjModel,
        d: *mut mjData,
        pert: *const mjvPerturb,
        flg_paused: ::core::ffi::c_int,
    );
    pub fn mjv_applyPerturbForce(m: *const mjModel, d: *mut mjData, pert: *const mjvPerturb);
    pub fn mjv_averageCamera(cam1: *const mjvGLCamera, cam2: *const mjvGLCamera) -> mjvGLCamera;
    pub fn mjv_select(
        m: *const mjModel,
        d: *const mjData,
        vopt: *const mjvOption,
        aspectratio: mjtNum,
        relx: mjtNum,
        rely: mjtNum,
        scn: *const mjvScene,
        selpnt: *mut [mjtNum; 3usize],
        geomid: *mut [::core::ffi::c_int; 1usize],
        flexid: *mut [::core::ffi::c_int; 1usize],
        skinid: *mut [::core::ffi::c_int; 1usize],
    ) -> ::core::ffi::c_int;
    pub fn mjv_defaultOption(opt: *mut mjvOption);
    pub fn mjv_defaultFigure(fig: *mut mjvFigure);
    pub fn mjv_initGeom(
        geom: *mut mjvGeom,
        type_: ::core::ffi::c_int,
        size: *const [mjtNum; 3usize],
        pos: *const [mjtNum; 3usize],
        mat: *const [mjtNum; 9usize],
        rgba: *const [f32; 4usize],
    );
    pub fn mjv_connector(
        geom: *mut mjvGeom,
        type_: ::core::ffi::c_int,
        width: mjtNum,
        from: *const [mjtNum; 3usize],
        to: *const [mjtNum; 3usize],
    );
    pub fn mjv_defaultScene(scn: *mut mjvScene);
    pub fn mjv_makeScene(m: *const mjModel, scn: *mut mjvScene, maxgeom: ::core::ffi::c_int);
    pub fn mjv_freeScene(scn: *mut mjvScene);
    pub fn mjv_updateScene(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        cam: *mut mjvCamera,
        catmask: ::core::ffi::c_int,
        scn: *mut mjvScene,
    );
    pub fn mjv_updateSceneFromState(
        scnstate: *const mjvSceneState,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        cam: *mut mjvCamera,
        catmask: ::core::ffi::c_int,
        scn: *mut mjvScene,
    ) -> ::core::ffi::c_int;
    pub fn mjv_copyModel(dest: *mut mjModel, src: *const mjModel);
    pub fn mjv_defaultSceneState(scnstate: *mut mjvSceneState);
    pub fn mjv_makeSceneState(
        m: *const mjModel,
        d: *const mjData,
        scnstate: *mut mjvSceneState,
        maxgeom: ::core::ffi::c_int,
    );
    pub fn mjv_freeSceneState(scnstate: *mut mjvSceneState);
    pub fn mjv_updateSceneState(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        scnstate: *mut mjvSceneState,
    );
    pub fn mjv_addGeoms(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        catmask: ::core::ffi::c_int,
        scn: *mut mjvScene,
    );
    pub fn mjv_makeLights(m: *const mjModel, d: *const mjData, scn: *mut mjvScene);
    pub fn mjv_updateCamera(
        m: *const mjModel,
        d: *const mjData,
        cam: *mut mjvCamera,
        scn: *mut mjvScene,
    );
    pub fn mjv_updateSkin(m: *const mjModel, d: *const mjData, scn: *mut mjvScene);
    pub fn mjr_defaultContext(con: *mut mjrContext);
    pub fn mjr_makeContext(m: *const mjModel, con: *mut mjrContext, fontscale: ::core::ffi::c_int);
    pub fn mjr_changeFont(fontscale: ::core::ffi::c_int, con: *mut mjrContext);
    pub fn mjr_addAux(
        index: ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        samples: ::core::ffi::c_int,
        con: *mut mjrContext,
    );
    pub fn mjr_freeContext(con: *mut mjrContext);
    pub fn mjr_resizeOffscreen(
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        con: *mut mjrContext,
    );
    pub fn mjr_uploadTexture(m: *const mjModel, con: *const mjrContext, texid: ::core::ffi::c_int);
    pub fn mjr_uploadMesh(m: *const mjModel, con: *const mjrContext, meshid: ::core::ffi::c_int);
    pub fn mjr_uploadHField(
        m: *const mjModel,
        con: *const mjrContext,
        hfieldid: ::core::ffi::c_int,
    );
    pub fn mjr_restoreBuffer(con: *const mjrContext);
    pub fn mjr_setBuffer(framebuffer: ::core::ffi::c_int, con: *mut mjrContext);
    pub fn mjr_readPixels(
        rgb: *mut ::core::ffi::c_uchar,
        depth: *mut f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
    pub fn mjr_drawPixels(
        rgb: *const ::core::ffi::c_uchar,
        depth: *const f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
    pub fn mjr_blitBuffer(
        src: mjrRect,
        dst: mjrRect,
        flg_color: ::core::ffi::c_int,
        flg_depth: ::core::ffi::c_int,
        con: *const mjrContext,
    );
    pub fn mjr_setAux(index: ::core::ffi::c_int, con: *const mjrContext);
    pub fn mjr_blitAux(
        index: ::core::ffi::c_int,
        src: mjrRect,
        left: ::core::ffi::c_int,
        bottom: ::core::ffi::c_int,
        con: *const mjrContext,
    );
    pub fn mjr_text(
        font: ::core::ffi::c_int,
        txt: *const ::core::ffi::c_char,
        con: *const mjrContext,
        x: f32,
        y: f32,
        r: f32,
        g: f32,
        b: f32,
    );
    pub fn mjr_overlay(
        font: ::core::ffi::c_int,
        gridpos: ::core::ffi::c_int,
        viewport: mjrRect,
        overlay: *const ::core::ffi::c_char,
        overlay2: *const ::core::ffi::c_char,
        con: *const mjrContext,
    );
    pub fn mjr_maxViewport(con: *const mjrContext) -> mjrRect;
    pub fn mjr_rectangle(viewport: mjrRect, r: f32, g: f32, b: f32, a: f32);
    pub fn mjr_label(
        viewport: mjrRect,
        font: ::core::ffi::c_int,
        txt: *const ::core::ffi::c_char,
        r: f32,
        g: f32,
        b: f32,
        a: f32,
        rt: f32,
        gt: f32,
        bt: f32,
        con: *const mjrContext,
    );
    pub fn mjr_figure(viewport: mjrRect, fig: *mut mjvFigure, con: *const mjrContext);
    pub fn mjr_render(viewport: mjrRect, scn: *mut mjvScene, con: *const mjrContext);
    pub fn mjr_finish();
    pub fn mjr_getError() -> ::core::ffi::c_int;
    pub fn mjr_findRect(
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        nrect: ::core::ffi::c_int,
        rect: *const mjrRect,
    ) -> ::core::ffi::c_int;
    pub fn mjui_themeSpacing(ind: ::core::ffi::c_int) -> mjuiThemeSpacing;
    pub fn mjui_themeColor(ind: ::core::ffi::c_int) -> mjuiThemeColor;
    pub fn mjui_add(ui: *mut mjUI, def: *const mjuiDef);
    pub fn mjui_addToSection(ui: *mut mjUI, sect: ::core::ffi::c_int, def: *const mjuiDef);
    pub fn mjui_resize(ui: *mut mjUI, con: *const mjrContext);
    pub fn mjui_update(
        section: ::core::ffi::c_int,
        item: ::core::ffi::c_int,
        ui: *const mjUI,
        state: *const mjuiState,
        con: *const mjrContext,
    );
    pub fn mjui_event(
        ui: *mut mjUI,
        state: *mut mjuiState,
        con: *const mjrContext,
    ) -> *mut mjuiItem;
    pub fn mjui_render(ui: *mut mjUI, state: *const mjuiState, con: *const mjrContext);
    pub fn mju_error(msg: *const ::core::ffi::c_char, ...);
    pub fn mju_error_i(msg: *const ::core::ffi::c_char, i: ::core::ffi::c_int);
    pub fn mju_error_s(msg: *const ::core::ffi::c_char, text: *const ::core::ffi::c_char);
    pub fn mju_warning(msg: *const ::core::ffi::c_char, ...);
    pub fn mju_warning_i(msg: *const ::core::ffi::c_char, i: ::core::ffi::c_int);
    pub fn mju_warning_s(msg: *const ::core::ffi::c_char, text: *const ::core::ffi::c_char);
    pub fn mju_clearHandlers();
    pub fn mju_malloc(size: usize) -> *mut ::core::ffi::c_void;
    pub fn mju_free(ptr: *mut ::core::ffi::c_void);
    pub fn mj_warning(d: *mut mjData, warning: ::core::ffi::c_int, info: ::core::ffi::c_int);
    pub fn mju_writeLog(type_: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char);
    pub fn mjs_getError(s: *mut mjSpec) -> *const ::core::ffi::c_char;
    pub fn mjs_isWarning(s: *mut mjSpec) -> ::core::ffi::c_int;
    pub fn mju_zero3(res: *mut [mjtNum; 3usize]);
    pub fn mju_copy3(res: *mut [mjtNum; 3usize], data: *const [mjtNum; 3usize]);
    pub fn mju_scl3(res: *mut [mjtNum; 3usize], vec: *const [mjtNum; 3usize], scl: mjtNum);
    pub fn mju_add3(
        res: *mut [mjtNum; 3usize],
        vec1: *const [mjtNum; 3usize],
        vec2: *const [mjtNum; 3usize],
    );
    pub fn mju_sub3(
        res: *mut [mjtNum; 3usize],
        vec1: *const [mjtNum; 3usize],
        vec2: *const [mjtNum; 3usize],
    );
    pub fn mju_addTo3(res: *mut [mjtNum; 3usize], vec: *const [mjtNum; 3usize]);
    pub fn mju_subFrom3(res: *mut [mjtNum; 3usize], vec: *const [mjtNum; 3usize]);
    pub fn mju_addToScl3(res: *mut [mjtNum; 3usize], vec: *const [mjtNum; 3usize], scl: mjtNum);
    pub fn mju_addScl3(
        res: *mut [mjtNum; 3usize],
        vec1: *const [mjtNum; 3usize],
        vec2: *const [mjtNum; 3usize],
        scl: mjtNum,
    );
    pub fn mju_normalize3(vec: *mut [mjtNum; 3usize]) -> mjtNum;
    pub fn mju_norm3(vec: *const [mjtNum; 3usize]) -> mjtNum;
    pub fn mju_dot3(vec1: *const [mjtNum; 3usize], vec2: *const [mjtNum; 3usize]) -> mjtNum;
    pub fn mju_dist3(pos1: *const [mjtNum; 3usize], pos2: *const [mjtNum; 3usize]) -> mjtNum;
    pub fn mju_mulMatVec3(
        res: *mut [mjtNum; 3usize],
        mat: *const [mjtNum; 9usize],
        vec: *const [mjtNum; 3usize],
    );
    pub fn mju_mulMatTVec3(
        res: *mut [mjtNum; 3usize],
        mat: *const [mjtNum; 9usize],
        vec: *const [mjtNum; 3usize],
    );
    pub fn mju_cross(
        res: *mut [mjtNum; 3usize],
        a: *const [mjtNum; 3usize],
        b: *const [mjtNum; 3usize],
    );
    pub fn mju_zero4(res: *mut [mjtNum; 4usize]);
    pub fn mju_unit4(res: *mut [mjtNum; 4usize]);
    pub fn mju_copy4(res: *mut [mjtNum; 4usize], data: *const [mjtNum; 4usize]);
    pub fn mju_normalize4(vec: *mut [mjtNum; 4usize]) -> mjtNum;
    pub fn mju_zero(res: *mut mjtNum, n: ::core::ffi::c_int);
    pub fn mju_fill(res: *mut mjtNum, val: mjtNum, n: ::core::ffi::c_int);
    pub fn mju_copy(res: *mut mjtNum, vec: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_sum(vec: *const mjtNum, n: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_L1(vec: *const mjtNum, n: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_scl(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum, n: ::core::ffi::c_int);
    pub fn mju_add(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mju_sub(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mju_addTo(res: *mut mjtNum, vec: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_subFrom(res: *mut mjtNum, vec: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_addToScl(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum, n: ::core::ffi::c_int);
    pub fn mju_addScl(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        scl: mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mju_normalize(res: *mut mjtNum, n: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_norm(res: *const mjtNum, n: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_dot(vec1: *const mjtNum, vec2: *const mjtNum, n: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_mulMatVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
    );
    pub fn mju_mulMatTVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
    );
    pub fn mju_mulVecMatVec(
        vec1: *const mjtNum,
        mat: *const mjtNum,
        vec2: *const mjtNum,
        n: ::core::ffi::c_int,
    ) -> mjtNum;
    pub fn mju_transpose(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
    );
    pub fn mju_symmetrize(res: *mut mjtNum, mat: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_eye(mat: *mut mjtNum, n: ::core::ffi::c_int);
    pub fn mju_mulMatMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::core::ffi::c_int,
        c1: ::core::ffi::c_int,
        c2: ::core::ffi::c_int,
    );
    pub fn mju_mulMatMatT(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::core::ffi::c_int,
        c1: ::core::ffi::c_int,
        r2: ::core::ffi::c_int,
    );
    pub fn mju_mulMatTMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::core::ffi::c_int,
        c1: ::core::ffi::c_int,
        c2: ::core::ffi::c_int,
    );
    pub fn mju_sqrMatTD(
        res: *mut mjtNum,
        mat: *const mjtNum,
        diag: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
    );
    pub fn mju_transformSpatial(
        res: *mut [mjtNum; 6usize],
        vec: *const [mjtNum; 6usize],
        flg_force: ::core::ffi::c_int,
        newpos: *const [mjtNum; 3usize],
        oldpos: *const [mjtNum; 3usize],
        rotnew2old: *const [mjtNum; 9usize],
    );
    pub fn mju_dense2sparse(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
        rownnz: *mut ::core::ffi::c_int,
        rowadr: *mut ::core::ffi::c_int,
        colind: *mut ::core::ffi::c_int,
        nnz: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mju_sparse2dense(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::core::ffi::c_int,
        nc: ::core::ffi::c_int,
        rownnz: *const ::core::ffi::c_int,
        rowadr: *const ::core::ffi::c_int,
        colind: *const ::core::ffi::c_int,
    );
    pub fn mju_rotVecQuat(
        res: *mut [mjtNum; 3usize],
        vec: *const [mjtNum; 3usize],
        quat: *const [mjtNum; 4usize],
    );
    pub fn mju_negQuat(res: *mut [mjtNum; 4usize], quat: *const [mjtNum; 4usize]);
    pub fn mju_mulQuat(
        res: *mut [mjtNum; 4usize],
        quat1: *const [mjtNum; 4usize],
        quat2: *const [mjtNum; 4usize],
    );
    pub fn mju_mulQuatAxis(
        res: *mut [mjtNum; 4usize],
        quat: *const [mjtNum; 4usize],
        axis: *const [mjtNum; 3usize],
    );
    pub fn mju_axisAngle2Quat(
        res: *mut [mjtNum; 4usize],
        axis: *const [mjtNum; 3usize],
        angle: mjtNum,
    );
    pub fn mju_quat2Vel(res: *mut [mjtNum; 3usize], quat: *const [mjtNum; 4usize], dt: mjtNum);
    pub fn mju_subQuat(
        res: *mut [mjtNum; 3usize],
        qa: *const [mjtNum; 4usize],
        qb: *const [mjtNum; 4usize],
    );
    pub fn mju_quat2Mat(res: *mut [mjtNum; 9usize], quat: *const [mjtNum; 4usize]);
    pub fn mju_mat2Quat(quat: *mut [mjtNum; 4usize], mat: *const [mjtNum; 9usize]);
    pub fn mju_derivQuat(
        res: *mut [mjtNum; 4usize],
        quat: *const [mjtNum; 4usize],
        vel: *const [mjtNum; 3usize],
    );
    pub fn mju_quatIntegrate(
        quat: *mut [mjtNum; 4usize],
        vel: *const [mjtNum; 3usize],
        scale: mjtNum,
    );
    pub fn mju_quatZ2Vec(quat: *mut [mjtNum; 4usize], vec: *const [mjtNum; 3usize]);
    pub fn mju_mat2Rot(
        quat: *mut [mjtNum; 4usize],
        mat: *const [mjtNum; 9usize],
    ) -> ::core::ffi::c_int;
    pub fn mju_euler2Quat(
        quat: *mut [mjtNum; 4usize],
        euler: *const [mjtNum; 3usize],
        seq: *const ::core::ffi::c_char,
    );
    pub fn mju_mulPose(
        posres: *mut [mjtNum; 3usize],
        quatres: *mut [mjtNum; 4usize],
        pos1: *const [mjtNum; 3usize],
        quat1: *const [mjtNum; 4usize],
        pos2: *const [mjtNum; 3usize],
        quat2: *const [mjtNum; 4usize],
    );
    pub fn mju_negPose(
        posres: *mut [mjtNum; 3usize],
        quatres: *mut [mjtNum; 4usize],
        pos: *const [mjtNum; 3usize],
        quat: *const [mjtNum; 4usize],
    );
    pub fn mju_trnVecPose(
        res: *mut [mjtNum; 3usize],
        pos: *const [mjtNum; 3usize],
        quat: *const [mjtNum; 4usize],
        vec: *const [mjtNum; 3usize],
    );
    pub fn mju_cholFactor(
        mat: *mut mjtNum,
        n: ::core::ffi::c_int,
        mindiag: mjtNum,
    ) -> ::core::ffi::c_int;
    pub fn mju_cholSolve(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        n: ::core::ffi::c_int,
    );
    pub fn mju_cholUpdate(
        mat: *mut mjtNum,
        x: *mut mjtNum,
        n: ::core::ffi::c_int,
        flg_plus: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mju_cholFactorBand(
        mat: *mut mjtNum,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
        diagadd: mjtNum,
        diagmul: mjtNum,
    ) -> mjtNum;
    pub fn mju_cholSolveBand(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
    );
    pub fn mju_band2Dense(
        res: *mut mjtNum,
        mat: *const mjtNum,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
        flg_sym: mjtByte,
    );
    pub fn mju_dense2Band(
        res: *mut mjtNum,
        mat: *const mjtNum,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
    );
    pub fn mju_bandMulMatVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
        nvec: ::core::ffi::c_int,
        flg_sym: mjtByte,
    );
    pub fn mju_bandDiag(
        i: ::core::ffi::c_int,
        ntotal: ::core::ffi::c_int,
        nband: ::core::ffi::c_int,
        ndense: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn mju_eig3(
        eigval: *mut [mjtNum; 3usize],
        eigvec: *mut [mjtNum; 9usize],
        quat: *mut [mjtNum; 4usize],
        mat: *const [mjtNum; 9usize],
    ) -> ::core::ffi::c_int;
    pub fn mju_boxQP(
        res: *mut mjtNum,
        R: *mut mjtNum,
        index: *mut ::core::ffi::c_int,
        H: *const mjtNum,
        g: *const mjtNum,
        n: ::core::ffi::c_int,
        lower: *const mjtNum,
        upper: *const mjtNum,
    ) -> ::core::ffi::c_int;
    pub fn mju_boxQPmalloc(
        res: *mut *mut mjtNum,
        R: *mut *mut mjtNum,
        index: *mut *mut ::core::ffi::c_int,
        H: *mut *mut mjtNum,
        g: *mut *mut mjtNum,
        n: ::core::ffi::c_int,
        lower: *mut *mut mjtNum,
        upper: *mut *mut mjtNum,
    );
    pub fn mju_muscleGain(
        len: mjtNum,
        vel: mjtNum,
        lengthrange: *const [mjtNum; 2usize],
        acc0: mjtNum,
        prm: *const [mjtNum; 9usize],
    ) -> mjtNum;
    pub fn mju_muscleBias(
        len: mjtNum,
        lengthrange: *const [mjtNum; 2usize],
        acc0: mjtNum,
        prm: *const [mjtNum; 9usize],
    ) -> mjtNum;
    pub fn mju_muscleDynamics(ctrl: mjtNum, act: mjtNum, prm: *const [mjtNum; 3usize]) -> mjtNum;
    pub fn mju_encodePyramid(
        pyramid: *mut mjtNum,
        force: *const mjtNum,
        mu: *const mjtNum,
        dim: ::core::ffi::c_int,
    );
    pub fn mju_decodePyramid(
        force: *mut mjtNum,
        pyramid: *const mjtNum,
        mu: *const mjtNum,
        dim: ::core::ffi::c_int,
    );
    pub fn mju_springDamper(
        pos0: mjtNum,
        vel0: mjtNum,
        Kp: mjtNum,
        Kv: mjtNum,
        dt: mjtNum,
    ) -> mjtNum;
    pub fn mju_min(a: mjtNum, b: mjtNum) -> mjtNum;
    pub fn mju_max(a: mjtNum, b: mjtNum) -> mjtNum;
    pub fn mju_clip(x: mjtNum, min: mjtNum, max: mjtNum) -> mjtNum;
    pub fn mju_sign(x: mjtNum) -> mjtNum;
    pub fn mju_round(x: mjtNum) -> ::core::ffi::c_int;
    pub fn mju_type2Str(type_: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
    pub fn mju_str2Type(str_: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn mju_writeNumBytes(nbytes: usize) -> *const ::core::ffi::c_char;
    pub fn mju_warningText(warning: ::core::ffi::c_int, info: usize) -> *const ::core::ffi::c_char;
    pub fn mju_isBad(x: mjtNum) -> ::core::ffi::c_int;
    pub fn mju_isZero(vec: *mut mjtNum, n: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn mju_standardNormal(num2: *mut mjtNum) -> mjtNum;
    pub fn mju_f2n(res: *mut mjtNum, vec: *const f32, n: ::core::ffi::c_int);
    pub fn mju_n2f(res: *mut f32, vec: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_d2n(res: *mut mjtNum, vec: *const f64, n: ::core::ffi::c_int);
    pub fn mju_n2d(res: *mut f64, vec: *const mjtNum, n: ::core::ffi::c_int);
    pub fn mju_insertionSort(list: *mut mjtNum, n: ::core::ffi::c_int);
    pub fn mju_insertionSortInt(list: *mut ::core::ffi::c_int, n: ::core::ffi::c_int);
    pub fn mju_Halton(index: ::core::ffi::c_int, base: ::core::ffi::c_int) -> mjtNum;
    pub fn mju_strncpy(
        dst: *mut ::core::ffi::c_char,
        src: *const ::core::ffi::c_char,
        n: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
    pub fn mju_sigmoid(x: mjtNum) -> mjtNum;
    pub fn mjd_transitionFD(
        m: *const mjModel,
        d: *mut mjData,
        eps: mjtNum,
        flg_centered: mjtByte,
        A: *mut mjtNum,
        B: *mut mjtNum,
        C: *mut mjtNum,
        D: *mut mjtNum,
    );
    pub fn mjd_inverseFD(
        m: *const mjModel,
        d: *mut mjData,
        eps: mjtNum,
        flg_actuation: mjtByte,
        DfDq: *mut mjtNum,
        DfDv: *mut mjtNum,
        DfDa: *mut mjtNum,
        DsDq: *mut mjtNum,
        DsDv: *mut mjtNum,
        DsDa: *mut mjtNum,
        DmDq: *mut mjtNum,
    );
    pub fn mjd_subQuat(
        qa: *const [mjtNum; 4usize],
        qb: *const [mjtNum; 4usize],
        Da: *mut [mjtNum; 9usize],
        Db: *mut [mjtNum; 9usize],
    );
    pub fn mjd_quatIntegrate(
        vel: *const [mjtNum; 3usize],
        scale: mjtNum,
        Dquat: *mut [mjtNum; 9usize],
        Dvel: *mut [mjtNum; 9usize],
        Dscale: *mut [mjtNum; 3usize],
    );
    pub fn mjp_defaultPlugin(plugin: *mut mjpPlugin);
    pub fn mjp_registerPlugin(plugin: *const mjpPlugin) -> ::core::ffi::c_int;
    pub fn mjp_pluginCount() -> ::core::ffi::c_int;
    pub fn mjp_getPlugin(
        name: *const ::core::ffi::c_char,
        slot: *mut ::core::ffi::c_int,
    ) -> *const mjpPlugin;
    pub fn mjp_getPluginAtSlot(slot: ::core::ffi::c_int) -> *const mjpPlugin;
    pub fn mjp_defaultResourceProvider(provider: *mut mjpResourceProvider);
    pub fn mjp_registerResourceProvider(provider: *const mjpResourceProvider)
    -> ::core::ffi::c_int;
    pub fn mjp_resourceProviderCount() -> ::core::ffi::c_int;
    pub fn mjp_getResourceProvider(
        resource_name: *const ::core::ffi::c_char,
    ) -> *const mjpResourceProvider;
    pub fn mjp_getResourceProviderAtSlot(slot: ::core::ffi::c_int) -> *const mjpResourceProvider;
    pub fn mju_threadPoolCreate(number_of_threads: usize) -> *mut mjThreadPool;
    pub fn mju_bindThreadPool(d: *mut mjData, thread_pool: *mut ::core::ffi::c_void);
    pub fn mju_threadPoolEnqueue(thread_pool: *mut mjThreadPool, task: *mut mjTask);
    pub fn mju_threadPoolDestroy(thread_pool: *mut mjThreadPool);
    pub fn mju_defaultTask(task: *mut mjTask);
    pub fn mju_taskJoin(task: *mut mjTask);
    pub fn mjs_attach(
        parent: *mut mjsElement,
        child: *const mjsElement,
        prefix: *const ::core::ffi::c_char,
        suffix: *const ::core::ffi::c_char,
    ) -> *mut mjsElement;
    pub fn mjs_detachBody(s: *mut mjSpec, b: *mut mjsBody) -> ::core::ffi::c_int;
    pub fn mjs_detachDefault(s: *mut mjSpec, d: *mut mjsDefault) -> ::core::ffi::c_int;
    pub fn mjs_addBody(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsBody;
    pub fn mjs_addSite(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsSite;
    pub fn mjs_addJoint(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsJoint;
    pub fn mjs_addFreeJoint(body: *mut mjsBody) -> *mut mjsJoint;
    pub fn mjs_addGeom(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsGeom;
    pub fn mjs_addCamera(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsCamera;
    pub fn mjs_addLight(body: *mut mjsBody, def: *const mjsDefault) -> *mut mjsLight;
    pub fn mjs_addFrame(body: *mut mjsBody, parentframe: *mut mjsFrame) -> *mut mjsFrame;
    pub fn mjs_delete(element: *mut mjsElement) -> ::core::ffi::c_int;
    pub fn mjs_addActuator(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsActuator;
    pub fn mjs_addSensor(s: *mut mjSpec) -> *mut mjsSensor;
    pub fn mjs_addFlex(s: *mut mjSpec) -> *mut mjsFlex;
    pub fn mjs_addPair(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsPair;
    pub fn mjs_addExclude(s: *mut mjSpec) -> *mut mjsExclude;
    pub fn mjs_addEquality(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsEquality;
    pub fn mjs_addTendon(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsTendon;
    pub fn mjs_wrapSite(tendon: *mut mjsTendon, name: *const ::core::ffi::c_char) -> *mut mjsWrap;
    pub fn mjs_wrapGeom(
        tendon: *mut mjsTendon,
        name: *const ::core::ffi::c_char,
        sidesite: *const ::core::ffi::c_char,
    ) -> *mut mjsWrap;
    pub fn mjs_wrapJoint(
        tendon: *mut mjsTendon,
        name: *const ::core::ffi::c_char,
        coef: f64,
    ) -> *mut mjsWrap;
    pub fn mjs_wrapPulley(tendon: *mut mjsTendon, divisor: f64) -> *mut mjsWrap;
    pub fn mjs_addNumeric(s: *mut mjSpec) -> *mut mjsNumeric;
    pub fn mjs_addText(s: *mut mjSpec) -> *mut mjsText;
    pub fn mjs_addTuple(s: *mut mjSpec) -> *mut mjsTuple;
    pub fn mjs_addKey(s: *mut mjSpec) -> *mut mjsKey;
    pub fn mjs_addPlugin(s: *mut mjSpec) -> *mut mjsPlugin;
    pub fn mjs_addDefault(
        s: *mut mjSpec,
        classname: *const ::core::ffi::c_char,
        parent: *const mjsDefault,
    ) -> *mut mjsDefault;
    pub fn mjs_addMesh(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsMesh;
    pub fn mjs_addHField(s: *mut mjSpec) -> *mut mjsHField;
    pub fn mjs_addSkin(s: *mut mjSpec) -> *mut mjsSkin;
    pub fn mjs_addTexture(s: *mut mjSpec) -> *mut mjsTexture;
    pub fn mjs_addMaterial(s: *mut mjSpec, def: *const mjsDefault) -> *mut mjsMaterial;
    pub fn mjs_getSpec(element: *mut mjsElement) -> *mut mjSpec;
    pub fn mjs_findSpec(spec: *mut mjSpec, name: *const ::core::ffi::c_char) -> *mut mjSpec;
    pub fn mjs_findBody(s: *mut mjSpec, name: *const ::core::ffi::c_char) -> *mut mjsBody;
    pub fn mjs_findElement(
        s: *mut mjSpec,
        type_: mjtObj,
        name: *const ::core::ffi::c_char,
    ) -> *mut mjsElement;
    pub fn mjs_findChild(body: *mut mjsBody, name: *const ::core::ffi::c_char) -> *mut mjsBody;
    pub fn mjs_getParent(element: *mut mjsElement) -> *mut mjsBody;
    pub fn mjs_getFrame(element: *mut mjsElement) -> *mut mjsFrame;
    pub fn mjs_findFrame(s: *mut mjSpec, name: *const ::core::ffi::c_char) -> *mut mjsFrame;
    pub fn mjs_getDefault(element: *mut mjsElement) -> *mut mjsDefault;
    pub fn mjs_findDefault(
        s: *mut mjSpec,
        classname: *const ::core::ffi::c_char,
    ) -> *mut mjsDefault;
    pub fn mjs_getSpecDefault(s: *mut mjSpec) -> *mut mjsDefault;
    pub fn mjs_getId(element: *mut mjsElement) -> ::core::ffi::c_int;
    pub fn mjs_firstChild(
        body: *mut mjsBody,
        type_: mjtObj,
        recurse: ::core::ffi::c_int,
    ) -> *mut mjsElement;
    pub fn mjs_nextChild(
        body: *mut mjsBody,
        child: *mut mjsElement,
        recurse: ::core::ffi::c_int,
    ) -> *mut mjsElement;
    pub fn mjs_firstElement(s: *mut mjSpec, type_: mjtObj) -> *mut mjsElement;
    pub fn mjs_nextElement(s: *mut mjSpec, element: *mut mjsElement) -> *mut mjsElement;
    pub fn mjs_setBuffer(
        dest: *mut mjByteVec,
        array: *const ::core::ffi::c_void,
        size: ::core::ffi::c_int,
    );
    pub fn mjs_setString(dest: *mut mjString, text: *const ::core::ffi::c_char);
    pub fn mjs_setStringVec(dest: *mut mjStringVec, text: *const ::core::ffi::c_char);
    pub fn mjs_setInStringVec(
        dest: *mut mjStringVec,
        i: ::core::ffi::c_int,
        text: *const ::core::ffi::c_char,
    ) -> mjtByte;
    pub fn mjs_appendString(dest: *mut mjStringVec, text: *const ::core::ffi::c_char);
    pub fn mjs_setInt(
        dest: *mut mjIntVec,
        array: *const ::core::ffi::c_int,
        size: ::core::ffi::c_int,
    );
    pub fn mjs_appendIntVec(
        dest: *mut mjIntVecVec,
        array: *const ::core::ffi::c_int,
        size: ::core::ffi::c_int,
    );
    pub fn mjs_setFloat(dest: *mut mjFloatVec, array: *const f32, size: ::core::ffi::c_int);
    pub fn mjs_appendFloatVec(
        dest: *mut mjFloatVecVec,
        array: *const f32,
        size: ::core::ffi::c_int,
    );
    pub fn mjs_setDouble(dest: *mut mjDoubleVec, array: *const f64, size: ::core::ffi::c_int);
    pub fn mjs_setPluginAttributes(plugin: *mut mjsPlugin, attributes: *mut ::core::ffi::c_void);
    pub fn mjs_getString(source: *const mjString) -> *const ::core::ffi::c_char;
    pub fn mjs_getDouble(source: *const mjDoubleVec, size: *mut ::core::ffi::c_int) -> *const f64;
    pub fn mjs_setDefault(element: *mut mjsElement, def: *const mjsDefault);
    pub fn mjs_setFrame(dest: *mut mjsElement, frame: *mut mjsFrame) -> ::core::ffi::c_int;
    pub fn mjs_resolveOrientation(
        quat: *mut [f64; 4usize],
        degree: mjtByte,
        sequence: *const ::core::ffi::c_char,
        orientation: *const mjsOrientation,
    ) -> *const ::core::ffi::c_char;
    pub fn mjs_bodyToFrame(body: *mut *mut mjsBody) -> *mut mjsFrame;
    pub fn mjs_setUserValue(
        element: *mut mjsElement,
        key: *const ::core::ffi::c_char,
        data: *const ::core::ffi::c_void,
    );
    pub fn mjs_getUserValue(
        element: *mut mjsElement,
        key: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_void;
    pub fn mjs_deleteUserValue(element: *mut mjsElement, key: *const ::core::ffi::c_char);
    pub fn mjs_defaultSpec(spec: *mut mjSpec);
    pub fn mjs_defaultOrientation(orient: *mut mjsOrientation);
    pub fn mjs_defaultBody(body: *mut mjsBody);
    pub fn mjs_defaultFrame(frame: *mut mjsFrame);
    pub fn mjs_defaultJoint(joint: *mut mjsJoint);
    pub fn mjs_defaultGeom(geom: *mut mjsGeom);
    pub fn mjs_defaultSite(site: *mut mjsSite);
    pub fn mjs_defaultCamera(camera: *mut mjsCamera);
    pub fn mjs_defaultLight(light: *mut mjsLight);
    pub fn mjs_defaultFlex(flex: *mut mjsFlex);
    pub fn mjs_defaultMesh(mesh: *mut mjsMesh);
    pub fn mjs_defaultHField(hfield: *mut mjsHField);
    pub fn mjs_defaultSkin(skin: *mut mjsSkin);
    pub fn mjs_defaultTexture(texture: *mut mjsTexture);
    pub fn mjs_defaultMaterial(material: *mut mjsMaterial);
    pub fn mjs_defaultPair(pair: *mut mjsPair);
    pub fn mjs_defaultEquality(equality: *mut mjsEquality);
    pub fn mjs_defaultTendon(tendon: *mut mjsTendon);
    pub fn mjs_defaultActuator(actuator: *mut mjsActuator);
    pub fn mjs_defaultSensor(sensor: *mut mjsSensor);
    pub fn mjs_defaultNumeric(numeric: *mut mjsNumeric);
    pub fn mjs_defaultText(text: *mut mjsText);
    pub fn mjs_defaultTuple(tuple: *mut mjsTuple);
    pub fn mjs_defaultKey(key: *mut mjsKey);
    pub fn mjs_defaultPlugin(plugin: *mut mjsPlugin);
    pub fn mjs_asBody(element: *mut mjsElement) -> *mut mjsBody;
    pub fn mjs_asGeom(element: *mut mjsElement) -> *mut mjsGeom;
    pub fn mjs_asJoint(element: *mut mjsElement) -> *mut mjsJoint;
    pub fn mjs_asSite(element: *mut mjsElement) -> *mut mjsSite;
    pub fn mjs_asCamera(element: *mut mjsElement) -> *mut mjsCamera;
    pub fn mjs_asLight(element: *mut mjsElement) -> *mut mjsLight;
    pub fn mjs_asFrame(element: *mut mjsElement) -> *mut mjsFrame;
    pub fn mjs_asActuator(element: *mut mjsElement) -> *mut mjsActuator;
    pub fn mjs_asSensor(element: *mut mjsElement) -> *mut mjsSensor;
    pub fn mjs_asFlex(element: *mut mjsElement) -> *mut mjsFlex;
    pub fn mjs_asPair(element: *mut mjsElement) -> *mut mjsPair;
    pub fn mjs_asEquality(element: *mut mjsElement) -> *mut mjsEquality;
    pub fn mjs_asExclude(element: *mut mjsElement) -> *mut mjsExclude;
    pub fn mjs_asTendon(element: *mut mjsElement) -> *mut mjsTendon;
    pub fn mjs_asNumeric(element: *mut mjsElement) -> *mut mjsNumeric;
    pub fn mjs_asText(element: *mut mjsElement) -> *mut mjsText;
    pub fn mjs_asTuple(element: *mut mjsElement) -> *mut mjsTuple;
    pub fn mjs_asKey(element: *mut mjsElement) -> *mut mjsKey;
    pub fn mjs_asMesh(element: *mut mjsElement) -> *mut mjsMesh;
    pub fn mjs_asHField(element: *mut mjsElement) -> *mut mjsHField;
    pub fn mjs_asSkin(element: *mut mjsElement) -> *mut mjsSkin;
    pub fn mjs_asTexture(element: *mut mjsElement) -> *mut mjsTexture;
    pub fn mjs_asMaterial(element: *mut mjsElement) -> *mut mjsMaterial;
    pub fn mjs_asPlugin(element: *mut mjsElement) -> *mut mjsPlugin;
}